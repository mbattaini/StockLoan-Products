//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockLoanPlatformTester.ContractsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContractsService.IContractsService")]
    public interface IContractsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/GetSourceIP", ReplyAction="http://tempuri.org/IContractsService/GetSourceIPResponse")]
        string GetSourceIP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractBillingsGet", ReplyAction="http://tempuri.org/IContractsService/ContractBillingsGetResponse")]
        byte[] ContractBillingsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractDetailsGet", ReplyAction="http://tempuri.org/IContractsService/ContractDetailsGetResponse")]
        byte[] ContractDetailsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractRateChangeAsOfSet", ReplyAction="http://tempuri.org/IContractsService/ContractRateChangeAsOfSetResponse")]
        bool ContractRateChangeAsOfSet(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSet", ReplyAction="http://tempuri.org/IContractsService/ContractSetResponse")]
        bool ContractSet(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractsGet", ReplyAction="http://tempuri.org/IContractsService/ContractsGetResponse")]
        byte[] ContractsGet(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractsResearchGet", ReplyAction="http://tempuri.org/IContractsService/ContractsResearchGetResponse")]
        byte[] ContractsResearchGet(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractsSummaryByBillings", ReplyAction="http://tempuri.org/IContractsService/ContractsSummaryByBillingsResponse")]
        byte[] ContractsSummaryByBillings(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryGetResponse")]
        byte[] ContractSummaryGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryByBookCash", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByBookCashResponse")]
        byte[] ContractSummaryByBookCash(string bizDate, string bookGroup, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryByBookProfitLossGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByBookProfitLossGetResponse")]
        byte[] ContractSummaryByBookProfitLossGet(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummarybyCashGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummarybyCashGetResponse")]
        byte[] ContractSummarybyCashGet(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryByCreditsDebits", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByCreditsDebitsResponse")]
        byte[] ContractSummaryByCreditsDebits(string bizDate, string userId, string userPassword, string bookGroup, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryByHypothicationGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByHypothicationGetResponse")]
        byte[] ContractSummaryByHypothicationGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryByMarketValueGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByMarketValueGetResponse")]
        byte[] ContractSummaryByMarketValueGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/ContractSummaryBySecurityGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryBySecurityGetResponse")]
        byte[] ContractSummaryBySecurityGet(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractsServiceChannel : StockLoanPlatformTester.ContractsService.IContractsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsServiceClient : System.ServiceModel.ClientBase<StockLoanPlatformTester.ContractsService.IContractsService>, StockLoanPlatformTester.ContractsService.IContractsService {
        
        public ContractsServiceClient() {
        }
        
        public ContractsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSourceIP() {
            return base.Channel.GetSourceIP();
        }
        
        public byte[] ContractBillingsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractBillingsGet(bizDate, bookGroup, userId, userPassword, functionPath);
        }
        
        public byte[] ContractDetailsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractDetailsGet(bizDate, bookGroup, userId, userPassword, functionPath);
        }
        
        public bool ContractRateChangeAsOfSet(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractRateChangeAsOfSet(startDate, endDate, bookGroup, book, contractId, oldRate, newRate, actUserId, userId, userPassword, functionPath);
        }
        
        public bool ContractSet(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            return base.Channel.ContractSet(bizDate, bookGroup, contractId, contractType, book, secId, quantity, quantitySettled, amount, amountSettled, collateralCode, valueDate, settleDate, termDate, rate, rateCode, statusFlag, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, otherBook, comment, fund, tradeRefId, feeAmount, feeCurrencyIso, feeType, returnData, isIncremental, isActive, userId, userPassword, functionPath);
        }
        
        public byte[] ContractsGet(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractsGet(bizDate, bookGroup, contractId, contractType, userId, userPassword, functionPath);
        }
        
        public byte[] ContractsResearchGet(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractsResearchGet(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath);
        }
        
        public byte[] ContractsSummaryByBillings(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractsSummaryByBillings(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath);
        }
        
        public byte[] ContractSummaryGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode) {
            return base.Channel.ContractSummaryGet(bizDate, bookGroup, userId, userPassword, functionPath, usePoolCode);
        }
        
        public byte[] ContractSummaryByBookCash(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractSummaryByBookCash(bizDate, bookGroup, userId, userPassword, functionPath);
        }
        
        public byte[] ContractSummaryByBookProfitLossGet(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath) {
            return base.Channel.ContractSummaryByBookProfitLossGet(bizDate, startDate, stopDate, userId, userPassword, bookGroup, functionPath);
        }
        
        public byte[] ContractSummarybyCashGet(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractSummarybyCashGet(bizDate, bookGroup, settlementType, userId, userPassword, functionPath);
        }
        
        public byte[] ContractSummaryByCreditsDebits(string bizDate, string userId, string userPassword, string bookGroup, string functionPath) {
            return base.Channel.ContractSummaryByCreditsDebits(bizDate, userId, userPassword, bookGroup, functionPath);
        }
        
        public byte[] ContractSummaryByHypothicationGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractSummaryByHypothicationGet(bizDate, bookGroup, userId, userPassword, functionPath);
        }
        
        public byte[] ContractSummaryByMarketValueGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractSummaryByMarketValueGet(bizDate, bookGroup, userId, userPassword, functionPath);
        }
        
        public byte[] ContractSummaryBySecurityGet(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath) {
            return base.Channel.ContractSummaryBySecurityGet(bizDate, bookGroup, usePoolCode, userId, userPassword, functionPath);
        }
    }
}
