<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Silverlight.Excel</name>
    </assembly>
    <members>
        <member name="T:C1.Silverlight.Excel.FormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.Silverlight.Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.FormulaCollection.Fill(C1.Silverlight.Excel.XLSheet)">
            <summary>
            Fill this collection of all formulas of the workbook.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.FormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.SharedFormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.Silverlight.Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.SharedFormulaCollection.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of a shared <see cref="T:C1.Silverlight.Excel.BiffFormula"/> object in the collection for row and column position.
            </summary>
            <param name="row">The row of a cell with shared formula.</param>
            <param name="col">The column of a cell with shared formula.</param>
            <returns>The index of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.SharedFormulaCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.SharedFormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.TableFormulaCollection">
            <summary>
            Represents a collection of shared <see cref="T:C1.Silverlight.Excel.BiffFormula"/> objects.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.TableFormulaCollection.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of a table <see cref="T:C1.Silverlight.Excel.BiffFormula"/> object in the collection for row and column position.
            </summary>
            <param name="row">The row of a cell with table formula.</param>
            <param name="col">The column of a cell with table formula.</param>
            <returns>The index of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.TableFormulaCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.TableFormulaCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.BiffFormula">
            <summary>
            BIFF formula support. 
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.BiffFormula.Parser">
            <summary>
            Represents a formula parser from string.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.FormulaType">
            <summary>
            The types of formulas.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.Cell">
            <summary>Call from cell formula.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.Shared">
            <summary>Call from shared cell formula.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.Array">
            <summary>Call from shared array formula.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.ReArray">
            <summary>Call from shared recalculated array formula.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.Table">
            <summary>Call from table formula.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.NamedRange">
            <summary>Call from named range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaType.DataValidation">
            <summary>Call from data validation.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.FormulaFlags">
            <summary>
            The flags of formulas.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.RecalcAlways">
            <summary>Formula recalculate always.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.CalcOnOpen">
            <summary>Formula recalculate at open.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.PartShared">
            <summary>Formula part shared.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.Array">
            <summary>Formula is array.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.ArrayShared">
            <summary>Formula array shared.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.DTR">
            <summary>Table column or row input cell.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.DT2D">
            <summary>Table two input cells, otherwise one input cell.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.RowDeleted">
            <summary>Table row is deleted.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FormulaFlags.ColumnDeleted">
            <summary>Table column is deleted.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.FileFormat">
            <summary>
            Specifies the file format to use when loading or saving workbooks.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FileFormat.OpenXml">
            <summary>
            Office 2007/2010 format. (Compressed Xml format).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.FileFormat.OpenXmlTemplate">
            <summary>
            Office 2007/2010 template format. (Compressed Xml format).
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.CompatibilityMode">
            <summary>
            Specifies limits to sheet size that correspond to specific versions
            of Microsoft Excel.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CompatibilityMode.Excel2003">
            <summary>
            Sheets may have up to 65,536 rows and 256 columns. Workbooks may have up to 4050 unique cell styles.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CompatibilityMode.Excel2007">
            <summary>
            <para>Sheets may have up to 1,048,576 rows and 18,278 columns. Workbooks may have up to 65,536 unique cell styles.</para>
            <para>Workbooks that exceed the Excel2003 limits must be saved in OpenXml format instead of XLS.</para>
            <para>It may not be possible to open these workbooks with versions earlier than Excel 2007 (C1Excel will still open them correctly).</para>
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CompatibilityMode.NoLimits">
            <summary>
            <para>No size limits are enforced.</para>
            <para>It may not be possible to open these workbooks with any version of Excel (C1Excel will still open them correctly).</para>
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.CalculationMode">
            <summary>
            Specifies calculation mode for all formulas in the workbook.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CalculationMode.Manual">
            <summary>Manual calculation mode for all formulas in the workbook (F9 in MS Excel).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CalculationMode.Auto">
            <summary>Automatic calculation mode for all formulas in the workbook.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.CalculationMode.AutoNoTable">
            <summary>Automatic no table calculation mode for all formulas in the workbook.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.ICloneable">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.ICloneable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:C1.Silverlight.Excel.C1XLBook">
            <summary>
            <para>Represents an Excel workbook containing one or more worksheets.</para>
            <para>Contains methods for loading and saving XLS files, and exposes
            a collection of <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects that represent the individual
            worksheets.</para>
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> class. The 
            new workbook contains a single empty <see cref="T:C1.Silverlight.Excel.XLSheet"/> called "Sheet1".
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Clear">
            <summary>
            Clears the <see cref="T:C1.Silverlight.Excel.C1XLBook"/>, restoring the initial state with a single
            <see cref="T:C1.Silverlight.Excel.XLSheet"/> called "Sheet1".
            </summary>
            <remarks>
            The <see cref="M:C1.Silverlight.Excel.C1XLBook.Clear"/> method restores the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object
            to its initial state, with a single empty sheet called "Sheet1" and the 
            <see cref="P:C1.Silverlight.Excel.C1XLBook.DefaultFont"/> set to 10pt Arial.
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.String)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <remarks>
            <para>Component One Excel infers the file format automatically based on the 
            file name extension. "XLSX" and "ZIP" files are loaded as OpenXml; all 
            others are loaded as Biff8 files ("xls").</para>
            <para>If the file doesn't exist, is locked, or is not a valid Excel 
            file, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.String,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.String,C1.Silverlight.Excel.FileFormat)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.String,C1.Silverlight.Excel.FileFormat,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Save(System.String)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <remarks>
            <para>The format used to save the file is automatically determined by the 
            file name extension. "Xlsx" and "zip" files are saved as OpenXml; all others 
            are saved as Biff8 files ("xls").</para>
            <para>If the file can't be created, an exception is thrown. 
            This typically indicates that the file is currently open by another 
            application (such as Microsoft Excel).</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Save(System.String,C1.Silverlight.Excel.FileFormat)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the type of file to save.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.IO.Stream)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="fillSheets">True to load data into the sheets; False to read the sheet names only.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.IO.Stream,C1.Silverlight.Excel.FileFormat)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <remarks>
            Loading the worksheets without their data is much faster than loading the entire workbook.
            This is useful in situations where you want to examine the contents of the file (for example, 
            to ensure that you will not overwrite an existing sheet).
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Load(System.IO.Stream,C1.Silverlight.Excel.FileFormat,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets"><b>True</b> to load data into the sheets; <b>False</b> to read the sheet names only.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Save(System.IO.Stream)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <remarks>
            This method allows saving the workbook directly into streams without using 
            temporary files. Typical uses include saving books to web page response streams
            or mail attachment streams.
            </remarks>
            <example>
            The code below saves a <see cref="T:C1.Silverlight.Excel.C1XLBook"/> into a <see cref="T:System.IO.MemoryStream"/>, clears
            the book, then loads it back from the same stream.
            <code>
            // save book into new MemoryStream
            MemoryStream ms = new MemoryStream();
            _book.Save(ms);
            
            // clear book
            _book.Clear();
            
            // load it back from the MemoryStream
            ms.Position = 0;
            _book.Load(ms);
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Save(System.IO.Stream,C1.Silverlight.Excel.FileFormat)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <param name="format"><see cref="P:C1.Silverlight.Excel.C1XLBook.FileFormat"/> value that specifies the format to save the worksheet in.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)">
            <summary>
            Converts a pixel measurement into twips (1/20th of a point).
            </summary>
            <param name="pix">Measurement in screen pixels.</param>
            <returns>Measurement in twips.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), a 
            resolution-independent unit. .NET controls, on the other hand, usually 
            express measurements in pixels. This method provides an easy way to 
            convert pixel measurements into twips using the current screen resolution.</para>
            <seealso cref="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)">
            <summary>
            Converts a twip measurement into screen pixels.
            </summary>
            <param name="twip">Measurement in twips.</param>
            <returns>Measurement in screen pixels.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), 
            a resolution-independent unit. .NET controls, on the other hand, 
            usually express measurements in pixels. This method provides an 
            easy way to convert pixel measurements into twips using the 
            current screen resolution.</para>
            <para><see cref="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)"/></para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.C1XLBook.Clone">
            <summary>
            Creates a copy of this C1Excel book.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object with the same contents and formatting as this book.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.Sheets">
            <summary>
            Gets a collection of <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects that represent
            the worksheets in the <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </summary>
            <remarks>
            The <see cref="T:C1.Silverlight.Excel.XLSheetCollection"/> returned has methods for counting, 
            enumerating, adding and removing sheets from the <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.DefaultFont">
            <summary>
            Gets or sets the default font object for the <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </summary>
            <remarks>
            <para>You can assign any font to any cell using <see cref="T:C1.Silverlight.Excel.XLStyle"/> objects. Cells
            that have no associated custom styles or have styles that do not define
            a custom font are displayed using the book's default font.</para>
            <para>The <see cref="P:C1.Silverlight.Excel.C1XLBook.DefaultFont"/> property is initially set to 10 pt Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.KeepFormulas">
            <summary>
            Specifies whether the component should store formulas read from XLS/XLSX files
            and write them back when saving the file.
            </summary>
            <remarks>
            <para>Setting this property to true allows you to load existing XLS/XLSX files, modify the values 
            in some cells, and save the file preserving the formulas. This is the default setting.</para>
            <para>Setting this property to false causes the component to remove the formulas in the book 
            when it is loaded. Saving the file in this case will retain the last calculated values but 
            will remove the formulas.</para>
            <para>Assigning any value to a cell will clear the formula in the cell.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.Author">
            <summary>
            Gets or sets the name of the person, company, or application that created this <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.CalculationMode">
            <summary>
            Specifies calculation mode of formulas.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.NamedRanges">
            <summary>
            Gets the collection of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> objects for the current workbook.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.IsLoading">
            <summary>
            Determines whether the workbook is currently loading.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.C1XLBook.CompatibilityMode">
            <summary>
            Gets or sets limits on sheet size and the number of styles allowed per workbook.
            </summary>
            <remarks>
            <para>This property allows you to specify which version of Microsoft Excel 
            you want your workbooks to be compatible with.</para>
            <para><b>Excel2003</b> mode allows you to create sheets with up to 65,536 rows and 256 columns.
            <b>Excel2007</b> mode allows you to create sheets with up to 1,048,576 rows and 18,278 columns.</para>
            <para>Note that the XLS file format is limited by the <b>Excel2003</b> limits. If you
            use the <b>Excel2007</b> mode and create large sheets, save them into <b>OpenXml</b> files
            instead of XLS.</para>
            </remarks>
        </member>
        <member name="T:C1.Silverlight.Excel.ImageFormat">
            <summary>
            The image format proxy.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Bmp">
            <summary>The bitmap (BMP) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Emf">
            <summary>The enhanced metafile (EMF) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Gif">
            <summary>The Graphics Interchange Format (GIF) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Jpeg">
            <summary>The Joint Photographic Experts Group (JPEG) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Png">
            <summary>The W3C Portable Network Graphics (PNG) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Tiff">
            <summary>The Tagged Image File Format (TIFF) image format.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ImageFormat.Wmf">
            <summary>The Windows metafile (WMF) image format.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.BuiltInFormats">
            <summary>
            Summary description for BuiltInFormats.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLCell">
            <summary>
            Represents individual cells in an <see cref="T:C1.Silverlight.Excel.XLSheet"/> and provides
            properties for getting and setting the cell <see cref="P:C1.Silverlight.Excel.XLCell.Value"/>,
            <see cref="P:C1.Silverlight.Excel.XLCell.Style"/>, and <see cref="P:C1.Silverlight.Excel.XLCell.Hyperlink"/>.
            </summary>
            <remarks>
            <para>To create cells, use the <see cref="T:C1.Silverlight.Excel.XLSheet"/> indexer (Item property). 
            If the cell already exists, the reference will be returned as usual. 
            If not, the sheet will create the cell (as well as rows and columns if 
            necessary) and will return a reference to the new cell.</para>
            <para>Because it creates cells automatically, the indexer is especially 
            useful when creating and populating sheets.</para>
            </remarks>
            <example>
            For example, the code below creates a new <see cref="T:C1.Silverlight.Excel.C1XLBook"/>, then 
            populates the first sheet with a 10 by 10 multiplication table:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            for (int r = 0; r &lt; 10; r++)
            {
              for (int c = 0; c &lt; 10; c++)
              {
                XLCell cell = sheet[r, c];
            	cell.Value = (r+1) * (c+1);
              }
            }
            book.Save(@"c:\temp\test.xls");
            </code>
            Note how the code simply accesses the cells using the indexer. There's no 
            need to create any rows, columns, or cells. The indexer takes care of all 
            that automatically.
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCell.Clone">
            <summary>
            Creates a copy of this cell with values.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLCell"/> object that is a copy of the current instance.</returns>
            <remarks>The formula of the cell is cloned only as a part of row, worksheet or workbook.</remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCell.SetValue(System.Object,C1.Silverlight.Excel.XLStyle)">
            <summary>
            Sets the <see cref="P:C1.Silverlight.Excel.XLCell.Value"/> and <see cref="P:C1.Silverlight.Excel.XLCell.Style"/> properties of a cell.
            </summary>
            <param name="value">New cell value.</param>
            <param name="style">New cell style.</param>
            <remarks>
            This method allows you to set the Value and Style properties of a cell
            simultaneously. This can make your code more compact and easier to maintain.
            For example:
            <code>
            // set cell value and style (short version)
            sheet[0,0].SetValue("Hello", styleBold);
            
            // set cell value and style (longer version)
            sheet[0,0].Value = "Hello";
            sheet[0,0].Style = styleBold;
            </code>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCell.Value">
            <summary>
            Gets or sets the value stored in the cell.
            </summary>
            <remarks>
            <para>The value may contain strings, numeric, Boolean, DateTime, or
            null objects. Other types of objects cannot be saved in Excel files.</para>
            <para>DateTime values are internally converted into doubles, 
            and stored in the sheet as such. The only way to tell the difference 
            between a DateTime value and a double in Excel is by way of the 
            format associated with the cell (<see cref="P:C1.Silverlight.Excel.XLStyle.Format"/> property).
            </para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCell.Style">
            <summary>
            Gets or sets the <see cref="T:C1.Silverlight.Excel.XLStyle"/> object associated with the cell.
            </summary>
            <remarks>
            <para>The appearance of each cell is defined by one or more XLStyle objects.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell 
            styles and merges the style elements defined in each one in order to 
            determine how the cell should be displayed.</para>
            <para>The precedence of the styles is: (1) cell, (2) row, (3) column, 
            (4) default style. For example, if a cell style defines the font and 
            background color, those will be applied regardless of the settings in the 
            row and column styles. If the row style defines an alignment, that will 
            be applied regardless of the column style, and so on.</para>
            <para>The cell style may be null, in which case the cell is displayed 
            using the other styles available or the default book style if no others 
            are available.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCell.Hyperlink">
            <summary>
            Gets or sets a string that specifies an action to take when the cell
            is clicked.
            </summary>
            <remarks>
            <para>Hyperlinks may contain URLs that when clicked open a browser window and
            navigate to the specified site (for example, "http://www.componentone.com"). They
            may also contain references to files that are launched by the application
            associated with the file type (for example, "readme.doc"). Finally, hyperlinks
            can be used to send e-mails (for example, "mailto:joe@foo.com").</para>
            <para>Each cell may contain a hyperlink and a value. However, if you assign
            a hyperlink to a cell that has no value (<see cref="P:C1.Silverlight.Excel.XLCell.Value"/> == null), then
            the hyperlink text is automatically assigned to the cell value as well.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCell.Formula">
            <summary>
            Gets or sets a string that specifies a formula of the cell.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCell.Text">
            <summary>
            Gets approximate text string of this cell value.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLReferenceMode">
            <summary>
            The reference mode.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLReferenceMode.R1C1">
            <summary>R1C1 style, default by formulas.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLReferenceMode.A1">
            <summary>A1 style, default by spreadsheet.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLReferenceType">
            <summary>
            The reference type.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLReferenceType.Absolute">
            <summary>Absolute coordinates.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLReferenceType.Relative">
            <summary>Relative coordinates.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLRangeType">
            <summary>
            The range type.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLRangeType.Default">
            <summary>Default range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLRangeType.Indirect">
            <summary>Indirect range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLRangeType.Offset">
            <summary>Offset range.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Silverlight.Excel.XLCellRange"/> objects on 
            an <see cref="T:C1.Silverlight.Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.Silverlight.Excel.XLCellRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Contains(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object.
            </summary>
            <param name="cr"><see cref="T:C1.Silverlight.Excel.XLCellRange"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.IndexOf(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Gets the position of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object in the collection.
            </summary>
            <param name="cr"><see cref="T:C1.Silverlight.Excel.XLCellRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Remove(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object from the collection.
            </summary>
            <param name="cr"><see cref="T:C1.Silverlight.Excel.XLCellRange"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Add(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Appends an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object to the collection.
            </summary>
            <param name="cr"><see cref="T:C1.Silverlight.Excel.XLCellRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the cell range.</param>
            <param name="colIndex">Index of the left column in the cell range.</param>
            <param name="rowCount">Number of rows in the cell range.</param>
            <param name="colCount">Number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRangeCollection.Insert(System.Int32,C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Inserts an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="cr">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Silverlight.Excel.XLCellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRangeCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRangeCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRangeCollection.ActiveIndex">
            <summary>
            Gets or sets the active index in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLCellRange">
            <summary>
            Represents a range of <see cref="T:C1.Silverlight.Excel.XLCell"/> objects in an <see cref="T:C1.Silverlight.Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing
            an empty range.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The <see cref="T:C1.Silverlight.Excel.XLSheet"/> of this cell range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The <see cref="T:C1.Silverlight.Excel.XLSheet"/> of this cell range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
            <param name="rowFromRef">The reference type of the top row in the range.</param>
            <param name="rowToRef">The reference type of the bottom row in the range.</param>
            <param name="colFromRef">The reference type of the left column in the range.</param>
            <param name="colToRef">The reference type of the right column in the range.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="ws">The <see cref="T:C1.Silverlight.Excel.XLSheet"/> of the range.</param>
            <param name="row">The row in the range equal one cell.</param>
            <param name="col">The column in the range equal one cell.</param>
            <param name="rowRef">The reference type of the row.</param>
            <param name="colRef">The reference type of the column.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType,C1.Silverlight.Excel.XLReferenceType)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheetFrom">First index of the <see cref="T:C1.Silverlight.Excel.XLSheet"/> of the range.</param>
            <param name="sheetTo">Last index of the <see cref="T:C1.Silverlight.Excel.XLSheet"/> of the range.</param>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Right column in the range.</param>
            <param name="rowFromRef">The reference type of the top row in the range.</param>
            <param name="rowToRef">The reference type of the bottom row in the range.</param>
            <param name="colFromRef">The reference type of the left column in the range.</param>
            <param name="colToRef">The reference type of the right column in the range.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(C1.Silverlight.Excel.XLSheet,System.String)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="sheet">The owner sheet for the range.</param>
            <param name="reference">The text presentation of a specified range without sheets.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.#ctor(C1.Silverlight.Excel.C1XLBook,System.String)">
            <summary>
            Creates an instance of an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object containing a specified range.
            </summary>
            <param name="book">The owner workbook for the range.</param>
            <param name="reference">The text presentation of a specified range.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.Clone">
            <summary>
            Creates a copy of this cell range.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.ToString">
            <summary>
            Returns a reference string that represents the range.
            </summary>
            <returns>A reference string that represents the range.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.Contains(C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.Contains(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Determines whether the range contains a specific range.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLCellRange.Intersects(C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Determines whether the range intersects another range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.IsEmpty">
            <summary>
            Determines whether the range is empty.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RowFrom">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.ColumnFrom">
            <summary>
            Gets the index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RowCount">
            <summary>
            Gets the number of rows in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.ColumnCount">
            <summary>
            Gets the number of columns in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.SheetCount">
            <summary>
            Gets the number of sheets in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RowTo">
            <summary>
            Gets or sets the index of the last row in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.ColumnTo">
            <summary>
            Gets or sets the index of the last column in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RowFromRef">
            <summary>
            Gets the reference type of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.ColumnFromRef">
            <summary>
            Gets the reference type of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RowToRef">
            <summary>
            Gets the reference type of the bottom row in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.ColumnToRef">
            <summary>
            Gets the reference type of the right column in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.RangeType">
            <summary>
            Gets or sets a type (default, indirect or offset) for this cell range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.SheetFrom">
            <summary>
            Gets the index of the first sheet in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.SheetTo">
            <summary>
            Gets or sets the index of the last sheet in the range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.Sheets">
            <summary>
            Gets an array of <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.Value">
            <summary>
            Gets or sets the complex value associated with this range of cells.
            </summary>
            <remarks>
            The value may contain strings, numeric, Boolean, DateTime, or
            null objects. Other types of objects cannot be saved in Excel files.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLCellRange.Style">
            <summary>
            Gets or sets the <see cref="T:C1.Silverlight.Excel.XLStyle"/> object associated with this range of cells.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLUnderlineStyle">
            <summary>
            The Excel font underline style.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLUnderlineStyle.None">
            <summary>No underline.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLUnderlineStyle.Single">
            <summary>Single underline.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLUnderlineStyle.Double">
            <summary>Double underline.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLUnderlineStyle.SingleAccounting">
            <summary>Single accounting underline.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLUnderlineStyle.DoubleAccounting">
            <summary>Double accounting underline.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLFontScript">
            <summary>
            The Excel font superscript/subscript style.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLFontScript.None">
            <summary>Normal.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLFontScript.Superscript">
            <summary>Superscript.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLFontScript.Subscript">
            <summary>Subscript.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLFont">
            <summary>
            XLFont
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.#ctor(System.String,System.Single)">
            <summary>
            Excel font initialization.
            </summary>
            <param name="fontName">The font name, by default Arial.</param>
            <param name="fontSize">The font size in points, by default 10 pt.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.#ctor(System.String,System.Single,System.Windows.Media.Color)">
            <summary>
            Excel font initialization.
            </summary>
            <param name="fontName">The font name, by default Arial.</param>
            <param name="fontSize">The font size in points, by default 10 pt.</param>
            <param name="color">The foreground color of the font, by default <b>Black</b>.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Excel font initialization.
            </summary>
            <param name="fontName">The font name, by default Arial.</param>
            <param name="fontSize">The font size in points, by default 10 pt.</param>
            <param name="bold">The bold flag of the font.</param>
            <param name="italic">The italic flag of the font.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Windows.Media.Color)">
            <summary>
            Excel font initialization.
            </summary>
            <param name="fontName">The font name, by default Arial.</param>
            <param name="fontSize">The font size in points, by default 10 pt.</param>
            <param name="bold">The bold flag of the font.</param>
            <param name="italic">The italic flag of the font.</param>
            <param name="color">The foreground color of the font, by default <b>Black</b>.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,C1.Silverlight.Excel.XLFontScript,C1.Silverlight.Excel.XLUnderlineStyle,System.Windows.Media.Color)">
            <summary>
            Excel font initialization.
            </summary>
            <param name="fontName">The font name, by default Arial.</param>
            <param name="fontSize">The font size in points, by default 10 pt.</param>
            <param name="bold">The bold flag of the font.</param>
            <param name="italic">The italic flag of the font.</param>
            <param name="strikeout">The strikeout flag of the font.</param>
            <param name="fs">The font superscript/subscript, by default <b>None</b>.</param>
            <param name="us">Select <see cref="T:C1.Silverlight.Excel.XLUnderlineStyle"/> as underline style, by default <b>None</b>.</param>
            <param name="color">The foreground color of the font, by default <b>Black</b>.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current Excel font.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLFont.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object instances are considered equal.
            </summary>
            <param name="obj">A Excel font to compare.</param>
            <returns><b>true</b> if the objects are considered equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.FontName">
            <summary>
            Gets Excel font name (font family).
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.FontSize">
            <summary>
            Gets Excel font size in points.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Bold">
            <summary>
            Gets bold flag of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Italic">
            <summary>
            Gets italic flag of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Strikeout">
            <summary>
            Gets strikeout flag of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Underline">
            <summary>
            Gets <see cref="T:C1.Silverlight.Excel.XLUnderlineStyle"/> value of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Script">
            <summary>
            Gets <see cref="T:C1.Silverlight.Excel.XLFontScript"/> value of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.Color">
            <summary>
            Gets <see cref="P:C1.Silverlight.Excel.XLFont.Color"/> value of the Excel font.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLFont.SizeInPoints">
            <summary>
            Gets Excel font size in points.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLHyperlink.Link">
            <summary>
            Gets a hyperlink text of this object.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.NamedRangeFlags">
            <summary>
            Reference named range flags.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.Default">
            <summary>Default named range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.HiddenName">
            <summary>Named range with hidden name.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.FunctionName">
            <summary>Function name.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.CommandName">
            <summary>Command name.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.Macro">
            <summary>Macro named range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.Complex">
            <summary>Complex named range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.BuiltIn">
            <summary>Built-in named range.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.NamedRangeFlags.BinaryData">
            <summary>Named range as binary data.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLNamedRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> objects.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Contains(C1.Silverlight.Excel.XLNamedRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object.
            </summary>
            <param name="namedRange">The <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to look for.</param>
            <returns>True if the collection contains the range, false otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Contains(System.String)">
            <summary>
            Checks whether the collection contains an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to look for.</param>
            <returns>True if the collection contains the range, false otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.IndexOf(C1.Silverlight.Excel.XLNamedRange)">
            <summary>
            Gets the position of an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object in the collection.
            </summary>
            <param name="nr">The <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.IndexOf(System.String)">
            <summary>
            Gets the position of an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object with the specified name in the collection.
            </summary>
            <param name="name">The name of the <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Remove(C1.Silverlight.Excel.XLNamedRange)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object from the collection.
            </summary>
            <param name="nr">The <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to remove from the collection.</param>
            <returns>True if the object was removed, false if it was not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Remove(System.String)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object with the specified name from the collection.
            </summary>
            <param name="name">The name of the range to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">The index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(C1.Silverlight.Excel.XLNamedRange)">
            <summary>
            Appends an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to the collection.
            </summary>
            <param name="namedRange">The <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(System.String,C1.Silverlight.Excel.XLCellRange)">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of the named range to create.</param>
            <param name="cellRange">The <see cref="T:C1.Silverlight.Excel.XLCellRange"/> to include in the named range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(System.String,C1.Silverlight.Excel.XLCellRange[])">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of the named range to create.</param>
            <param name="cellRanges">The array of <see cref="T:C1.Silverlight.Excel.XLCellRange"/> to include in the named range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(System.String,C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object and appends it to the collection.
            This overload creates a range containing a single cell.
            </summary>
            <param name="name">The name of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object.</param>
            <param name="sheet">The worksheet the range belongs to.</param>
            <param name="rowIndex">The row index of the cell in the range.</param>
            <param name="colIndex">The column index of the cell in the range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object and appends it to the collection.
            This overload allows you to create a 3-D reference to the same range of cells on multiple worksheets.
            </summary>
            <param name="name">The name of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object.</param>
            <param name="firstSheetIndex">The index of the first <see cref="T:C1.Silverlight.Excel.XLSheet"/> to include.</param>
            <param name="lastSheetIndex">The index of the last <see cref="T:C1.Silverlight.Excel.XLSheet"/> to include.</param>
            <param name="rowIndex">The index of the top row in the cell range.</param>
            <param name="colIndex">The index of the left column in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Add(System.String,C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object and appends it to the collection.
            </summary>
            <param name="name">The name of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object.</param>
            <param name="sheet">The worksheet containing the range.</param>
            <param name="rowIndex">The index of the top row in the cell range.</param>
            <param name="colIndex">The index of the left column in the cell range.</param>
            <param name="rowCount">The number of rows in the cell range.</param>
            <param name="colCount">The number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRangeCollection.Insert(System.Int32,C1.Silverlight.Excel.XLNamedRange)">
            <summary>
            Inserts an <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object at a specific position in the collection.
            </summary>
            <param name="index">The position where the object will be inserted.</param>
            <param name="namedRange">The named range to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRangeCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRangeCollection.Item(System.Int32)">
            <summary>
            Gets a reference to the <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object at the specified index.
            Returns null if an invalid index is specified.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRangeCollection.Item(System.String)">
            <summary>
            Gets a reference to the <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object with the specified name.
            Returns null if an object with the specified name could not be found in the collection.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLNamedRange">
            <summary>
            Represents a named range of <see cref="T:C1.Silverlight.Excel.XLCell"/> objects
            on one or several worksheets.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.#ctor(C1.Silverlight.Excel.C1XLBook,System.String,C1.Silverlight.Excel.XLCellRange[])">
            <summary>
            Creates an instance of a <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object containing
            a specified range.
            </summary>
            <param name="book">The owner workbook.</param>
            <param name="name">The name of this range.</param>
            <param name="crs">The array of cell ranges.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.Clone">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLNamedRange"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.Contains(C1.Silverlight.Excel.XLSheet,System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
            <param name="sheet">The worksheet containing the cell.</param>
            <param name="row">The row index of the cell.</param>
            <param name="col">The column index of the cell.</param>
            <returns>True if the current named range contains the specified cell, false otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.ParseDefinition(System.Collections.Generic.Stack{C1.Silverlight.Excel.Tokens.Token})">
            <summary>
            Parse definition as stack tokens.
            </summary>
            <param name="definition">The stack of tokens.</param>
            <returns>The array of <see cref="T:C1.Silverlight.Excel.XLCellRange"/> approximate object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.GetBuiltInName(System.Int32)">
            <summary>
            Gets built-in name for code.
            </summary>
            <param name="builtInName">The code of built-in name.</param>
            <returns>The built-in name or 'Unknown'.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLNamedRange.GetBuiltInCode(System.String)">
            <summary>
            Gets built-in code that supported now.
            </summary>
            <param name="name">The name of named range.</param>
            <returns>The code, 0 if not support, -1 if not found.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.IsEmpty">
            <summary>
            Determines whether the current range is empty.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.IsNameOnly">
            <summary>
            Determines whether the current named range has a valid name
            but does not define a range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.IsBuiltInName">
            <summary>
            Determines whether the range has a built-in name.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.CellRange">
            <summary>
            Gets a reference to the <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object that determines
            which cells are contained in the current named range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.CellRanges">
            <summary>
            Gets a reference to array of the <see cref="T:C1.Silverlight.Excel.XLCellRange"/> objects that determines
            which cells are contained in the current named range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.Name">
            <summary>
            Gets or sets the name of the current named range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.MenuText">
            <summary>
            Gets or sets the text of the context menu associated with the current named range.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.Description">
            <summary>
            Gets or sets the description text.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.HelpTopic">
            <summary>
            Gets or sets the help topic resource into help file.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.StatusText">
            <summary>
            Gets or sets the text for the status bar.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLNamedRange.Comment">
            <summary>
            Gets or sets the comment text associated with the current named range.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.OpenXmlReader">
            <summary>
            The Open XML format reader.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.OpenXmlReader.LoadSheet(System.Xml.XmlReader,C1.Silverlight.Excel.XLSheet)">
            <summary>
            Load worksheet from Open XML format.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object.</param>
            <param name="sheet">The loading sheet.</param>
            <returns>The drawing canvas link array.</returns>
        </member>
        <member name="T:C1.Silverlight.Excel.OpenXmlWriter">
            <summary>
            The Open XML format writer.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.OpenXmlWriter.SaveSheet(System.Xml.XmlWriter,C1.Silverlight.Excel.XLSheet)">
            <summary>
            Save worksheet to Open XML format.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> object.</param>
            <param name="sheet">The saving sheet.</param>
            <returns>The hyperlink array.</returns>
        </member>
        <member name="T:C1.Silverlight.Excel.XLPrintSettings">
            <summary>
            Provides options and settings for printing <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects.
            </summary>
            <remarks>
            <para>The settings are applied to each sheet and are accessible through the
            sheet's <see cref="P:C1.Silverlight.Excel.XLSheet.PrintSettings"/> property.</para>
            <para>Note that <see cref="T:C1.Silverlight.Excel.C1XLBook"/> does not provide any printing
            services. The settings are used when printing the sheet from Excel.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLPrintSettings.Clone">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLPrintSettings"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLPrintSettings"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLPrintSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Silverlight.Excel.XLPrintSettings"/> class.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.Header">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            <para>The header string may contain special commands, i.e. placeholders for the page number, 
            current date, or text formatting attributes. Most of these fields are represented by single 
            letters with a leading ampersand ("&amp;").</para>
            <para>The page header is divided into 3 sections: left, center, and right. Each section is 
            introduced by a special command ("&amp;L", "&amp;C", and "&amp;R"). All text and all commands following 
            are part of the selected section.</para>
            <para>The following commands are available:</para>
            <para>&amp;L Start of the left section</para>
            <para>&amp;C Start of the centered section</para>
            <para>&amp;R Start of the right section</para>
            <para>&amp;P Current page number</para>
            <para>&amp;N Page count</para>
            <para>&amp;D Current date</para>
            <para>&amp;T Current time</para>
            <para>&amp;A Sheet name</para>
            <para>&amp;F File name without path</para>
            <para>&amp;Z File path without file name</para>
            <para>&amp;G Picture (file name)</para>
            <para>&amp;B Bold toggle</para>
            <para>&amp;I Italic toggle</para>
            <para>&amp;U Underline toggle</para>
            <para>&amp;E Double underline toggle</para>
            <para>&amp;S Strikeout toggle</para>
            <para>&amp;X Superscript toggle</para>
            <para>&amp;Y Subscript toggle</para>
            <para>&amp;"[FontName]" Set new font</para>
            <para>&amp;"[FontName,FontStyle]" Set new font with specified style. The style is in most cases 
            "Regular", "Bold", "Italic", or "Bold Italic".</para>
            &amp;[fontheight] Set font height in points.
            </remarks>
            <example>
            The code below creates a header with left, center, and right portions.
            <code>
            PrintSettings ps = sheet.PrintSettings;
            ps.Header = "&amp;LHeader Left&amp;CHeader Center&amp;RHeader Right";
            </code>
            </example>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.Footer">
            <summary>
            Gets or sets the string to be displayed as a page footer when the sheet is printed.
            </summary>
            <remarks>
            The footer string has the same structure and embedded commands as the header string. 
            See the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.Header"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.CenterHorizontal">
            <summary>
            Gets or sets whether the sheet should be centered horizontally on the page when printed.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.CenterVertical">
            <summary>
            Gets or sets whether the sheet should be centered vertically on the page when printed.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginLeft">
            <summary>
            Gets or sets the left margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginRight">
            <summary>
            Gets or sets the right margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginTop">
            <summary>
            Gets or sets the top margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginBottom">
            <summary>
            Gets or sets the bottom margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginHeader">
            <summary>
            Gets or sets the header margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.MarginFooter">
            <summary>
            Gets or sets the footer margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.PrintHeaders">
            <summary>
            Gets or sets whether row and column headers (the areas with row numbers and column letters) will be printed.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.PrintGridlines">
            <summary>
            Gets or sets whether the gridlines will be printed.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.PaperKind">
            <summary>
            Gets or sets the paper size to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor">
            <summary>
            Gets or sets the scaling factor (in percent) to use when printing the sheet.
            </summary>
            <remarks>
            Setting the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor"/> property automatically sets the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale"/>
            property to false, causing C1Excel to use the selected scaling factor and to ignore the
            value of the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesAcross"/> and <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesDown"/> properties.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale">
            <summary>
            Gets or sets the scaling mode used for printed output.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale"/> is set to true, then the printed sheet will be 
            automatically scaled to fit the number of pages specified by the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesAcross"/> 
            and <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesDown"/> properties.</para>
            <para>If <see cref="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale"/> is set to false, then the printed sheet will be 
            scaled according to the value of the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.OutlinesBelow">
            <summary>
            Gets or sets the vertical place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.Silverlight.Excel.XLPrintSettings.OutlinesBelow"/> is set to true outline buttons below outline
            group, otherwise outline buttons above outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.OutlinesRight">
            <summary>
            Gets or sets the horizontal place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.Silverlight.Excel.XLPrintSettings.OutlinesRight"/> is set to true outline buttons right of outline
            group, otherwise outline buttons left of outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.StartPage">
            <summary>
            Gets or sets the initial page number to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesAcross">
            <summary>
            Fit the sheet to this number of pages across (0 means use as many as needed).
            </summary>
            <remarks>
            Causes C1Excel to select "fit to page" print mode, ignoring the value of the 
            <see cref="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor"/> property.
            Setting the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesDown">
            <summary>
            Fit the sheet to this number of pages down (0 means use as many as needed).
            </summary>
            <remarks>
            Setting the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.Silverlight.Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.Silverlight.Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.PrintPagesInRows">
            <summary>
            Gets or sets whether to print the pages in rows (across first) or in columns (down first).
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.Landscape">
            <summary>
            Gets or sets whether to print the sheet in landscape mode.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.BlackAndWhite">
            <summary>
            Gets or sets whether to print the sheet in monochrome mode.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLPrintSettings.DraftQuality">
            <summary>
            Gets or sets whether to print the sheet in draft quality mode.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.BiffExtSheet">
            <summary>
            Represents a BIFF external sheet structure.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.BiffExtSheet.SubBookIndex">
            <summary>The sub book index.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.BiffExtSheet.FirstIndex">
            <summary>The first sheet tab index.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.BiffExtSheet.LastIndex">
            <summary>The last sheet tab index.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.BiffExtName">
            <summary>
            Represents a BIFF external name structure.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.BiffExtName.Options">
            <summary>The option flas of this external name.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.BiffExtName.Name">
            <summary>The external name.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.BiffExtName.AddInFunction">
            <summary>The add-in function flag.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.BiffExtName.Book">
            <summary>The main workbook for this external name.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.BiffExtName.Formula">
            <summary>The text formula of this external name.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.CellReference">
            <summary>
            Represents a cell reference of the Excel sheet.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.AreaReference">
            <summary>
            Represents a area reference of the Excel sheet.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLRichText">
            <summary>
            The rich text reader and writer.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Silverlight.Excel.XLRow"/> objects that represent the 
            individual rows in each <see cref="T:C1.Silverlight.Excel.XLSheet"/>.
            </summary>
            <remarks>
            The collection has methods for counting, enumerating, adding, and removing 
            rows from the collection.
            </remarks>
            <example>
            Note that you can create rows automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book = new C1XLBook();
            sheet = book.Sheets[0];
            XLCell cell   = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLRow"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.Silverlight.Excel.XLRow"/> object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Add(C1.Silverlight.Excel.XLRow)">
            <summary>
            Adds an <see cref="T:C1.Silverlight.Excel.XLRow"/> object to the collection.
            </summary>
            <param name="row">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="row"/> parameter).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLRow"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Contains(C1.Silverlight.Excel.XLRow)">
            <summary>
            Determines whether an <see cref="T:C1.Silverlight.Excel.XLRow"/> is a member of the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.IndexOf(C1.Silverlight.Excel.XLRow)">
            <summary>
            Gets the index of a given <see cref="T:C1.Silverlight.Excel.XLRow"/> object in the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Silverlight.Excel.XLRow"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Insert(System.Int32,C1.Silverlight.Excel.XLRow)">
            <summary>
            Inserts an <see cref="T:C1.Silverlight.Excel.XLRow"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="row">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            <para>The maximum number of <see cref="T:C1.Silverlight.Excel.XLRow"/> objects in a <see cref="T:C1.Silverlight.Excel.XLSheet"/> 
            is 65,536. This is a limitation imposed by Excel 2003 and below.</para>
            <para>For Excel 2007 and above, the maximum number of <see cref="T:C1.Silverlight.Excel.XLRow"/> objects
            in an <see cref="T:C1.Silverlight.Excel.XLSheet"/> is 1,048,576.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRowCollection.Remove(C1.Silverlight.Excel.XLRow)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLRow"/> object from the collection.
            </summary>
            <param name="row">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRowCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRowCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRowCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRowCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.Silverlight.Excel.XLRow"/> object at the specified index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.Silverlight.Excel.XLRow"/> object at the
            specified position if necessary. It never returns null.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRowCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows in the collection.
            </summary>
            <remarks>
            Frozen rows are displayed on the top of the sheet and do not scroll vertically.
            They are useful for displaying column headers.
            </remarks>
        </member>
        <member name="T:C1.Silverlight.Excel.XLColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Silverlight.Excel.XLColumn"/> objects that represent the 
            individual columns in each <see cref="T:C1.Silverlight.Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>The collection has methods for counting, enumerating, adding, and removing 
            columns from the collection.</para>
            <para>The <see cref="T:C1.Silverlight.Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.</para>
            </remarks>
            <example>
            Note that you can create columns automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book  = new C1XLBook();
            XLSheet  sheet = book.Sheets[0];
            XLCell   cell  = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Add(C1.Silverlight.Excel.XLColumn)">
            <summary>
            Adds an <see cref="T:C1.Silverlight.Excel.XLColumn"/> object to the collection.
            </summary>
            <param name="col">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="col"/> parameter).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Contains(C1.Silverlight.Excel.XLColumn)">
            <summary>
            Determines whether an <see cref="T:C1.Silverlight.Excel.XLColumn"/> is a member of the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.IndexOf(C1.Silverlight.Excel.XLColumn)">
            <summary>
            Gets the index of a given <see cref="T:C1.Silverlight.Excel.XLRow"/> object in the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Silverlight.Excel.XLColumn"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Insert(System.Int32,C1.Silverlight.Excel.XLColumn)">
            <summary>
            Inserts an <see cref="T:C1.Silverlight.Excel.XLColumn"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="col">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            <para>The maximum number of <see cref="T:C1.Silverlight.Excel.XLColumn"/> objects in an <see cref="T:C1.Silverlight.Excel.XLSheet"/> 
            is 256. This is a limitation imposed by Excel 2003 and below.</para>
            <para>For Excel 2007 and above, the maximum number of <see cref="T:C1.Silverlight.Excel.XLColumn"/> objects
            in an <see cref="T:C1.Silverlight.Excel.XLSheet"/> is 18,278.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumnCollection.Remove(C1.Silverlight.Excel.XLColumn)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLColumn"/> object from the collection.
            </summary>
            <param name="col">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumnCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumnCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumnCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumnCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.Silverlight.Excel.XLColumn"/> object at the specified
            index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object at the
            specified position if necessary. It never returns null.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumnCollection.Frozen">
            <summary>
            Gets or sets the number of frozen columns in the collection.
            </summary>
            <remarks>
            Frozen columns are displayed on the right side of the sheet and do not scroll horizontally. 
            They are useful for displaying row headers.
            </remarks>
        </member>
        <member name="T:C1.Silverlight.Excel.XLRow">
            <summary>
            Represents a row in a worksheet, provides properties for setting 
            the row's height, style, and visibility.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRow.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Silverlight.Excel.XLRow"/> class.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLRow.Clone">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLRow"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLRow"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Visible">
            <summary>
            Gets or sets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this row.
            </summary>
            <example>
            The code below inserts forced page breaks at every 10th row on a sheet, and
            clears the breaks at all other rows.
            <code>
            C1.C1Excel.XLSheet sheet = c1XLBook1.Sheets[0];
            for (int r = 0; r &lt; sheet.Rows.Count; r++)
            {
                sheet.Rows[r].PageBreak = (r &gt; 0 &amp;&amp; r % 10 == 0);
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Height">
            <summary>
            Gets or sets the height of the row, in twips.
            </summary>
            <remarks>
            <para>A value of -1 causes the row to be displayed using the sheet's 
            <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Style">
            <summary>
            Gets or sets the <see cref="T:C1.Silverlight.Excel.XLStyle"/> object that determines the appearance
            of the row.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.IsSubtotal">
            <summary>
            Gets whether the row is subtotal.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.OutlineLevel">
            <summary>
            Gets or sets subtotal outline level for the row.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLRow.Collapsed">
            <summary>
            Gets or sets collapsed flag for the row.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLColumn">
            <summary>
            Represents a column in a worksheet. This class provides properties for setting 
            the column's width, style, and visibility.
            </summary>
            <remarks>The <see cref="T:C1.Silverlight.Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumn.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Silverlight.Excel.XLColumn"/> class.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLColumn.Clone">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLColumn"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Visible">
            <summary>
            Gets or sets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this column.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Width">
            <summary>
            Gets or sets the width of the column, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the column should be displayed using
            the sheet's <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Style">
            <summary>
            Gets or sets the <see cref="T:C1.Silverlight.Excel.XLStyle"/> object that determines the appearance
            of the column.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.IsSubtotal">
            <summary>
            Gets whether the column is subtotal.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.OutlineLevel">
            <summary>
            Gets or sets subtotal outline level for the column.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLColumn.Collapsed">
            <summary>
            Gets or sets collapsed flag for the column.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.ConsolidationFunction">
            <summary>
            Specifies consolidation function for sheet subtotals.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Sum">
            <summary>Represents Sum function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Count">
            <summary>Represents Count function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Average">
            <summary>Represents Average function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Max">
            <summary>Represents Max function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Min">
            <summary>Represents Min function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Product">
            <summary>Represents Product function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.CountNums">
            <summary>Represents Count Numbers function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.StdDev">
            <summary>Represents StdDev function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.StdDevp">
            <summary>Represents StdDevp function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Var">
            <summary>Represents Var function.</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.ConsolidationFunction.Varp">
            <summary>Represents Varp function.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLSheetCollection">
            <summary>
            Collection of <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects that represent the individual 
            worksheets in a <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </summary>
            <remarks>
            Provides methods and properties for counting, enumerating, adding, and removing sheets from 
            the workbook.
            </remarks>
            <example>
            Use the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> <see cref="P:C1.Silverlight.Excel.C1XLBook.Sheets"/> property to get the 
            book's sheet collection. For example, the code below gets a reference 
            to the first sheet on the book and then prints the sheet's name:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine(sheet.Name);
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLSheet"/> and appends it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Add(C1.Silverlight.Excel.XLSheet)">
            <summary>
            Appends an existing <see cref="T:C1.Silverlight.Excel.XLSheet"/> to the collection.
            </summary>
            <param name="sheet">The object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLSheet"/> and inserts it at a specific 
            position in the collection.
            </summary>
            <param name="index">Index where the new <see cref="T:C1.Silverlight.Excel.XLSheet"/> will be added.</param>
            <returns>A reference to the new <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Contains(C1.Silverlight.Excel.XLSheet)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.
            </summary>
            <param name="sheet">The object to look for in the collection.</param>
            <returns>True if the collection contains the object; False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an <see cref="T:C1.Silverlight.Excel.XLSheet"/> object
            with a given name.
            </summary>
            <param name="sheetName">The name of the sheet to look for (case-insensitive).</param>
            <returns>True if the collection contains an <see cref="T:C1.Silverlight.Excel.XLSheet"/> with the
            given <paramref name="sheetName"/>; False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.IndexOf(C1.Silverlight.Excel.XLSheet)">
            <summary>
            Gets the index of a given <see cref="T:C1.Silverlight.Excel.XLSheet"/> in the collection.
            </summary>
            <param name="sheet">The object to look for.</param>
            <returns>The index of the object in the collection, or -1 if the object is not
            a member of the collection.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Remove(C1.Silverlight.Excel.XLSheet)">
            <summary>
            Removes an <see cref="T:C1.Silverlight.Excel.XLSheet"/> from the collection.
            </summary>
            <param name="sheet">The <see cref="T:C1.Silverlight.Excel.XLSheet"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Silverlight.Excel.XLSheet"/> at a specific index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLSheet"/> with a given name and appends it to the collection.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.Silverlight.Excel.XLSheet"/>.</param>
            <returns>A reference to the new <see cref="T:C1.Silverlight.Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:C1.Silverlight.Excel.XLSheet"/> with the specified name from the collection.
            </summary>
            <param name="name">Name of the sheet to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.Insert(System.Int32,C1.Silverlight.Excel.XLSheet)">
            <summary>
            Inserts an <see cref="T:C1.Silverlight.Excel.XLSheet"/> object into the collection at the specified position.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="sheet"><see cref="T:C1.Silverlight.Excel.XLSheet"/> object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheetCollection.IndexOf(System.String)">
            <summary>
            Gets the position of the sheet with the specified name in the collection.
            </summary>
            <param name="name">Name of the object to look for (case-insensitive).</param>
            <returns>The index of the sheet in the collection, or -1 if the sheet can't be 
            found in the collection.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> that owns the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.Silverlight.Excel.XLSheet"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.FirstIndex">
            <summary>
            Gets or sets the index of the sheet that is first viewed in the sheet panel when
            the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the sheet that is selected when the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> 
            file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLSheet"/> at a given position in the collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.Silverlight.Excel.XLSheet"/> with the given name (case-insensitive).
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLSheet">
            <summary>
            Represents individual worksheets in an Excel workbook (<see cref="T:C1.Silverlight.Excel.C1XLBook"/>).
            </summary>
            <remarks>
            Provides indexers to get or set the value of individual cells (<see cref="T:C1.Silverlight.Excel.XLCell"/>) 
            and to access the <see cref="P:C1.Silverlight.Excel.XLSheet.Rows"/> and <see cref="P:C1.Silverlight.Excel.XLSheet.Columns"/> on the sheet.
            </remarks>
            <example>
            Use the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> <see cref="P:C1.Silverlight.Excel.C1XLBook.Sheets"/> indexer to get an individual 
            sheet. For example, the code below gets a reference to the first sheet on the book, then 
            prints the number of rows and columns on the sheet:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine("Sheet has {0} rows and {1} columns",
              sheet.Rows.Count, sheet.Columns.Count);
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheet.Clone">
            <summary>
            Creates a copy of this sheet.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLSheet"/> object with the same contents and formatting as this sheet.</returns>
            <remarks>
            <para>After cloning a sheet, you must rename it and then add it to the book (duplicate names are not
            allowed).</para>
            <para>This method is useful for applications that generate books with a large number of similar sheets.</para>
            </remarks>
            <example>
            The code below loads a book that contains a template sheet, creates 12 copies of that sheet, removes the
            template sheet, then saves the file with a new name.
            <code>
            // load book with template sheet
            _c1xl.Load(@"c:\temp\template.xls");
            
            // create 12 copies of the template sheet
            XLSheet templateSheet = _c1xl.Sheets["Template"];
            for (int month = 1; month &lt;= 12; month++)
            {
              XLSheet newSheet = templateSheet.Clone();
              newSheet.Name = month.ToString(); // rename clone
              newSheet[0,0].Value = month;      // make changes
              _c1xl.Sheets.Add(newSheet);       // add clone to book
            }
            
            // remove the template sheet and save with new name
            _c1xl.Sheets.Remove("Template");
            _c1xl.Save(@"C:\temp\expense_report.xls");
            </code>
            </example>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a reference to a cell at the specified coordinates or null if the cell doesn't exist.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>A reference to the <see cref="T:C1.Silverlight.Excel.XLCell"/> object at the specified coordinates, or null if there
            is no cell at the specified position.</returns>
            <remarks>
            <para>To populate new sheets, use the <see cref="P:C1.Silverlight.Excel.C1XLBook.Sheets"/> indexer instead.</para>
            <para>The indexer will automatically create new rows, columns, and cells as needed, and will never return null.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheet.Load(System.String,System.Boolean)">
            <summary>
            Loads the Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="last"><b>True</b> to finish loading from the workbook; <b>False</b> to load data into the other worksheets.</param>
            <remarks>It was previously necessary to load the workbook from the stream without filling the worksheets.</remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLSheet.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the Excel worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="last"><b>True</b> to finish loading from the workbook; <b>False</b> to load data into the other worksheets.</param>
            <remarks>It was previously necessary to load the workbook from the stream without filling the worksheets.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> that owns the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:C1.Silverlight.Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>When you open a workbook in Excel, the sheet names appear in the tabs 
            below the work area.</para>
            <para>Sheet names can be used as indexers, so they should be unique.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Rows">
            <summary>
            Gets a reference to the sheet's row collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Columns">
            <summary>
            Gets a reference to sheet's column collection.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.MergedCells">
            <summary>
            Gets an <see cref="T:C1.Silverlight.Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are merged on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each merged range is represented by an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.SelectedCells">
            <summary>
            Gets an <see cref="T:C1.Silverlight.Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are selected on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each selected range is represented by an <see cref="T:C1.Silverlight.Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the height of individual rows using the <see cref="T:C1.Silverlight.Excel.XLRow"/> class. 
            Any rows that do not have a custom height assigned to them will be displayed using 
            the sheet's <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>The <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultRowHeight"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)"/> method 
            in <see cref="T:C1.Silverlight.Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)"/> 
            method.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the width of individual rows using the <see cref="T:C1.Silverlight.Excel.XLColumn"/> class. Any columns that 
            do not have a custom width assigned to them will be displayed using the sheet's <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>The <see cref="P:C1.Silverlight.Excel.XLSheet.DefaultColumnWidth"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.TwipsToPixels(System.Double)"/> method in 
            <see cref="T:C1.Silverlight.Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.Silverlight.Excel.C1XLBook.PixelsToTwips(System.Double)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at a specified position on the sheet, creating a new cell if necessary.
            </summary>
            <remarks>
            <para>If the specified cell doesn't exist when the indexer is invoked, the sheet will be expanded and 
            a new cell will be created, then returned. This makes it easy to create and populate sheets.</para>
            <para>If you want to determine whether a specific cell has been defined, use the <see cref="M:C1.Silverlight.Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method instead.</para>
            <para>The indexer is generally more useful when creating and populating sheets. The <see cref="M:C1.Silverlight.Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method is more useful when loading existing sheets.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Locked">
            <summary>
            Gets or sets a value that determines if the sheet is locked for editing.
            </summary>
            <remarks>
            <para>Sheets and styles can be locked. By default, sheets are unlocked and styles are locked. 
            This combination allows users to edit the cells in Excel.</para>
            <para>To protect a cell against editing in Excel, both the sheet and the cell style must have the 
            <see cref="P:C1.Silverlight.Excel.XLSheet.Locked"/> property set to true.</para>
            <para>To lock most cells on a sheet and allow editing of only a few cells, lock the sheet, then 
            create an unlocked style and assign it to the cells that should be editable.</para>
            </remarks>
            <example>
            The code below creates a data entry sheet. Most cells are locked, except for the ones where the user 
            is supposed to enter data.
            <code>
            // start with a single locked sheet
            _c1xl.Clear();
            XLSheet sheet = _c1xl.Sheets[0];
            sheet.Locked = true;
            
            // create an unlocked style
            XLStyle dataEntry = new XLStyle(_c1xl);
            dataEntry.Locked = false;
            dataEntry.BackColor = Color.Beige;
            
            // create data entry titles
            sheet[0,0].Value = "Name:";
            sheet[1,0].Value = "Address:";
            sheet[2,0].Value = "Phone #:";
            
            create data entry cells (unlocked)
            sheet[0,1].Style = dataEntry;
            sheet[1,1].Style = dataEntry;
            sheet[2,1].Style = dataEntry;
            
            // save the book
            _c1xl.Save(@"c:\temp\Protected.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Visible">
            <summary>
            Gets or sets the sheet's visibility.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.ShowGridLines">
            <summary>
            Gets or sets whether Excel should show the grid lines when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.ShowHeaders">
            <summary>
            Gets or sets whether Excel should show the row and column headers when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.Scale">
            <summary>
            Gets or sets the view scale of this worksheet using percentages.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.GridColor">
            <summary>
            Gets or sets the color used to display gridlines.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the grid lines using the default color.</para>
            <para>To hide the grid lines, set the <see cref="P:C1.Silverlight.Excel.XLSheet.ShowGridLines"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.TabColor">
            <summary>
            Gets or sets the color used to display the tab of this sheet.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the sheet tab using the default color.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.PrintSettings">
            <summary>
            Gets or sets an <see cref="T:C1.Silverlight.Excel.XLPrintSettings"/> object that controls how the
            sheet is printed.
            </summary>
            <example>
            The code below creates a header for the sheet and sets the orientation to landscape:
            <code>
            XLPrintSettings pp = sheet.PrintSettings();
            pp.Landscape = true;
            pp.Header = "&amp;LLeft Header&amp;CCenter Header&amp;RRight Header";
            </code>
            </example>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.TotalsBelowData">
            <summary>
            Gets whether Excel should show the subtotals data when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.OutlinesBelow">
            <summary>
            Gets or sets the vertical place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.Silverlight.Excel.XLSheet.OutlinesBelow"/> is set to true outline buttons below outline
            group, otherwise outline buttons above outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.OutlinesRight">
            <summary>
            Gets or sets the horizontal place of outline buttons.
            </summary>
            <remarks>
            If <see cref="P:C1.Silverlight.Excel.XLSheet.OutlinesRight"/> is set to true outline buttons right of outline
            group, otherwise outline buttons left of outline group. Default value is <b>true</b>.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.MaxOutlineLevel">
            <summary>
            Gets maximum subtotals outline level for rows or columns. Use for indicate subtotals outlines.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.RowMaxLevel">
            <summary>
            Gets maximum outline level for rows.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLSheet.ColumnMaxLevel">
            <summary>
            Gets maximum outline level for columns.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.SharedStringTable">
            <summary>
            SharedStringTable is an list that contains a dictionary helper.
            
            The dictionary contains pairs (string, index) and is used for two purposes:
            
            1) To prevent the addition of duplicate values to the list. The Add method
               looks up values in the HashTable and only adds new values.
            
            2) To provide a quick IndexOf override. The index is retrieved from the
               dictionary instead of using the slow default linear search.
               
            This new implementation reduces the time needed to save a 10,000 x 20 sheet
            from 650 seconds down to 16, essentially the same amount of time needed
            to save numbers.
            
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLAlignHorzEnum">
            <summary>
            Specifies how to align cell content horizontally within a cell.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.General">
            <summary>
            Align strings to the left, numbers to the right.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Left">
            <summary>
            Align to cell left.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Right">
            <summary>
            Align to cell right.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Fill">
            <summary>
            Fill cell, repeating content as necessary.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Justify">
            <summary>
            Justify content horizontally to span the whole cell width.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignHorzEnum.Selection">
            <summary>
            Align to selection center (may span multiple cells).
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLAlignVertEnum">
            <summary>
            Specifies how to align cell content vertically within a cell.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignVertEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignVertEnum.Top">
            <summary>
            Align to cell top.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignVertEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignVertEnum.Bottom">
            <summary>
            Align to cell bottom.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLAlignVertEnum.Justify">
            <summary>
            Justify content vertically to span the whole cell height.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLDiagonalFlags">
            <summary>
            Specifies the type of diagonal line to draw across the cells.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLDiagonalFlags.None">
            <summary>
            No diagonal.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLDiagonalFlags.Forward">
            <summary>
            Forward diagonal (/).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLDiagonalFlags.Backward">
            <summary>
            Backward diagonal (\).
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLLineStyleEnum">
            <summary>
            Specifies the line style used for the cell borders.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Thin">
            <summary>
            Thin.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Thick">
            <summary>
            Thick.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.Hair">
            <summary>
            Hair (one pixel).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.MediumDashed">
            <summary>
            Medium dashed.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.ThinDashDotted">
            <summary>
            Thin dash-dot.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.MediumDashDotted">
            <summary>
            Medium dash-dot.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.ThinDashDotDotted">
            <summary>
            Thin dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.MediumDashDotDotted">
            <summary>
            Medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLLineStyleEnum.SlantedMediumDashDotted">
            <summary>
            Slanted dash-dot.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLPatternEnum">
            <summary>
            Specifies the pattern used to fill the cell background.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.None">
            <summary>
            No pattern (transparent).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Solid">
            <summary>
            Solid background.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Gray50">
            <summary>
            50% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Gray75">
            <summary>
            75% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Gray25">
            <summary>
            25% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.HorizontalStripe">
            <summary>
            Horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.VerticalStripe">
            <summary>
            Vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.DiagonalStripe">
            <summary>
            Diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinVerticalStripe">
            <summary>
            Thin vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Gray12">
            <summary>
            12% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.XLPatternEnum.Gray06">
            <summary>
            6% dotted pattern.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Excel.XLStyle">
            <summary>
            Contains style elements used to define the appearance of the cells.
            </summary>
            <remarks>
            <para>Each <see cref="T:C1.Silverlight.Excel.XLStyle"/> object may define one or more of the following 
            elements: font, format, background color, background pattern, foreground color, 
            alignment, text direction, and word wrapping.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell styles 
            and merges the style elements defined in each one in order to determine how 
            the cell should be displayed. The precedence of the styles is: (1) cell, 
            (2) row, (3) column, (4) default style.</para>
            <para>Every <see cref="T:C1.Silverlight.Excel.XLStyle"/> belongs to a <see cref="T:C1.Silverlight.Excel.C1XLBook"/>, and may 
            be assigned to one or more <see cref="T:C1.Silverlight.Excel.XLRow"/>, <see cref="T:C1.Silverlight.Excel.XLColumn"/>, and 
            <see cref="T:C1.Silverlight.Excel.XLCell"/> objects through their <see cref="P:C1.Silverlight.Excel.XLCell.Style"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.#ctor(C1.Silverlight.Excel.C1XLBook)">
            <summary>
            Creates a new instance of <see cref="T:C1.Silverlight.Excel.XLStyle"/> and adds it to the
            specified <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.
            </summary>
            <param name="book">Parent <see cref="T:C1.Silverlight.Excel.C1XLBook"/>.</param>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.Clone">
            <summary>
            Creates a new <see cref="T:C1.Silverlight.Excel.XLStyle"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.Silverlight.Excel.XLStyle"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.SetBorderStyle(C1.Silverlight.Excel.XLLineStyleEnum)">
            <summary>
            Sets the border style for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <param name="style">Line style used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.SetBorderColor(System.Windows.Media.Color)">
            <summary>
            Sets the border color for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <param name="color">Color used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <param name="dataType">Data type to be formatted.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.FormatDotNetToXL(System.String)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.FormatXLToDotNet(System.String)">
            <summary>
            Converts an Excel-style format string into a .NET-style format string.
            </summary>
            <param name="fmt">Excel-style format to convert.</param>
            <returns>A .NET-style format string.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.Silverlight.Excel.XLStyle"/> objects are equivalent.
            </summary>
            <param name="obj"><see cref="T:C1.Silverlight.Excel.XLStyle"/> object to compare to the current instance.</param>
            <returns>True if the styles are equivalent, False otherwise.</returns>
        </member>
        <member name="M:C1.Silverlight.Excel.XLStyle.GetHashCode">
            <summary>
            Serves as a hash function suitable for use in hashing algorithms and 
            data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.Silverlight.Excel.XLStyle"/>.</returns>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.Font">
            <summary>
            Gets or sets the font for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.Silverlight.Excel.XLStyle.Font"/> property to null in order to suppress 
            this style element and use the default font instead. The default font is 
            determined by the book's <see cref="P:C1.Silverlight.Excel.C1XLBook.DefaultFont"/> property.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.Silverlight.Excel.XLStyle.ForeColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default foreground color instead (black).</para>
            <para>All colors on the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> are mapped to a palette. This 
            means that if you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.Silverlight.Excel.XLStyle.BackColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default background color instead (white).</para>
            <para>All colors on the <see cref="T:C1.Silverlight.Excel.C1XLBook"/> are mapped to a palette. This 
            means that if you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BackPattern">
            <summary>
            Gets or sets the background pattern for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.PatternColor">
            <summary>
            Gets or sets the color of the background pattern for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.Format">
            <summary>
            Gets or sets the format associated with this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Excel uses formats similar, but not identical to .NET. Refer
            to the Excel documentation for details on how to create format strings.</para>
            <para>You can use the <see cref="M:C1.Silverlight.Excel.XLStyle.FormatXLToDotNet(System.String)"/> and <see cref="M:C1.Silverlight.Excel.XLStyle.FormatDotNetToXL(System.String)"/>
            methods to convert common Excel format strings to and from .NET format strings.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.Silverlight.Excel.XLStyle.AlignHorz"/> property to <see cref="F:C1.Silverlight.Excel.XLAlignHorzEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.Silverlight.Excel.XLAlignHorzEnum.General"/>).
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.Silverlight.Excel.XLStyle.AlignVert"/> property to <see cref="F:C1.Silverlight.Excel.XLAlignVertEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.Silverlight.Excel.XLAlignVertEnum.Bottom"/>).
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.WordWrap">
            <summary>
            Gets or sets whether this <see cref="T:C1.Silverlight.Excel.XLStyle"/> causes cell contents to wrap.
            </summary>
            <remarks>
            Cells that do not wrap will spill onto adjacent cells and will be kept on 
            a single line even if they contain line-break characters.
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.Rotation">
            <summary>
            Gets or sets the rotation for this <see cref="T:C1.Silverlight.Excel.XLStyle"/>, in degrees.
            </summary>
            <remarks>
            <para>This property should be set to values between 0 and 180, or 255, 
            as explained below:</para>
            <para>Zero means no rotation.</para>
            <para>1-90 means 1 to 90 degrees counter-clockwise (90 causes text to be 
            displayed in the vertical direction going up the cell).</para>
            <para>91-180 means 1 to 90 degrees clockwise (180 causes text to be 
            displayed in the vertical direction going down the cell).</para>
            <para>255 causes letters to be stacked top to bottom and not rotated.</para>
            </remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.Locked">
            <summary>
            Gets or sets whether the cell should be locked for editing when the <see cref="T:C1.Silverlight.Excel.XLSheet"/>
            is protected.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderLeft">
            <summary>
            Gets or sets the line style used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderStyle(C1.Silverlight.Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderRight">
            <summary>
            Gets or sets the line style used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderStyle(C1.Silverlight.Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderTop">
            <summary>
            Gets or sets the line style used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderStyle(C1.Silverlight.Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderBottom">
            <summary>
            Gets or sets the line style used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderStyle(C1.Silverlight.Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderColorLeft">
            <summary>
            Gets or sets the color used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderColor(System.Windows.Media.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderColorRight">
            <summary>
            Gets or sets the color used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderColor(System.Windows.Media.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderColorTop">
            <summary>
            Gets or sets the color used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderColor(System.Windows.Media.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.BorderColorBottom">
            <summary>
            Gets or sets the color used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.Silverlight.Excel.XLStyle.SetBorderColor(System.Windows.Media.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.Diagonal">
            <summary>
            Gets or sets which diagonal lines to display (none, forward, backward).
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.DiagonalStyle">
            <summary>
            Gets or sets the line style used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.XLStyle.DiagonalColor">
            <summary>
            Gets or sets the color used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.AttributeToken.Spaces">
            <summary>Gets or sets count of spaces.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.AttributeToken.SpacesType">
            <summary>Gets or sets spaces place type.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.ArrayToken.Rows">
            <summary>The number of the rows.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.ArrayToken.Columns">
            <summary>The number of the columns.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.ExternalNameToken.SheetIndex">
            <summary>The index of the external sheet.</summary>
        </member>
        <member name="P:C1.Silverlight.Excel.Tokens.ExternalNameToken.NameIndex">
            <summary>The index of the external name.</summary>
        </member>
        <member name="T:C1.Silverlight.Excel.Tokens.SpacesType">
            <summary>
            The space attribute place type.
            </summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.Before">
            <summary>Spaces before the next token (not allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.CrBefore">
            <summary>Carriage returns before the next token (not allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.BeforeOpenParen">
            <summary>Spaces before opening parenthesis (only allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.CrBeforeOpenParen">
            <summary>Carriage returns before opening parenthesis (only allowed before parenthesis token).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.BeforeCloseParen">
            <summary>Spaces before closing parenthesis (only allowed before parenthesis and functions tokens).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.CrBeforeCloseParen">
            <summary>Carriage returns before closing parenthesis (only allowed before parenthesis and functions tokens).</summary>
        </member>
        <member name="F:C1.Silverlight.Excel.Tokens.SpacesType.AfterEquality">
            <summary>Spaces following the equality sign (only in macro sheets).</summary>
        </member>
    </members>
</doc>
