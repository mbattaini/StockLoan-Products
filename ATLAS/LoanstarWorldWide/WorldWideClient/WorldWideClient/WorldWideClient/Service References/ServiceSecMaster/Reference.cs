//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceSecMaster {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceSecMaster.ISecMasterService")]
    public interface ISecMasterService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/GetSourceIP", ReplyAction="http://tempuri.org/ISecMasterService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/PriceSet", ReplyAction="http://tempuri.org/ISecMasterService/PriceSetResponse")]
        System.IAsyncResult BeginPriceSet(string bizDate, string secId, string countryCode, string currencyIso, string price, string priceDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndPriceSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/PricesGet", ReplyAction="http://tempuri.org/ISecMasterService/PricesGetResponse")]
        System.IAsyncResult BeginPricesGet(string bizDate, string secId, string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndPricesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/SecIdAliasSet", ReplyAction="http://tempuri.org/ISecMasterService/SecIdAliasSetResponse")]
        System.IAsyncResult BeginSecIdAliasSet(string secId, string secIdTypeIndex, string secIdAlias, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndSecIdAliasSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/SecMasterGet", ReplyAction="http://tempuri.org/ISecMasterService/SecMasterGetResponse")]
        System.IAsyncResult BeginSecMasterGet(string secId, string countryCode, string currencyIso, string bookGroup, string lookUpCriteria, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndSecMasterGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecMasterService/SecMasterSet", ReplyAction="http://tempuri.org/ISecMasterService/SecMasterSetResponse")]
        System.IAsyncResult BeginSecMasterSet(
                    string secId, 
                    string description, 
                    string baseType, 
                    string classGroup, 
                    string countryCode, 
                    string currencyIso, 
                    string accruedInterest, 
                    string recordDateCash, 
                    string dividendRate, 
                    string secIdGroup, 
                    string symbol, 
                    string Isin, 
                    string cusip, 
                    string price, 
                    string priceDate, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string bookGroup, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndSecMasterSet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecMasterServiceChannel : WorldWideClient.ServiceSecMaster.ISecMasterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PriceSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PriceSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PricesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PricesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecIdAliasSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SecIdAliasSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecMasterGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SecMasterGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecMasterSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SecMasterSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecMasterServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceSecMaster.ISecMasterService>, WorldWideClient.ServiceSecMaster.ISecMasterService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginPriceSetDelegate;
        
        private EndOperationDelegate onEndPriceSetDelegate;
        
        private System.Threading.SendOrPostCallback onPriceSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPricesGetDelegate;
        
        private EndOperationDelegate onEndPricesGetDelegate;
        
        private System.Threading.SendOrPostCallback onPricesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSecIdAliasSetDelegate;
        
        private EndOperationDelegate onEndSecIdAliasSetDelegate;
        
        private System.Threading.SendOrPostCallback onSecIdAliasSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSecMasterGetDelegate;
        
        private EndOperationDelegate onEndSecMasterGetDelegate;
        
        private System.Threading.SendOrPostCallback onSecMasterGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSecMasterSetDelegate;
        
        private EndOperationDelegate onEndSecMasterSetDelegate;
        
        private System.Threading.SendOrPostCallback onSecMasterSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SecMasterServiceClient() {
        }
        
        public SecMasterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecMasterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecMasterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecMasterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<PriceSetCompletedEventArgs> PriceSetCompleted;
        
        public event System.EventHandler<PricesGetCompletedEventArgs> PricesGetCompleted;
        
        public event System.EventHandler<SecIdAliasSetCompletedEventArgs> SecIdAliasSetCompleted;
        
        public event System.EventHandler<SecMasterGetCompletedEventArgs> SecMasterGetCompleted;
        
        public event System.EventHandler<SecMasterSetCompletedEventArgs> SecMasterSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceSecMaster.ISecMasterService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginPriceSet(string bizDate, string secId, string countryCode, string currencyIso, string price, string priceDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPriceSet(bizDate, secId, countryCode, currencyIso, price, priceDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceSecMaster.ISecMasterService.EndPriceSet(System.IAsyncResult result) {
            return base.Channel.EndPriceSet(result);
        }
        
        private System.IAsyncResult OnBeginPriceSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string secId = ((string)(inValues[1]));
            string countryCode = ((string)(inValues[2]));
            string currencyIso = ((string)(inValues[3]));
            string price = ((string)(inValues[4]));
            string priceDate = ((string)(inValues[5]));
            string userId = ((string)(inValues[6]));
            string userPassword = ((string)(inValues[7]));
            string bookGroup = ((string)(inValues[8]));
            string functionPath = ((string)(inValues[9]));
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginPriceSet(bizDate, secId, countryCode, currencyIso, price, priceDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndPriceSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndPriceSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPriceSetCompleted(object state) {
            if ((this.PriceSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PriceSetCompleted(this, new PriceSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PriceSetAsync(string bizDate, string secId, string countryCode, string currencyIso, string price, string priceDate, string userId, string userPassword, string bookGroup, string functionPath) {
            this.PriceSetAsync(bizDate, secId, countryCode, currencyIso, price, priceDate, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void PriceSetAsync(string bizDate, string secId, string countryCode, string currencyIso, string price, string priceDate, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginPriceSetDelegate == null)) {
                this.onBeginPriceSetDelegate = new BeginOperationDelegate(this.OnBeginPriceSet);
            }
            if ((this.onEndPriceSetDelegate == null)) {
                this.onEndPriceSetDelegate = new EndOperationDelegate(this.OnEndPriceSet);
            }
            if ((this.onPriceSetCompletedDelegate == null)) {
                this.onPriceSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPriceSetCompleted);
            }
            base.InvokeAsync(this.onBeginPriceSetDelegate, new object[] {
                        bizDate,
                        secId,
                        countryCode,
                        currencyIso,
                        price,
                        priceDate,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndPriceSetDelegate, this.onPriceSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginPricesGet(string bizDate, string secId, string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPricesGet(bizDate, secId, currencyIso, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceSecMaster.ISecMasterService.EndPricesGet(System.IAsyncResult result) {
            return base.Channel.EndPricesGet(result);
        }
        
        private System.IAsyncResult OnBeginPricesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string secId = ((string)(inValues[1]));
            string currencyIso = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginPricesGet(bizDate, secId, currencyIso, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndPricesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndPricesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPricesGetCompleted(object state) {
            if ((this.PricesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PricesGetCompleted(this, new PricesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PricesGetAsync(string bizDate, string secId, string currencyIso, string userId, string userPassword, string bookGroup, string functionPath) {
            this.PricesGetAsync(bizDate, secId, currencyIso, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void PricesGetAsync(string bizDate, string secId, string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginPricesGetDelegate == null)) {
                this.onBeginPricesGetDelegate = new BeginOperationDelegate(this.OnBeginPricesGet);
            }
            if ((this.onEndPricesGetDelegate == null)) {
                this.onEndPricesGetDelegate = new EndOperationDelegate(this.OnEndPricesGet);
            }
            if ((this.onPricesGetCompletedDelegate == null)) {
                this.onPricesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPricesGetCompleted);
            }
            base.InvokeAsync(this.onBeginPricesGetDelegate, new object[] {
                        bizDate,
                        secId,
                        currencyIso,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndPricesGetDelegate, this.onPricesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginSecIdAliasSet(string secId, string secIdTypeIndex, string secIdAlias, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSecIdAliasSet(secId, secIdTypeIndex, secIdAlias, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceSecMaster.ISecMasterService.EndSecIdAliasSet(System.IAsyncResult result) {
            return base.Channel.EndSecIdAliasSet(result);
        }
        
        private System.IAsyncResult OnBeginSecIdAliasSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string secId = ((string)(inValues[0]));
            string secIdTypeIndex = ((string)(inValues[1]));
            string secIdAlias = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginSecIdAliasSet(secId, secIdTypeIndex, secIdAlias, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndSecIdAliasSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndSecIdAliasSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSecIdAliasSetCompleted(object state) {
            if ((this.SecIdAliasSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SecIdAliasSetCompleted(this, new SecIdAliasSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SecIdAliasSetAsync(string secId, string secIdTypeIndex, string secIdAlias, string userId, string userPassword, string bookGroup, string functionPath) {
            this.SecIdAliasSetAsync(secId, secIdTypeIndex, secIdAlias, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void SecIdAliasSetAsync(string secId, string secIdTypeIndex, string secIdAlias, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginSecIdAliasSetDelegate == null)) {
                this.onBeginSecIdAliasSetDelegate = new BeginOperationDelegate(this.OnBeginSecIdAliasSet);
            }
            if ((this.onEndSecIdAliasSetDelegate == null)) {
                this.onEndSecIdAliasSetDelegate = new EndOperationDelegate(this.OnEndSecIdAliasSet);
            }
            if ((this.onSecIdAliasSetCompletedDelegate == null)) {
                this.onSecIdAliasSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSecIdAliasSetCompleted);
            }
            base.InvokeAsync(this.onBeginSecIdAliasSetDelegate, new object[] {
                        secId,
                        secIdTypeIndex,
                        secIdAlias,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndSecIdAliasSetDelegate, this.onSecIdAliasSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginSecMasterGet(string secId, string countryCode, string currencyIso, string bookGroup, string lookUpCriteria, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSecMasterGet(secId, countryCode, currencyIso, bookGroup, lookUpCriteria, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceSecMaster.ISecMasterService.EndSecMasterGet(System.IAsyncResult result) {
            return base.Channel.EndSecMasterGet(result);
        }
        
        private System.IAsyncResult OnBeginSecMasterGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string secId = ((string)(inValues[0]));
            string countryCode = ((string)(inValues[1]));
            string currencyIso = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string lookUpCriteria = ((string)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginSecMasterGet(secId, countryCode, currencyIso, bookGroup, lookUpCriteria, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndSecMasterGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndSecMasterGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSecMasterGetCompleted(object state) {
            if ((this.SecMasterGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SecMasterGetCompleted(this, new SecMasterGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SecMasterGetAsync(string secId, string countryCode, string currencyIso, string bookGroup, string lookUpCriteria, string userId, string userPassword, string functionPath) {
            this.SecMasterGetAsync(secId, countryCode, currencyIso, bookGroup, lookUpCriteria, userId, userPassword, functionPath, null);
        }
        
        public void SecMasterGetAsync(string secId, string countryCode, string currencyIso, string bookGroup, string lookUpCriteria, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginSecMasterGetDelegate == null)) {
                this.onBeginSecMasterGetDelegate = new BeginOperationDelegate(this.OnBeginSecMasterGet);
            }
            if ((this.onEndSecMasterGetDelegate == null)) {
                this.onEndSecMasterGetDelegate = new EndOperationDelegate(this.OnEndSecMasterGet);
            }
            if ((this.onSecMasterGetCompletedDelegate == null)) {
                this.onSecMasterGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSecMasterGetCompleted);
            }
            base.InvokeAsync(this.onBeginSecMasterGetDelegate, new object[] {
                        secId,
                        countryCode,
                        currencyIso,
                        bookGroup,
                        lookUpCriteria,
                        userId,
                        userPassword,
                        functionPath}, this.onEndSecMasterGetDelegate, this.onSecMasterGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceSecMaster.ISecMasterService.BeginSecMasterSet(
                    string secId, 
                    string description, 
                    string baseType, 
                    string classGroup, 
                    string countryCode, 
                    string currencyIso, 
                    string accruedInterest, 
                    string recordDateCash, 
                    string dividendRate, 
                    string secIdGroup, 
                    string symbol, 
                    string Isin, 
                    string cusip, 
                    string price, 
                    string priceDate, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string bookGroup, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginSecMasterSet(secId, description, baseType, classGroup, countryCode, currencyIso, accruedInterest, recordDateCash, dividendRate, secIdGroup, symbol, Isin, cusip, price, priceDate, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceSecMaster.ISecMasterService.EndSecMasterSet(System.IAsyncResult result) {
            return base.Channel.EndSecMasterSet(result);
        }
        
        private System.IAsyncResult OnBeginSecMasterSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string secId = ((string)(inValues[0]));
            string description = ((string)(inValues[1]));
            string baseType = ((string)(inValues[2]));
            string classGroup = ((string)(inValues[3]));
            string countryCode = ((string)(inValues[4]));
            string currencyIso = ((string)(inValues[5]));
            string accruedInterest = ((string)(inValues[6]));
            string recordDateCash = ((string)(inValues[7]));
            string dividendRate = ((string)(inValues[8]));
            string secIdGroup = ((string)(inValues[9]));
            string symbol = ((string)(inValues[10]));
            string Isin = ((string)(inValues[11]));
            string cusip = ((string)(inValues[12]));
            string price = ((string)(inValues[13]));
            string priceDate = ((string)(inValues[14]));
            bool isActive = ((bool)(inValues[15]));
            string userId = ((string)(inValues[16]));
            string userPassword = ((string)(inValues[17]));
            string bookGroup = ((string)(inValues[18]));
            string functionPath = ((string)(inValues[19]));
            return ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).BeginSecMasterSet(secId, description, baseType, classGroup, countryCode, currencyIso, accruedInterest, recordDateCash, dividendRate, secIdGroup, symbol, Isin, cusip, price, priceDate, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndSecMasterSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceSecMaster.ISecMasterService)(this)).EndSecMasterSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSecMasterSetCompleted(object state) {
            if ((this.SecMasterSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SecMasterSetCompleted(this, new SecMasterSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SecMasterSetAsync(
                    string secId, 
                    string description, 
                    string baseType, 
                    string classGroup, 
                    string countryCode, 
                    string currencyIso, 
                    string accruedInterest, 
                    string recordDateCash, 
                    string dividendRate, 
                    string secIdGroup, 
                    string symbol, 
                    string Isin, 
                    string cusip, 
                    string price, 
                    string priceDate, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string bookGroup, 
                    string functionPath) {
            this.SecMasterSetAsync(secId, description, baseType, classGroup, countryCode, currencyIso, accruedInterest, recordDateCash, dividendRate, secIdGroup, symbol, Isin, cusip, price, priceDate, isActive, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void SecMasterSetAsync(
                    string secId, 
                    string description, 
                    string baseType, 
                    string classGroup, 
                    string countryCode, 
                    string currencyIso, 
                    string accruedInterest, 
                    string recordDateCash, 
                    string dividendRate, 
                    string secIdGroup, 
                    string symbol, 
                    string Isin, 
                    string cusip, 
                    string price, 
                    string priceDate, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string bookGroup, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginSecMasterSetDelegate == null)) {
                this.onBeginSecMasterSetDelegate = new BeginOperationDelegate(this.OnBeginSecMasterSet);
            }
            if ((this.onEndSecMasterSetDelegate == null)) {
                this.onEndSecMasterSetDelegate = new EndOperationDelegate(this.OnEndSecMasterSet);
            }
            if ((this.onSecMasterSetCompletedDelegate == null)) {
                this.onSecMasterSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSecMasterSetCompleted);
            }
            base.InvokeAsync(this.onBeginSecMasterSetDelegate, new object[] {
                        secId,
                        description,
                        baseType,
                        classGroup,
                        countryCode,
                        currencyIso,
                        accruedInterest,
                        recordDateCash,
                        dividendRate,
                        secIdGroup,
                        symbol,
                        Isin,
                        cusip,
                        price,
                        priceDate,
                        isActive,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndSecMasterSetDelegate, this.onSecMasterSetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceSecMaster.ISecMasterService CreateChannel() {
            return new SecMasterServiceClientChannel(this);
        }
        
        private class SecMasterServiceClientChannel : ChannelBase<WorldWideClient.ServiceSecMaster.ISecMasterService>, WorldWideClient.ServiceSecMaster.ISecMasterService {
            
            public SecMasterServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceSecMaster.ISecMasterService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPriceSet(string bizDate, string secId, string countryCode, string currencyIso, string price, string priceDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = bizDate;
                _args[1] = secId;
                _args[2] = countryCode;
                _args[3] = currencyIso;
                _args[4] = price;
                _args[5] = priceDate;
                _args[6] = userId;
                _args[7] = userPassword;
                _args[8] = bookGroup;
                _args[9] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("PriceSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPriceSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PriceSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPricesGet(string bizDate, string secId, string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = bizDate;
                _args[1] = secId;
                _args[2] = currencyIso;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("PricesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndPricesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("PricesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSecIdAliasSet(string secId, string secIdTypeIndex, string secIdAlias, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = secId;
                _args[1] = secIdTypeIndex;
                _args[2] = secIdAlias;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("SecIdAliasSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSecIdAliasSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SecIdAliasSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSecMasterGet(string secId, string countryCode, string currencyIso, string bookGroup, string lookUpCriteria, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = secId;
                _args[1] = countryCode;
                _args[2] = currencyIso;
                _args[3] = bookGroup;
                _args[4] = lookUpCriteria;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("SecMasterGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndSecMasterGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("SecMasterGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSecMasterSet(
                        string secId, 
                        string description, 
                        string baseType, 
                        string classGroup, 
                        string countryCode, 
                        string currencyIso, 
                        string accruedInterest, 
                        string recordDateCash, 
                        string dividendRate, 
                        string secIdGroup, 
                        string symbol, 
                        string Isin, 
                        string cusip, 
                        string price, 
                        string priceDate, 
                        bool isActive, 
                        string userId, 
                        string userPassword, 
                        string bookGroup, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[20];
                _args[0] = secId;
                _args[1] = description;
                _args[2] = baseType;
                _args[3] = classGroup;
                _args[4] = countryCode;
                _args[5] = currencyIso;
                _args[6] = accruedInterest;
                _args[7] = recordDateCash;
                _args[8] = dividendRate;
                _args[9] = secIdGroup;
                _args[10] = symbol;
                _args[11] = Isin;
                _args[12] = cusip;
                _args[13] = price;
                _args[14] = priceDate;
                _args[15] = isActive;
                _args[16] = userId;
                _args[17] = userPassword;
                _args[18] = bookGroup;
                _args[19] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("SecMasterSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSecMasterSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SecMasterSet", _args, result)));
                return _result;
            }
        }
    }
}
