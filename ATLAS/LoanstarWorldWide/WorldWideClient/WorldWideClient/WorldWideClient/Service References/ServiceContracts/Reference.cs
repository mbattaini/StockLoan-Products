//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceContracts {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceContracts.IContractsService")]
    public interface IContractsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/GetSourceIP", ReplyAction="http://tempuri.org/IContractsService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractBillingsGet", ReplyAction="http://tempuri.org/IContractsService/ContractBillingsGetResponse")]
        System.IAsyncResult BeginContractBillingsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractBillingsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractDetailsGet", ReplyAction="http://tempuri.org/IContractsService/ContractDetailsGetResponse")]
        System.IAsyncResult BeginContractDetailsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractDetailsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractRateChangeAsOfSet", ReplyAction="http://tempuri.org/IContractsService/ContractRateChangeAsOfSetResponse")]
        System.IAsyncResult BeginContractRateChangeAsOfSet(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndContractRateChangeAsOfSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSet", ReplyAction="http://tempuri.org/IContractsService/ContractSetResponse")]
        System.IAsyncResult BeginContractSet(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndContractSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractsGet", ReplyAction="http://tempuri.org/IContractsService/ContractsGetResponse")]
        System.IAsyncResult BeginContractsGet(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractsResearchGet", ReplyAction="http://tempuri.org/IContractsService/ContractsResearchGetResponse")]
        System.IAsyncResult BeginContractsResearchGet(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractsResearchGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractsSummaryByBillings", ReplyAction="http://tempuri.org/IContractsService/ContractsSummaryByBillingsResponse")]
        System.IAsyncResult BeginContractsSummaryByBillings(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractsSummaryByBillings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryGetResponse")]
        System.IAsyncResult BeginContractSummaryGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryByBookCash", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByBookCashResponse")]
        System.IAsyncResult BeginContractSummaryByBookCash(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryByBookCash(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryByBookProfitLossGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByBookProfitLossGetResponse")]
        System.IAsyncResult BeginContractSummaryByBookProfitLossGet(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryByBookProfitLossGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummarybyCashGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummarybyCashGetResponse")]
        System.IAsyncResult BeginContractSummarybyCashGet(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummarybyCashGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryByCreditsDebits", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByCreditsDebitsResponse")]
        System.IAsyncResult BeginContractSummaryByCreditsDebits(string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryByCreditsDebits(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryByHypothicationGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByHypothicationGetResponse")]
        System.IAsyncResult BeginContractSummaryByHypothicationGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryByHypothicationGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryByMarketValueGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryByMarketValueGetResponse")]
        System.IAsyncResult BeginContractSummaryByMarketValueGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryByMarketValueGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IContractsService/ContractSummaryBySecurityGet", ReplyAction="http://tempuri.org/IContractsService/ContractSummaryBySecurityGetResponse")]
        System.IAsyncResult BeginContractSummaryBySecurityGet(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndContractSummaryBySecurityGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractsServiceChannel : WorldWideClient.ServiceContracts.IContractsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractBillingsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractBillingsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractDetailsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractDetailsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractRateChangeAsOfSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractRateChangeAsOfSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsResearchGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractsResearchGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsSummaryByBillingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractsSummaryByBillingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryByBookCashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryByBookCashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryByBookProfitLossGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryByBookProfitLossGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummarybyCashGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummarybyCashGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryByCreditsDebitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryByCreditsDebitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryByHypothicationGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryByHypothicationGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryByMarketValueGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryByMarketValueGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractSummaryBySecurityGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContractSummaryBySecurityGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceContracts.IContractsService>, WorldWideClient.ServiceContracts.IContractsService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractBillingsGetDelegate;
        
        private EndOperationDelegate onEndContractBillingsGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractBillingsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractDetailsGetDelegate;
        
        private EndOperationDelegate onEndContractDetailsGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractDetailsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractRateChangeAsOfSetDelegate;
        
        private EndOperationDelegate onEndContractRateChangeAsOfSetDelegate;
        
        private System.Threading.SendOrPostCallback onContractRateChangeAsOfSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSetDelegate;
        
        private EndOperationDelegate onEndContractSetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractsGetDelegate;
        
        private EndOperationDelegate onEndContractsGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractsResearchGetDelegate;
        
        private EndOperationDelegate onEndContractsResearchGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractsResearchGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractsSummaryByBillingsDelegate;
        
        private EndOperationDelegate onEndContractsSummaryByBillingsDelegate;
        
        private System.Threading.SendOrPostCallback onContractsSummaryByBillingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryGetDelegate;
        
        private EndOperationDelegate onEndContractSummaryGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryByBookCashDelegate;
        
        private EndOperationDelegate onEndContractSummaryByBookCashDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryByBookCashCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryByBookProfitLossGetDelegate;
        
        private EndOperationDelegate onEndContractSummaryByBookProfitLossGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryByBookProfitLossGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummarybyCashGetDelegate;
        
        private EndOperationDelegate onEndContractSummarybyCashGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummarybyCashGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryByCreditsDebitsDelegate;
        
        private EndOperationDelegate onEndContractSummaryByCreditsDebitsDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryByCreditsDebitsCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryByHypothicationGetDelegate;
        
        private EndOperationDelegate onEndContractSummaryByHypothicationGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryByHypothicationGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryByMarketValueGetDelegate;
        
        private EndOperationDelegate onEndContractSummaryByMarketValueGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryByMarketValueGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginContractSummaryBySecurityGetDelegate;
        
        private EndOperationDelegate onEndContractSummaryBySecurityGetDelegate;
        
        private System.Threading.SendOrPostCallback onContractSummaryBySecurityGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ContractsServiceClient() {
        }
        
        public ContractsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<ContractBillingsGetCompletedEventArgs> ContractBillingsGetCompleted;
        
        public event System.EventHandler<ContractDetailsGetCompletedEventArgs> ContractDetailsGetCompleted;
        
        public event System.EventHandler<ContractRateChangeAsOfSetCompletedEventArgs> ContractRateChangeAsOfSetCompleted;
        
        public event System.EventHandler<ContractSetCompletedEventArgs> ContractSetCompleted;
        
        public event System.EventHandler<ContractsGetCompletedEventArgs> ContractsGetCompleted;
        
        public event System.EventHandler<ContractsResearchGetCompletedEventArgs> ContractsResearchGetCompleted;
        
        public event System.EventHandler<ContractsSummaryByBillingsCompletedEventArgs> ContractsSummaryByBillingsCompleted;
        
        public event System.EventHandler<ContractSummaryGetCompletedEventArgs> ContractSummaryGetCompleted;
        
        public event System.EventHandler<ContractSummaryByBookCashCompletedEventArgs> ContractSummaryByBookCashCompleted;
        
        public event System.EventHandler<ContractSummaryByBookProfitLossGetCompletedEventArgs> ContractSummaryByBookProfitLossGetCompleted;
        
        public event System.EventHandler<ContractSummarybyCashGetCompletedEventArgs> ContractSummarybyCashGetCompleted;
        
        public event System.EventHandler<ContractSummaryByCreditsDebitsCompletedEventArgs> ContractSummaryByCreditsDebitsCompleted;
        
        public event System.EventHandler<ContractSummaryByHypothicationGetCompletedEventArgs> ContractSummaryByHypothicationGetCompleted;
        
        public event System.EventHandler<ContractSummaryByMarketValueGetCompletedEventArgs> ContractSummaryByMarketValueGetCompleted;
        
        public event System.EventHandler<ContractSummaryBySecurityGetCompletedEventArgs> ContractSummaryBySecurityGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceContracts.IContractsService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractBillingsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractBillingsGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractBillingsGet(System.IAsyncResult result) {
            return base.Channel.EndContractBillingsGet(result);
        }
        
        private System.IAsyncResult OnBeginContractBillingsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractBillingsGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractBillingsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractBillingsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractBillingsGetCompleted(object state) {
            if ((this.ContractBillingsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractBillingsGetCompleted(this, new ContractBillingsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractBillingsGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            this.ContractBillingsGetAsync(bizDate, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void ContractBillingsGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractBillingsGetDelegate == null)) {
                this.onBeginContractBillingsGetDelegate = new BeginOperationDelegate(this.OnBeginContractBillingsGet);
            }
            if ((this.onEndContractBillingsGetDelegate == null)) {
                this.onEndContractBillingsGetDelegate = new EndOperationDelegate(this.OnEndContractBillingsGet);
            }
            if ((this.onContractBillingsGetCompletedDelegate == null)) {
                this.onContractBillingsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractBillingsGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractBillingsGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractBillingsGetDelegate, this.onContractBillingsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractDetailsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractDetailsGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractDetailsGet(System.IAsyncResult result) {
            return base.Channel.EndContractDetailsGet(result);
        }
        
        private System.IAsyncResult OnBeginContractDetailsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractDetailsGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractDetailsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractDetailsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractDetailsGetCompleted(object state) {
            if ((this.ContractDetailsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractDetailsGetCompleted(this, new ContractDetailsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractDetailsGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            this.ContractDetailsGetAsync(bizDate, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void ContractDetailsGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractDetailsGetDelegate == null)) {
                this.onBeginContractDetailsGetDelegate = new BeginOperationDelegate(this.OnBeginContractDetailsGet);
            }
            if ((this.onEndContractDetailsGetDelegate == null)) {
                this.onEndContractDetailsGetDelegate = new EndOperationDelegate(this.OnEndContractDetailsGet);
            }
            if ((this.onContractDetailsGetCompletedDelegate == null)) {
                this.onContractDetailsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractDetailsGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractDetailsGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractDetailsGetDelegate, this.onContractDetailsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractRateChangeAsOfSet(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractRateChangeAsOfSet(startDate, endDate, bookGroup, book, contractId, oldRate, newRate, actUserId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceContracts.IContractsService.EndContractRateChangeAsOfSet(System.IAsyncResult result) {
            return base.Channel.EndContractRateChangeAsOfSet(result);
        }
        
        private System.IAsyncResult OnBeginContractRateChangeAsOfSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string startDate = ((string)(inValues[0]));
            string endDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string book = ((string)(inValues[3]));
            string contractId = ((string)(inValues[4]));
            string oldRate = ((string)(inValues[5]));
            string newRate = ((string)(inValues[6]));
            string actUserId = ((string)(inValues[7]));
            string userId = ((string)(inValues[8]));
            string userPassword = ((string)(inValues[9]));
            string functionPath = ((string)(inValues[10]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractRateChangeAsOfSet(startDate, endDate, bookGroup, book, contractId, oldRate, newRate, actUserId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractRateChangeAsOfSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractRateChangeAsOfSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractRateChangeAsOfSetCompleted(object state) {
            if ((this.ContractRateChangeAsOfSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractRateChangeAsOfSetCompleted(this, new ContractRateChangeAsOfSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractRateChangeAsOfSetAsync(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath) {
            this.ContractRateChangeAsOfSetAsync(startDate, endDate, bookGroup, book, contractId, oldRate, newRate, actUserId, userId, userPassword, functionPath, null);
        }
        
        public void ContractRateChangeAsOfSetAsync(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractRateChangeAsOfSetDelegate == null)) {
                this.onBeginContractRateChangeAsOfSetDelegate = new BeginOperationDelegate(this.OnBeginContractRateChangeAsOfSet);
            }
            if ((this.onEndContractRateChangeAsOfSetDelegate == null)) {
                this.onEndContractRateChangeAsOfSetDelegate = new EndOperationDelegate(this.OnEndContractRateChangeAsOfSet);
            }
            if ((this.onContractRateChangeAsOfSetCompletedDelegate == null)) {
                this.onContractRateChangeAsOfSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractRateChangeAsOfSetCompleted);
            }
            base.InvokeAsync(this.onBeginContractRateChangeAsOfSetDelegate, new object[] {
                        startDate,
                        endDate,
                        bookGroup,
                        book,
                        contractId,
                        oldRate,
                        newRate,
                        actUserId,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractRateChangeAsOfSetDelegate, this.onContractRateChangeAsOfSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSet(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginContractSet(bizDate, bookGroup, contractId, contractType, book, secId, quantity, quantitySettled, amount, amountSettled, collateralCode, valueDate, settleDate, termDate, rate, rateCode, statusFlag, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, otherBook, comment, fund, tradeRefId, feeAmount, feeCurrencyIso, feeType, returnData, isIncremental, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceContracts.IContractsService.EndContractSet(System.IAsyncResult result) {
            return base.Channel.EndContractSet(result);
        }
        
        private System.IAsyncResult OnBeginContractSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string contractId = ((string)(inValues[2]));
            string contractType = ((string)(inValues[3]));
            string book = ((string)(inValues[4]));
            string secId = ((string)(inValues[5]));
            string quantity = ((string)(inValues[6]));
            string quantitySettled = ((string)(inValues[7]));
            string amount = ((string)(inValues[8]));
            string amountSettled = ((string)(inValues[9]));
            string collateralCode = ((string)(inValues[10]));
            string valueDate = ((string)(inValues[11]));
            string settleDate = ((string)(inValues[12]));
            string termDate = ((string)(inValues[13]));
            string rate = ((string)(inValues[14]));
            string rateCode = ((string)(inValues[15]));
            string statusFlag = ((string)(inValues[16]));
            string poolCode = ((string)(inValues[17]));
            string divRate = ((string)(inValues[18]));
            bool divCallable = ((bool)(inValues[19]));
            bool incomeTracked = ((bool)(inValues[20]));
            string marginCode = ((string)(inValues[21]));
            string margin = ((string)(inValues[22]));
            string currencyIso = ((string)(inValues[23]));
            string securityDepot = ((string)(inValues[24]));
            string cashDepot = ((string)(inValues[25]));
            string otherBook = ((string)(inValues[26]));
            string comment = ((string)(inValues[27]));
            string fund = ((string)(inValues[28]));
            string tradeRefId = ((string)(inValues[29]));
            string feeAmount = ((string)(inValues[30]));
            string feeCurrencyIso = ((string)(inValues[31]));
            string feeType = ((string)(inValues[32]));
            bool returnData = ((bool)(inValues[33]));
            bool isIncremental = ((bool)(inValues[34]));
            bool isActive = ((bool)(inValues[35]));
            string userId = ((string)(inValues[36]));
            string userPassword = ((string)(inValues[37]));
            string functionPath = ((string)(inValues[38]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSet(bizDate, bookGroup, contractId, contractType, book, secId, quantity, quantitySettled, amount, amountSettled, collateralCode, valueDate, settleDate, termDate, rate, rateCode, statusFlag, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, otherBook, comment, fund, tradeRefId, feeAmount, feeCurrencyIso, feeType, returnData, isIncremental, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSetCompleted(object state) {
            if ((this.ContractSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSetCompleted(this, new ContractSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSetAsync(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.ContractSetAsync(bizDate, bookGroup, contractId, contractType, book, secId, quantity, quantitySettled, amount, amountSettled, collateralCode, valueDate, settleDate, termDate, rate, rateCode, statusFlag, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, otherBook, comment, fund, tradeRefId, feeAmount, feeCurrencyIso, feeType, returnData, isIncremental, isActive, userId, userPassword, functionPath, null);
        }
        
        public void ContractSetAsync(
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string quantitySettled, 
                    string amount, 
                    string amountSettled, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string statusFlag, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string otherBook, 
                    string comment, 
                    string fund, 
                    string tradeRefId, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    bool returnData, 
                    bool isIncremental, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginContractSetDelegate == null)) {
                this.onBeginContractSetDelegate = new BeginOperationDelegate(this.OnBeginContractSet);
            }
            if ((this.onEndContractSetDelegate == null)) {
                this.onEndContractSetDelegate = new EndOperationDelegate(this.OnEndContractSet);
            }
            if ((this.onContractSetCompletedDelegate == null)) {
                this.onContractSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        contractId,
                        contractType,
                        book,
                        secId,
                        quantity,
                        quantitySettled,
                        amount,
                        amountSettled,
                        collateralCode,
                        valueDate,
                        settleDate,
                        termDate,
                        rate,
                        rateCode,
                        statusFlag,
                        poolCode,
                        divRate,
                        divCallable,
                        incomeTracked,
                        marginCode,
                        margin,
                        currencyIso,
                        securityDepot,
                        cashDepot,
                        otherBook,
                        comment,
                        fund,
                        tradeRefId,
                        feeAmount,
                        feeCurrencyIso,
                        feeType,
                        returnData,
                        isIncremental,
                        isActive,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSetDelegate, this.onContractSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractsGet(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractsGet(bizDate, bookGroup, contractId, contractType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractsGet(System.IAsyncResult result) {
            return base.Channel.EndContractsGet(result);
        }
        
        private System.IAsyncResult OnBeginContractsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string contractId = ((string)(inValues[2]));
            string contractType = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractsGet(bizDate, bookGroup, contractId, contractType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractsGetCompleted(object state) {
            if ((this.ContractsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractsGetCompleted(this, new ContractsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractsGetAsync(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath) {
            this.ContractsGetAsync(bizDate, bookGroup, contractId, contractType, userId, userPassword, functionPath, null);
        }
        
        public void ContractsGetAsync(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractsGetDelegate == null)) {
                this.onBeginContractsGetDelegate = new BeginOperationDelegate(this.OnBeginContractsGet);
            }
            if ((this.onEndContractsGetDelegate == null)) {
                this.onEndContractsGetDelegate = new EndOperationDelegate(this.OnEndContractsGet);
            }
            if ((this.onContractsGetCompletedDelegate == null)) {
                this.onContractsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractsGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractsGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        contractId,
                        contractType,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractsGetDelegate, this.onContractsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractsResearchGet(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractsResearchGet(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractsResearchGet(System.IAsyncResult result) {
            return base.Channel.EndContractsResearchGet(result);
        }
        
        private System.IAsyncResult OnBeginContractsResearchGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string startDate = ((string)(inValues[1]));
            string stopDate = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string book = ((string)(inValues[4]));
            string contractId = ((string)(inValues[5]));
            string secId = ((string)(inValues[6]));
            string amount = ((string)(inValues[7]));
            string logicId = ((string)(inValues[8]));
            string userId = ((string)(inValues[9]));
            string userPassword = ((string)(inValues[10]));
            string functionPath = ((string)(inValues[11]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractsResearchGet(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractsResearchGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractsResearchGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractsResearchGetCompleted(object state) {
            if ((this.ContractsResearchGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractsResearchGetCompleted(this, new ContractsResearchGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractsResearchGetAsync(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath) {
            this.ContractsResearchGetAsync(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, null);
        }
        
        public void ContractsResearchGetAsync(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractsResearchGetDelegate == null)) {
                this.onBeginContractsResearchGetDelegate = new BeginOperationDelegate(this.OnBeginContractsResearchGet);
            }
            if ((this.onEndContractsResearchGetDelegate == null)) {
                this.onEndContractsResearchGetDelegate = new EndOperationDelegate(this.OnEndContractsResearchGet);
            }
            if ((this.onContractsResearchGetCompletedDelegate == null)) {
                this.onContractsResearchGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractsResearchGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractsResearchGetDelegate, new object[] {
                        bizDate,
                        startDate,
                        stopDate,
                        bookGroup,
                        book,
                        contractId,
                        secId,
                        amount,
                        logicId,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractsResearchGetDelegate, this.onContractsResearchGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractsSummaryByBillings(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractsSummaryByBillings(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractsSummaryByBillings(System.IAsyncResult result) {
            return base.Channel.EndContractsSummaryByBillings(result);
        }
        
        private System.IAsyncResult OnBeginContractsSummaryByBillings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string startDate = ((string)(inValues[1]));
            string stopDate = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string book = ((string)(inValues[4]));
            string contractId = ((string)(inValues[5]));
            string secId = ((string)(inValues[6]));
            string amount = ((string)(inValues[7]));
            string logicId = ((string)(inValues[8]));
            string userId = ((string)(inValues[9]));
            string userPassword = ((string)(inValues[10]));
            string functionPath = ((string)(inValues[11]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractsSummaryByBillings(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractsSummaryByBillings(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractsSummaryByBillings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractsSummaryByBillingsCompleted(object state) {
            if ((this.ContractsSummaryByBillingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractsSummaryByBillingsCompleted(this, new ContractsSummaryByBillingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractsSummaryByBillingsAsync(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath) {
            this.ContractsSummaryByBillingsAsync(bizDate, startDate, stopDate, bookGroup, book, contractId, secId, amount, logicId, userId, userPassword, functionPath, null);
        }
        
        public void ContractsSummaryByBillingsAsync(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractsSummaryByBillingsDelegate == null)) {
                this.onBeginContractsSummaryByBillingsDelegate = new BeginOperationDelegate(this.OnBeginContractsSummaryByBillings);
            }
            if ((this.onEndContractsSummaryByBillingsDelegate == null)) {
                this.onEndContractsSummaryByBillingsDelegate = new EndOperationDelegate(this.OnEndContractsSummaryByBillings);
            }
            if ((this.onContractsSummaryByBillingsCompletedDelegate == null)) {
                this.onContractsSummaryByBillingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractsSummaryByBillingsCompleted);
            }
            base.InvokeAsync(this.onBeginContractsSummaryByBillingsDelegate, new object[] {
                        bizDate,
                        startDate,
                        stopDate,
                        bookGroup,
                        book,
                        contractId,
                        secId,
                        amount,
                        logicId,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractsSummaryByBillingsDelegate, this.onContractsSummaryByBillingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryGet(bizDate, bookGroup, userId, userPassword, functionPath, usePoolCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            string usePoolCode = ((string)(inValues[5]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryGet(bizDate, bookGroup, userId, userPassword, functionPath, usePoolCode, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryGetCompleted(object state) {
            if ((this.ContractSummaryGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryGetCompleted(this, new ContractSummaryGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode) {
            this.ContractSummaryGetAsync(bizDate, bookGroup, userId, userPassword, functionPath, usePoolCode, null);
        }
        
        public void ContractSummaryGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode, object userState) {
            if ((this.onBeginContractSummaryGetDelegate == null)) {
                this.onBeginContractSummaryGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryGet);
            }
            if ((this.onEndContractSummaryGetDelegate == null)) {
                this.onEndContractSummaryGetDelegate = new EndOperationDelegate(this.OnEndContractSummaryGet);
            }
            if ((this.onContractSummaryGetCompletedDelegate == null)) {
                this.onContractSummaryGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath,
                        usePoolCode}, this.onEndContractSummaryGetDelegate, this.onContractSummaryGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryByBookCash(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryByBookCash(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryByBookCash(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryByBookCash(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryByBookCash(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryByBookCash(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryByBookCash(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryByBookCash(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryByBookCashCompleted(object state) {
            if ((this.ContractSummaryByBookCashCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryByBookCashCompleted(this, new ContractSummaryByBookCashCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryByBookCashAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            this.ContractSummaryByBookCashAsync(bizDate, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void ContractSummaryByBookCashAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractSummaryByBookCashDelegate == null)) {
                this.onBeginContractSummaryByBookCashDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryByBookCash);
            }
            if ((this.onEndContractSummaryByBookCashDelegate == null)) {
                this.onEndContractSummaryByBookCashDelegate = new EndOperationDelegate(this.OnEndContractSummaryByBookCash);
            }
            if ((this.onContractSummaryByBookCashCompletedDelegate == null)) {
                this.onContractSummaryByBookCashCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryByBookCashCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryByBookCashDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSummaryByBookCashDelegate, this.onContractSummaryByBookCashCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryByBookProfitLossGet(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryByBookProfitLossGet(bizDate, startDate, stopDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryByBookProfitLossGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryByBookProfitLossGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryByBookProfitLossGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string startDate = ((string)(inValues[1]));
            string stopDate = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryByBookProfitLossGet(bizDate, startDate, stopDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryByBookProfitLossGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryByBookProfitLossGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryByBookProfitLossGetCompleted(object state) {
            if ((this.ContractSummaryByBookProfitLossGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryByBookProfitLossGetCompleted(this, new ContractSummaryByBookProfitLossGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryByBookProfitLossGetAsync(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath) {
            this.ContractSummaryByBookProfitLossGetAsync(bizDate, startDate, stopDate, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void ContractSummaryByBookProfitLossGetAsync(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginContractSummaryByBookProfitLossGetDelegate == null)) {
                this.onBeginContractSummaryByBookProfitLossGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryByBookProfitLossGet);
            }
            if ((this.onEndContractSummaryByBookProfitLossGetDelegate == null)) {
                this.onEndContractSummaryByBookProfitLossGetDelegate = new EndOperationDelegate(this.OnEndContractSummaryByBookProfitLossGet);
            }
            if ((this.onContractSummaryByBookProfitLossGetCompletedDelegate == null)) {
                this.onContractSummaryByBookProfitLossGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryByBookProfitLossGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryByBookProfitLossGetDelegate, new object[] {
                        bizDate,
                        startDate,
                        stopDate,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndContractSummaryByBookProfitLossGetDelegate, this.onContractSummaryByBookProfitLossGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummarybyCashGet(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummarybyCashGet(bizDate, bookGroup, settlementType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummarybyCashGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummarybyCashGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummarybyCashGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string settlementType = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string functionPath = ((string)(inValues[5]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummarybyCashGet(bizDate, bookGroup, settlementType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummarybyCashGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummarybyCashGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummarybyCashGetCompleted(object state) {
            if ((this.ContractSummarybyCashGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummarybyCashGetCompleted(this, new ContractSummarybyCashGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummarybyCashGetAsync(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath) {
            this.ContractSummarybyCashGetAsync(bizDate, bookGroup, settlementType, userId, userPassword, functionPath, null);
        }
        
        public void ContractSummarybyCashGetAsync(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractSummarybyCashGetDelegate == null)) {
                this.onBeginContractSummarybyCashGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummarybyCashGet);
            }
            if ((this.onEndContractSummarybyCashGetDelegate == null)) {
                this.onEndContractSummarybyCashGetDelegate = new EndOperationDelegate(this.OnEndContractSummarybyCashGet);
            }
            if ((this.onContractSummarybyCashGetCompletedDelegate == null)) {
                this.onContractSummarybyCashGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummarybyCashGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummarybyCashGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        settlementType,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSummarybyCashGetDelegate, this.onContractSummarybyCashGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryByCreditsDebits(string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryByCreditsDebits(bizDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryByCreditsDebits(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryByCreditsDebits(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryByCreditsDebits(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string userPassword = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryByCreditsDebits(bizDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryByCreditsDebits(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryByCreditsDebits(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryByCreditsDebitsCompleted(object state) {
            if ((this.ContractSummaryByCreditsDebitsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryByCreditsDebitsCompleted(this, new ContractSummaryByCreditsDebitsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryByCreditsDebitsAsync(string bizDate, string userId, string userPassword, string bookGroup, string functionPath) {
            this.ContractSummaryByCreditsDebitsAsync(bizDate, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void ContractSummaryByCreditsDebitsAsync(string bizDate, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginContractSummaryByCreditsDebitsDelegate == null)) {
                this.onBeginContractSummaryByCreditsDebitsDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryByCreditsDebits);
            }
            if ((this.onEndContractSummaryByCreditsDebitsDelegate == null)) {
                this.onEndContractSummaryByCreditsDebitsDelegate = new EndOperationDelegate(this.OnEndContractSummaryByCreditsDebits);
            }
            if ((this.onContractSummaryByCreditsDebitsCompletedDelegate == null)) {
                this.onContractSummaryByCreditsDebitsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryByCreditsDebitsCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryByCreditsDebitsDelegate, new object[] {
                        bizDate,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndContractSummaryByCreditsDebitsDelegate, this.onContractSummaryByCreditsDebitsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryByHypothicationGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryByHypothicationGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryByHypothicationGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryByHypothicationGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryByHypothicationGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryByHypothicationGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryByHypothicationGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryByHypothicationGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryByHypothicationGetCompleted(object state) {
            if ((this.ContractSummaryByHypothicationGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryByHypothicationGetCompleted(this, new ContractSummaryByHypothicationGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryByHypothicationGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            this.ContractSummaryByHypothicationGetAsync(bizDate, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void ContractSummaryByHypothicationGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractSummaryByHypothicationGetDelegate == null)) {
                this.onBeginContractSummaryByHypothicationGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryByHypothicationGet);
            }
            if ((this.onEndContractSummaryByHypothicationGetDelegate == null)) {
                this.onEndContractSummaryByHypothicationGetDelegate = new EndOperationDelegate(this.OnEndContractSummaryByHypothicationGet);
            }
            if ((this.onContractSummaryByHypothicationGetCompletedDelegate == null)) {
                this.onContractSummaryByHypothicationGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryByHypothicationGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryByHypothicationGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSummaryByHypothicationGetDelegate, this.onContractSummaryByHypothicationGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryByMarketValueGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryByMarketValueGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryByMarketValueGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryByMarketValueGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryByMarketValueGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryByMarketValueGet(bizDate, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryByMarketValueGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryByMarketValueGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryByMarketValueGetCompleted(object state) {
            if ((this.ContractSummaryByMarketValueGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryByMarketValueGetCompleted(this, new ContractSummaryByMarketValueGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryByMarketValueGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath) {
            this.ContractSummaryByMarketValueGetAsync(bizDate, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void ContractSummaryByMarketValueGetAsync(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractSummaryByMarketValueGetDelegate == null)) {
                this.onBeginContractSummaryByMarketValueGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryByMarketValueGet);
            }
            if ((this.onEndContractSummaryByMarketValueGetDelegate == null)) {
                this.onEndContractSummaryByMarketValueGetDelegate = new EndOperationDelegate(this.OnEndContractSummaryByMarketValueGet);
            }
            if ((this.onContractSummaryByMarketValueGetCompletedDelegate == null)) {
                this.onContractSummaryByMarketValueGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryByMarketValueGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryByMarketValueGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSummaryByMarketValueGetDelegate, this.onContractSummaryByMarketValueGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceContracts.IContractsService.BeginContractSummaryBySecurityGet(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContractSummaryBySecurityGet(bizDate, bookGroup, usePoolCode, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceContracts.IContractsService.EndContractSummaryBySecurityGet(System.IAsyncResult result) {
            return base.Channel.EndContractSummaryBySecurityGet(result);
        }
        
        private System.IAsyncResult OnBeginContractSummaryBySecurityGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            bool usePoolCode = ((bool)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string functionPath = ((string)(inValues[5]));
            return ((WorldWideClient.ServiceContracts.IContractsService)(this)).BeginContractSummaryBySecurityGet(bizDate, bookGroup, usePoolCode, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndContractSummaryBySecurityGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceContracts.IContractsService)(this)).EndContractSummaryBySecurityGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContractSummaryBySecurityGetCompleted(object state) {
            if ((this.ContractSummaryBySecurityGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContractSummaryBySecurityGetCompleted(this, new ContractSummaryBySecurityGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContractSummaryBySecurityGetAsync(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath) {
            this.ContractSummaryBySecurityGetAsync(bizDate, bookGroup, usePoolCode, userId, userPassword, functionPath, null);
        }
        
        public void ContractSummaryBySecurityGetAsync(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginContractSummaryBySecurityGetDelegate == null)) {
                this.onBeginContractSummaryBySecurityGetDelegate = new BeginOperationDelegate(this.OnBeginContractSummaryBySecurityGet);
            }
            if ((this.onEndContractSummaryBySecurityGetDelegate == null)) {
                this.onEndContractSummaryBySecurityGetDelegate = new EndOperationDelegate(this.OnEndContractSummaryBySecurityGet);
            }
            if ((this.onContractSummaryBySecurityGetCompletedDelegate == null)) {
                this.onContractSummaryBySecurityGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContractSummaryBySecurityGetCompleted);
            }
            base.InvokeAsync(this.onBeginContractSummaryBySecurityGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        usePoolCode,
                        userId,
                        userPassword,
                        functionPath}, this.onEndContractSummaryBySecurityGetDelegate, this.onContractSummaryBySecurityGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceContracts.IContractsService CreateChannel() {
            return new ContractsServiceClientChannel(this);
        }
        
        private class ContractsServiceClientChannel : ChannelBase<WorldWideClient.ServiceContracts.IContractsService>, WorldWideClient.ServiceContracts.IContractsService {
            
            public ContractsServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceContracts.IContractsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractBillingsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractBillingsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractBillingsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractBillingsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractDetailsGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractDetailsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractDetailsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractDetailsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractRateChangeAsOfSet(string startDate, string endDate, string bookGroup, string book, string contractId, string oldRate, string newRate, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = startDate;
                _args[1] = endDate;
                _args[2] = bookGroup;
                _args[3] = book;
                _args[4] = contractId;
                _args[5] = oldRate;
                _args[6] = newRate;
                _args[7] = actUserId;
                _args[8] = userId;
                _args[9] = userPassword;
                _args[10] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractRateChangeAsOfSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndContractRateChangeAsOfSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ContractRateChangeAsOfSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSet(
                        string bizDate, 
                        string bookGroup, 
                        string contractId, 
                        string contractType, 
                        string book, 
                        string secId, 
                        string quantity, 
                        string quantitySettled, 
                        string amount, 
                        string amountSettled, 
                        string collateralCode, 
                        string valueDate, 
                        string settleDate, 
                        string termDate, 
                        string rate, 
                        string rateCode, 
                        string statusFlag, 
                        string poolCode, 
                        string divRate, 
                        bool divCallable, 
                        bool incomeTracked, 
                        string marginCode, 
                        string margin, 
                        string currencyIso, 
                        string securityDepot, 
                        string cashDepot, 
                        string otherBook, 
                        string comment, 
                        string fund, 
                        string tradeRefId, 
                        string feeAmount, 
                        string feeCurrencyIso, 
                        string feeType, 
                        bool returnData, 
                        bool isIncremental, 
                        bool isActive, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[39];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = contractId;
                _args[3] = contractType;
                _args[4] = book;
                _args[5] = secId;
                _args[6] = quantity;
                _args[7] = quantitySettled;
                _args[8] = amount;
                _args[9] = amountSettled;
                _args[10] = collateralCode;
                _args[11] = valueDate;
                _args[12] = settleDate;
                _args[13] = termDate;
                _args[14] = rate;
                _args[15] = rateCode;
                _args[16] = statusFlag;
                _args[17] = poolCode;
                _args[18] = divRate;
                _args[19] = divCallable;
                _args[20] = incomeTracked;
                _args[21] = marginCode;
                _args[22] = margin;
                _args[23] = currencyIso;
                _args[24] = securityDepot;
                _args[25] = cashDepot;
                _args[26] = otherBook;
                _args[27] = comment;
                _args[28] = fund;
                _args[29] = tradeRefId;
                _args[30] = feeAmount;
                _args[31] = feeCurrencyIso;
                _args[32] = feeType;
                _args[33] = returnData;
                _args[34] = isIncremental;
                _args[35] = isActive;
                _args[36] = userId;
                _args[37] = userPassword;
                _args[38] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndContractSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ContractSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractsGet(string bizDate, string bookGroup, string contractId, string contractType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = contractId;
                _args[3] = contractType;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractsResearchGet(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[12];
                _args[0] = bizDate;
                _args[1] = startDate;
                _args[2] = stopDate;
                _args[3] = bookGroup;
                _args[4] = book;
                _args[5] = contractId;
                _args[6] = secId;
                _args[7] = amount;
                _args[8] = logicId;
                _args[9] = userId;
                _args[10] = userPassword;
                _args[11] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractsResearchGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractsResearchGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractsResearchGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractsSummaryByBillings(string bizDate, string startDate, string stopDate, string bookGroup, string book, string contractId, string secId, string amount, string logicId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[12];
                _args[0] = bizDate;
                _args[1] = startDate;
                _args[2] = stopDate;
                _args[3] = bookGroup;
                _args[4] = book;
                _args[5] = contractId;
                _args[6] = secId;
                _args[7] = amount;
                _args[8] = logicId;
                _args[9] = userId;
                _args[10] = userPassword;
                _args[11] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractsSummaryByBillings", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractsSummaryByBillings(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractsSummaryByBillings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, string usePoolCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                _args[5] = usePoolCode;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryByBookCash(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryByBookCash", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryByBookCash(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryByBookCash", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryByBookProfitLossGet(string bizDate, string startDate, string stopDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = bizDate;
                _args[1] = startDate;
                _args[2] = stopDate;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryByBookProfitLossGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryByBookProfitLossGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryByBookProfitLossGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummarybyCashGet(string bizDate, string bookGroup, string settlementType, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = settlementType;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummarybyCashGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummarybyCashGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummarybyCashGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryByCreditsDebits(string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = userId;
                _args[2] = userPassword;
                _args[3] = bookGroup;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryByCreditsDebits", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryByCreditsDebits(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryByCreditsDebits", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryByHypothicationGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryByHypothicationGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryByHypothicationGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryByHypothicationGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryByMarketValueGet(string bizDate, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryByMarketValueGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryByMarketValueGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryByMarketValueGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginContractSummaryBySecurityGet(string bizDate, string bookGroup, bool usePoolCode, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = usePoolCode;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ContractSummaryBySecurityGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndContractSummaryBySecurityGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ContractSummaryBySecurityGet", _args, result)));
                return _result;
            }
        }
    }
}
