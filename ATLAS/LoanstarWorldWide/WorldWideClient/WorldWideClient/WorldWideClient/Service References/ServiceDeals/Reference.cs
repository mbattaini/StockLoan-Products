//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceDeals {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceDeals.IDealsService")]
    public interface IDealsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDealsService/GetSourceIP", ReplyAction="http://tempuri.org/IDealsService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDealsService/DealSet", ReplyAction="http://tempuri.org/IDealsService/DealSetResponse")]
        System.IAsyncResult BeginDealSet(
                    string dealId, 
                    string bookGroup, 
                    string dealType, 
                    string book, 
                    string bookContact, 
                    string contractId, 
                    string secId, 
                    string quantity, 
                    string amount, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string comment, 
                    string fund, 
                    string dealStatus, 
                    bool isActive, 
                    string actUserId, 
                    bool returnData, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndDealSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDealsService/DealsGet", ReplyAction="http://tempuri.org/IDealsService/DealsGetResponse")]
        System.IAsyncResult BeginDealsGet(string bizDate, string dealId, string dealIdPrefix, bool isActive, short utcOffSet, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDealsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDealsService/DealToContract", ReplyAction="http://tempuri.org/IDealsService/DealToContractResponse")]
        System.IAsyncResult BeginDealToContract(string dealId, string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndDealToContract(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDealsServiceChannel : WorldWideClient.ServiceDeals.IDealsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DealSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DealSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DealsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DealsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DealToContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DealToContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DealsServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceDeals.IDealsService>, WorldWideClient.ServiceDeals.IDealsService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginDealSetDelegate;
        
        private EndOperationDelegate onEndDealSetDelegate;
        
        private System.Threading.SendOrPostCallback onDealSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDealsGetDelegate;
        
        private EndOperationDelegate onEndDealsGetDelegate;
        
        private System.Threading.SendOrPostCallback onDealsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDealToContractDelegate;
        
        private EndOperationDelegate onEndDealToContractDelegate;
        
        private System.Threading.SendOrPostCallback onDealToContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DealsServiceClient() {
        }
        
        public DealsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DealsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DealsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DealsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<DealSetCompletedEventArgs> DealSetCompleted;
        
        public event System.EventHandler<DealsGetCompletedEventArgs> DealsGetCompleted;
        
        public event System.EventHandler<DealToContractCompletedEventArgs> DealToContractCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceDeals.IDealsService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceDeals.IDealsService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceDeals.IDealsService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceDeals.IDealsService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceDeals.IDealsService.BeginDealSet(
                    string dealId, 
                    string bookGroup, 
                    string dealType, 
                    string book, 
                    string bookContact, 
                    string contractId, 
                    string secId, 
                    string quantity, 
                    string amount, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string comment, 
                    string fund, 
                    string dealStatus, 
                    bool isActive, 
                    string actUserId, 
                    bool returnData, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginDealSet(dealId, bookGroup, dealType, book, bookContact, contractId, secId, quantity, amount, collateralCode, valueDate, settleDate, termDate, rate, rateCode, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, comment, fund, dealStatus, isActive, actUserId, returnData, feeAmount, feeCurrencyIso, feeType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceDeals.IDealsService.EndDealSet(System.IAsyncResult result) {
            return base.Channel.EndDealSet(result);
        }
        
        private System.IAsyncResult OnBeginDealSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dealId = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string dealType = ((string)(inValues[2]));
            string book = ((string)(inValues[3]));
            string bookContact = ((string)(inValues[4]));
            string contractId = ((string)(inValues[5]));
            string secId = ((string)(inValues[6]));
            string quantity = ((string)(inValues[7]));
            string amount = ((string)(inValues[8]));
            string collateralCode = ((string)(inValues[9]));
            string valueDate = ((string)(inValues[10]));
            string settleDate = ((string)(inValues[11]));
            string termDate = ((string)(inValues[12]));
            string rate = ((string)(inValues[13]));
            string rateCode = ((string)(inValues[14]));
            string poolCode = ((string)(inValues[15]));
            string divRate = ((string)(inValues[16]));
            bool divCallable = ((bool)(inValues[17]));
            bool incomeTracked = ((bool)(inValues[18]));
            string marginCode = ((string)(inValues[19]));
            string margin = ((string)(inValues[20]));
            string currencyIso = ((string)(inValues[21]));
            string securityDepot = ((string)(inValues[22]));
            string cashDepot = ((string)(inValues[23]));
            string comment = ((string)(inValues[24]));
            string fund = ((string)(inValues[25]));
            string dealStatus = ((string)(inValues[26]));
            bool isActive = ((bool)(inValues[27]));
            string actUserId = ((string)(inValues[28]));
            bool returnData = ((bool)(inValues[29]));
            string feeAmount = ((string)(inValues[30]));
            string feeCurrencyIso = ((string)(inValues[31]));
            string feeType = ((string)(inValues[32]));
            string userId = ((string)(inValues[33]));
            string userPassword = ((string)(inValues[34]));
            string functionPath = ((string)(inValues[35]));
            return ((WorldWideClient.ServiceDeals.IDealsService)(this)).BeginDealSet(dealId, bookGroup, dealType, book, bookContact, contractId, secId, quantity, amount, collateralCode, valueDate, settleDate, termDate, rate, rateCode, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, comment, fund, dealStatus, isActive, actUserId, returnData, feeAmount, feeCurrencyIso, feeType, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDealSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceDeals.IDealsService)(this)).EndDealSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDealSetCompleted(object state) {
            if ((this.DealSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DealSetCompleted(this, new DealSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DealSetAsync(
                    string dealId, 
                    string bookGroup, 
                    string dealType, 
                    string book, 
                    string bookContact, 
                    string contractId, 
                    string secId, 
                    string quantity, 
                    string amount, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string comment, 
                    string fund, 
                    string dealStatus, 
                    bool isActive, 
                    string actUserId, 
                    bool returnData, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.DealSetAsync(dealId, bookGroup, dealType, book, bookContact, contractId, secId, quantity, amount, collateralCode, valueDate, settleDate, termDate, rate, rateCode, poolCode, divRate, divCallable, incomeTracked, marginCode, margin, currencyIso, securityDepot, cashDepot, comment, fund, dealStatus, isActive, actUserId, returnData, feeAmount, feeCurrencyIso, feeType, userId, userPassword, functionPath, null);
        }
        
        public void DealSetAsync(
                    string dealId, 
                    string bookGroup, 
                    string dealType, 
                    string book, 
                    string bookContact, 
                    string contractId, 
                    string secId, 
                    string quantity, 
                    string amount, 
                    string collateralCode, 
                    string valueDate, 
                    string settleDate, 
                    string termDate, 
                    string rate, 
                    string rateCode, 
                    string poolCode, 
                    string divRate, 
                    bool divCallable, 
                    bool incomeTracked, 
                    string marginCode, 
                    string margin, 
                    string currencyIso, 
                    string securityDepot, 
                    string cashDepot, 
                    string comment, 
                    string fund, 
                    string dealStatus, 
                    bool isActive, 
                    string actUserId, 
                    bool returnData, 
                    string feeAmount, 
                    string feeCurrencyIso, 
                    string feeType, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginDealSetDelegate == null)) {
                this.onBeginDealSetDelegate = new BeginOperationDelegate(this.OnBeginDealSet);
            }
            if ((this.onEndDealSetDelegate == null)) {
                this.onEndDealSetDelegate = new EndOperationDelegate(this.OnEndDealSet);
            }
            if ((this.onDealSetCompletedDelegate == null)) {
                this.onDealSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDealSetCompleted);
            }
            base.InvokeAsync(this.onBeginDealSetDelegate, new object[] {
                        dealId,
                        bookGroup,
                        dealType,
                        book,
                        bookContact,
                        contractId,
                        secId,
                        quantity,
                        amount,
                        collateralCode,
                        valueDate,
                        settleDate,
                        termDate,
                        rate,
                        rateCode,
                        poolCode,
                        divRate,
                        divCallable,
                        incomeTracked,
                        marginCode,
                        margin,
                        currencyIso,
                        securityDepot,
                        cashDepot,
                        comment,
                        fund,
                        dealStatus,
                        isActive,
                        actUserId,
                        returnData,
                        feeAmount,
                        feeCurrencyIso,
                        feeType,
                        userId,
                        userPassword,
                        functionPath}, this.onEndDealSetDelegate, this.onDealSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceDeals.IDealsService.BeginDealsGet(string bizDate, string dealId, string dealIdPrefix, bool isActive, short utcOffSet, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDealsGet(bizDate, dealId, dealIdPrefix, isActive, utcOffSet, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceDeals.IDealsService.EndDealsGet(System.IAsyncResult result) {
            return base.Channel.EndDealsGet(result);
        }
        
        private System.IAsyncResult OnBeginDealsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string dealId = ((string)(inValues[1]));
            string dealIdPrefix = ((string)(inValues[2]));
            bool isActive = ((bool)(inValues[3]));
            short utcOffSet = ((short)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string bookGroup = ((string)(inValues[7]));
            string functionPath = ((string)(inValues[8]));
            return ((WorldWideClient.ServiceDeals.IDealsService)(this)).BeginDealsGet(bizDate, dealId, dealIdPrefix, isActive, utcOffSet, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDealsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceDeals.IDealsService)(this)).EndDealsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDealsGetCompleted(object state) {
            if ((this.DealsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DealsGetCompleted(this, new DealsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DealsGetAsync(string bizDate, string dealId, string dealIdPrefix, bool isActive, short utcOffSet, string userId, string userPassword, string bookGroup, string functionPath) {
            this.DealsGetAsync(bizDate, dealId, dealIdPrefix, isActive, utcOffSet, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void DealsGetAsync(string bizDate, string dealId, string dealIdPrefix, bool isActive, short utcOffSet, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginDealsGetDelegate == null)) {
                this.onBeginDealsGetDelegate = new BeginOperationDelegate(this.OnBeginDealsGet);
            }
            if ((this.onEndDealsGetDelegate == null)) {
                this.onEndDealsGetDelegate = new EndOperationDelegate(this.OnEndDealsGet);
            }
            if ((this.onDealsGetCompletedDelegate == null)) {
                this.onDealsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDealsGetCompleted);
            }
            base.InvokeAsync(this.onBeginDealsGetDelegate, new object[] {
                        bizDate,
                        dealId,
                        dealIdPrefix,
                        isActive,
                        utcOffSet,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndDealsGetDelegate, this.onDealsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceDeals.IDealsService.BeginDealToContract(string dealId, string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDealToContract(dealId, bizDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceDeals.IDealsService.EndDealToContract(System.IAsyncResult result) {
            return base.Channel.EndDealToContract(result);
        }
        
        private System.IAsyncResult OnBeginDealToContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dealId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string bookGroup = ((string)(inValues[4]));
            string functionPath = ((string)(inValues[5]));
            return ((WorldWideClient.ServiceDeals.IDealsService)(this)).BeginDealToContract(dealId, bizDate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDealToContract(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceDeals.IDealsService)(this)).EndDealToContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDealToContractCompleted(object state) {
            if ((this.DealToContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DealToContractCompleted(this, new DealToContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DealToContractAsync(string dealId, string bizDate, string userId, string userPassword, string bookGroup, string functionPath) {
            this.DealToContractAsync(dealId, bizDate, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void DealToContractAsync(string dealId, string bizDate, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginDealToContractDelegate == null)) {
                this.onBeginDealToContractDelegate = new BeginOperationDelegate(this.OnBeginDealToContract);
            }
            if ((this.onEndDealToContractDelegate == null)) {
                this.onEndDealToContractDelegate = new EndOperationDelegate(this.OnEndDealToContract);
            }
            if ((this.onDealToContractCompletedDelegate == null)) {
                this.onDealToContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDealToContractCompleted);
            }
            base.InvokeAsync(this.onBeginDealToContractDelegate, new object[] {
                        dealId,
                        bizDate,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndDealToContractDelegate, this.onDealToContractCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceDeals.IDealsService CreateChannel() {
            return new DealsServiceClientChannel(this);
        }
        
        private class DealsServiceClientChannel : ChannelBase<WorldWideClient.ServiceDeals.IDealsService>, WorldWideClient.ServiceDeals.IDealsService {
            
            public DealsServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceDeals.IDealsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDealSet(
                        string dealId, 
                        string bookGroup, 
                        string dealType, 
                        string book, 
                        string bookContact, 
                        string contractId, 
                        string secId, 
                        string quantity, 
                        string amount, 
                        string collateralCode, 
                        string valueDate, 
                        string settleDate, 
                        string termDate, 
                        string rate, 
                        string rateCode, 
                        string poolCode, 
                        string divRate, 
                        bool divCallable, 
                        bool incomeTracked, 
                        string marginCode, 
                        string margin, 
                        string currencyIso, 
                        string securityDepot, 
                        string cashDepot, 
                        string comment, 
                        string fund, 
                        string dealStatus, 
                        bool isActive, 
                        string actUserId, 
                        bool returnData, 
                        string feeAmount, 
                        string feeCurrencyIso, 
                        string feeType, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[36];
                _args[0] = dealId;
                _args[1] = bookGroup;
                _args[2] = dealType;
                _args[3] = book;
                _args[4] = bookContact;
                _args[5] = contractId;
                _args[6] = secId;
                _args[7] = quantity;
                _args[8] = amount;
                _args[9] = collateralCode;
                _args[10] = valueDate;
                _args[11] = settleDate;
                _args[12] = termDate;
                _args[13] = rate;
                _args[14] = rateCode;
                _args[15] = poolCode;
                _args[16] = divRate;
                _args[17] = divCallable;
                _args[18] = incomeTracked;
                _args[19] = marginCode;
                _args[20] = margin;
                _args[21] = currencyIso;
                _args[22] = securityDepot;
                _args[23] = cashDepot;
                _args[24] = comment;
                _args[25] = fund;
                _args[26] = dealStatus;
                _args[27] = isActive;
                _args[28] = actUserId;
                _args[29] = returnData;
                _args[30] = feeAmount;
                _args[31] = feeCurrencyIso;
                _args[32] = feeType;
                _args[33] = userId;
                _args[34] = userPassword;
                _args[35] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DealSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDealSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DealSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDealsGet(string bizDate, string dealId, string dealIdPrefix, bool isActive, short utcOffSet, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = bizDate;
                _args[1] = dealId;
                _args[2] = dealIdPrefix;
                _args[3] = isActive;
                _args[4] = utcOffSet;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = bookGroup;
                _args[8] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DealsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDealsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DealsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDealToContract(string dealId, string bizDate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = dealId;
                _args[1] = bizDate;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = bookGroup;
                _args[5] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DealToContract", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDealToContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DealToContract", _args, result)));
                return _result;
            }
        }
    }
}
