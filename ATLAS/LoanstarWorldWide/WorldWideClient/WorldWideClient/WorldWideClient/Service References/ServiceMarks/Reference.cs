//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceMarks {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMarks.IMarksService")]
    public interface IMarksService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/GetSourceIP", ReplyAction="http://tempuri.org/IMarksService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarkAsOfSet", ReplyAction="http://tempuri.org/IMarksService/MarkAsOfSetResponse")]
        System.IAsyncResult BeginMarkAsOfSet(string tradeDate, string settleDate, string bookGroup, string book, string contractId, string contractType, string price, string markId, string deliveryCode, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        int EndMarkAsOfSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarkIsExistGet", ReplyAction="http://tempuri.org/IMarksService/MarkIsExistGetResponse")]
        System.IAsyncResult BeginMarkIsExistGet(string bizDate, string bookGroup, string book, string contractId, string contractType, string secId, string amount, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndMarkIsExistGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarkSet", ReplyAction="http://tempuri.org/IMarksService/MarkSetResponse")]
        System.IAsyncResult BeginMarkSet(
                    string markId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string secId, 
                    string amount, 
                    string openDate, 
                    string settleDate, 
                    string deliveryCode, 
                    string actUserId, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndMarkSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarksGet", ReplyAction="http://tempuri.org/IMarksService/MarksGetResponse")]
        System.IAsyncResult BeginMarksGet(string markId, string bizDate, string contractId, string bookGroup, short utcOffset, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndMarksGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarksSummaryByCashGet", ReplyAction="http://tempuri.org/IMarksService/MarksSummaryByCashGetResponse")]
        System.IAsyncResult BeginMarksSummaryByCashGet(string markId, string bizDate, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndMarksSummaryByCashGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMarksService/MarksSummaryGet", ReplyAction="http://tempuri.org/IMarksService/MarksSummaryGetResponse")]
        System.IAsyncResult BeginMarksSummaryGet(string markId, string bizDate, string bizDateFormat, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndMarksSummaryGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarksServiceChannel : WorldWideClient.ServiceMarks.IMarksService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkAsOfSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkAsOfSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkIsExistGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkIsExistGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarksGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarksGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarksSummaryByCashGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarksSummaryByCashGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarksSummaryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarksSummaryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarksServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceMarks.IMarksService>, WorldWideClient.ServiceMarks.IMarksService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkAsOfSetDelegate;
        
        private EndOperationDelegate onEndMarkAsOfSetDelegate;
        
        private System.Threading.SendOrPostCallback onMarkAsOfSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkIsExistGetDelegate;
        
        private EndOperationDelegate onEndMarkIsExistGetDelegate;
        
        private System.Threading.SendOrPostCallback onMarkIsExistGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkSetDelegate;
        
        private EndOperationDelegate onEndMarkSetDelegate;
        
        private System.Threading.SendOrPostCallback onMarkSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarksGetDelegate;
        
        private EndOperationDelegate onEndMarksGetDelegate;
        
        private System.Threading.SendOrPostCallback onMarksGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarksSummaryByCashGetDelegate;
        
        private EndOperationDelegate onEndMarksSummaryByCashGetDelegate;
        
        private System.Threading.SendOrPostCallback onMarksSummaryByCashGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarksSummaryGetDelegate;
        
        private EndOperationDelegate onEndMarksSummaryGetDelegate;
        
        private System.Threading.SendOrPostCallback onMarksSummaryGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MarksServiceClient() {
        }
        
        public MarksServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarksServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarksServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarksServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<MarkAsOfSetCompletedEventArgs> MarkAsOfSetCompleted;
        
        public event System.EventHandler<MarkIsExistGetCompletedEventArgs> MarkIsExistGetCompleted;
        
        public event System.EventHandler<MarkSetCompletedEventArgs> MarkSetCompleted;
        
        public event System.EventHandler<MarksGetCompletedEventArgs> MarksGetCompleted;
        
        public event System.EventHandler<MarksSummaryByCashGetCompletedEventArgs> MarksSummaryByCashGetCompleted;
        
        public event System.EventHandler<MarksSummaryGetCompletedEventArgs> MarksSummaryGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceMarks.IMarksService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarkAsOfSet(string tradeDate, string settleDate, string bookGroup, string book, string contractId, string contractType, string price, string markId, string deliveryCode, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkAsOfSet(tradeDate, settleDate, bookGroup, book, contractId, contractType, price, markId, deliveryCode, actUserId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int WorldWideClient.ServiceMarks.IMarksService.EndMarkAsOfSet(System.IAsyncResult result) {
            return base.Channel.EndMarkAsOfSet(result);
        }
        
        private System.IAsyncResult OnBeginMarkAsOfSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tradeDate = ((string)(inValues[0]));
            string settleDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string book = ((string)(inValues[3]));
            string contractId = ((string)(inValues[4]));
            string contractType = ((string)(inValues[5]));
            string price = ((string)(inValues[6]));
            string markId = ((string)(inValues[7]));
            string deliveryCode = ((string)(inValues[8]));
            string actUserId = ((string)(inValues[9]));
            string userId = ((string)(inValues[10]));
            string userPassword = ((string)(inValues[11]));
            string functionPath = ((string)(inValues[12]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarkAsOfSet(tradeDate, settleDate, bookGroup, book, contractId, contractType, price, markId, deliveryCode, actUserId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarkAsOfSet(System.IAsyncResult result) {
            int retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarkAsOfSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkAsOfSetCompleted(object state) {
            if ((this.MarkAsOfSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkAsOfSetCompleted(this, new MarkAsOfSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkAsOfSetAsync(string tradeDate, string settleDate, string bookGroup, string book, string contractId, string contractType, string price, string markId, string deliveryCode, string actUserId, string userId, string userPassword, string functionPath) {
            this.MarkAsOfSetAsync(tradeDate, settleDate, bookGroup, book, contractId, contractType, price, markId, deliveryCode, actUserId, userId, userPassword, functionPath, null);
        }
        
        public void MarkAsOfSetAsync(string tradeDate, string settleDate, string bookGroup, string book, string contractId, string contractType, string price, string markId, string deliveryCode, string actUserId, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginMarkAsOfSetDelegate == null)) {
                this.onBeginMarkAsOfSetDelegate = new BeginOperationDelegate(this.OnBeginMarkAsOfSet);
            }
            if ((this.onEndMarkAsOfSetDelegate == null)) {
                this.onEndMarkAsOfSetDelegate = new EndOperationDelegate(this.OnEndMarkAsOfSet);
            }
            if ((this.onMarkAsOfSetCompletedDelegate == null)) {
                this.onMarkAsOfSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkAsOfSetCompleted);
            }
            base.InvokeAsync(this.onBeginMarkAsOfSetDelegate, new object[] {
                        tradeDate,
                        settleDate,
                        bookGroup,
                        book,
                        contractId,
                        contractType,
                        price,
                        markId,
                        deliveryCode,
                        actUserId,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarkAsOfSetDelegate, this.onMarkAsOfSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarkIsExistGet(string bizDate, string bookGroup, string book, string contractId, string contractType, string secId, string amount, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkIsExistGet(bizDate, bookGroup, book, contractId, contractType, secId, amount, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceMarks.IMarksService.EndMarkIsExistGet(System.IAsyncResult result) {
            return base.Channel.EndMarkIsExistGet(result);
        }
        
        private System.IAsyncResult OnBeginMarkIsExistGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string book = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            string contractType = ((string)(inValues[4]));
            string secId = ((string)(inValues[5]));
            string amount = ((string)(inValues[6]));
            string userId = ((string)(inValues[7]));
            string userPassword = ((string)(inValues[8]));
            string functionPath = ((string)(inValues[9]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarkIsExistGet(bizDate, bookGroup, book, contractId, contractType, secId, amount, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarkIsExistGet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarkIsExistGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkIsExistGetCompleted(object state) {
            if ((this.MarkIsExistGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkIsExistGetCompleted(this, new MarkIsExistGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkIsExistGetAsync(string bizDate, string bookGroup, string book, string contractId, string contractType, string secId, string amount, string userId, string userPassword, string functionPath) {
            this.MarkIsExistGetAsync(bizDate, bookGroup, book, contractId, contractType, secId, amount, userId, userPassword, functionPath, null);
        }
        
        public void MarkIsExistGetAsync(string bizDate, string bookGroup, string book, string contractId, string contractType, string secId, string amount, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginMarkIsExistGetDelegate == null)) {
                this.onBeginMarkIsExistGetDelegate = new BeginOperationDelegate(this.OnBeginMarkIsExistGet);
            }
            if ((this.onEndMarkIsExistGetDelegate == null)) {
                this.onEndMarkIsExistGetDelegate = new EndOperationDelegate(this.OnEndMarkIsExistGet);
            }
            if ((this.onMarkIsExistGetCompletedDelegate == null)) {
                this.onMarkIsExistGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkIsExistGetCompleted);
            }
            base.InvokeAsync(this.onBeginMarkIsExistGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        book,
                        contractId,
                        contractType,
                        secId,
                        amount,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarkIsExistGetDelegate, this.onMarkIsExistGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarkSet(
                    string markId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string secId, 
                    string amount, 
                    string openDate, 
                    string settleDate, 
                    string deliveryCode, 
                    string actUserId, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginMarkSet(markId, bizDate, bookGroup, book, contractId, contractType, secId, amount, openDate, settleDate, deliveryCode, actUserId, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceMarks.IMarksService.EndMarkSet(System.IAsyncResult result) {
            return base.Channel.EndMarkSet(result);
        }
        
        private System.IAsyncResult OnBeginMarkSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string markId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string book = ((string)(inValues[3]));
            string contractId = ((string)(inValues[4]));
            string contractType = ((string)(inValues[5]));
            string secId = ((string)(inValues[6]));
            string amount = ((string)(inValues[7]));
            string openDate = ((string)(inValues[8]));
            string settleDate = ((string)(inValues[9]));
            string deliveryCode = ((string)(inValues[10]));
            string actUserId = ((string)(inValues[11]));
            bool isActive = ((bool)(inValues[12]));
            string userId = ((string)(inValues[13]));
            string userPassword = ((string)(inValues[14]));
            string functionPath = ((string)(inValues[15]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarkSet(markId, bizDate, bookGroup, book, contractId, contractType, secId, amount, openDate, settleDate, deliveryCode, actUserId, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarkSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarkSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkSetCompleted(object state) {
            if ((this.MarkSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkSetCompleted(this, new MarkSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkSetAsync(
                    string markId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string secId, 
                    string amount, 
                    string openDate, 
                    string settleDate, 
                    string deliveryCode, 
                    string actUserId, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.MarkSetAsync(markId, bizDate, bookGroup, book, contractId, contractType, secId, amount, openDate, settleDate, deliveryCode, actUserId, isActive, userId, userPassword, functionPath, null);
        }
        
        public void MarkSetAsync(
                    string markId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string secId, 
                    string amount, 
                    string openDate, 
                    string settleDate, 
                    string deliveryCode, 
                    string actUserId, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginMarkSetDelegate == null)) {
                this.onBeginMarkSetDelegate = new BeginOperationDelegate(this.OnBeginMarkSet);
            }
            if ((this.onEndMarkSetDelegate == null)) {
                this.onEndMarkSetDelegate = new EndOperationDelegate(this.OnEndMarkSet);
            }
            if ((this.onMarkSetCompletedDelegate == null)) {
                this.onMarkSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkSetCompleted);
            }
            base.InvokeAsync(this.onBeginMarkSetDelegate, new object[] {
                        markId,
                        bizDate,
                        bookGroup,
                        book,
                        contractId,
                        contractType,
                        secId,
                        amount,
                        openDate,
                        settleDate,
                        deliveryCode,
                        actUserId,
                        isActive,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarkSetDelegate, this.onMarkSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarksGet(string markId, string bizDate, string contractId, string bookGroup, short utcOffset, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarksGet(markId, bizDate, contractId, bookGroup, utcOffset, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceMarks.IMarksService.EndMarksGet(System.IAsyncResult result) {
            return base.Channel.EndMarksGet(result);
        }
        
        private System.IAsyncResult OnBeginMarksGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string markId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string contractId = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            short utcOffset = ((short)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarksGet(markId, bizDate, contractId, bookGroup, utcOffset, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarksGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarksGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarksGetCompleted(object state) {
            if ((this.MarksGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarksGetCompleted(this, new MarksGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarksGetAsync(string markId, string bizDate, string contractId, string bookGroup, short utcOffset, string userId, string userPassword, string functionPath) {
            this.MarksGetAsync(markId, bizDate, contractId, bookGroup, utcOffset, userId, userPassword, functionPath, null);
        }
        
        public void MarksGetAsync(string markId, string bizDate, string contractId, string bookGroup, short utcOffset, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginMarksGetDelegate == null)) {
                this.onBeginMarksGetDelegate = new BeginOperationDelegate(this.OnBeginMarksGet);
            }
            if ((this.onEndMarksGetDelegate == null)) {
                this.onEndMarksGetDelegate = new EndOperationDelegate(this.OnEndMarksGet);
            }
            if ((this.onMarksGetCompletedDelegate == null)) {
                this.onMarksGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarksGetCompleted);
            }
            base.InvokeAsync(this.onBeginMarksGetDelegate, new object[] {
                        markId,
                        bizDate,
                        contractId,
                        bookGroup,
                        utcOffset,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarksGetDelegate, this.onMarksGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarksSummaryByCashGet(string markId, string bizDate, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarksSummaryByCashGet(markId, bizDate, contractId, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceMarks.IMarksService.EndMarksSummaryByCashGet(System.IAsyncResult result) {
            return base.Channel.EndMarksSummaryByCashGet(result);
        }
        
        private System.IAsyncResult OnBeginMarksSummaryByCashGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string markId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string contractId = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarksSummaryByCashGet(markId, bizDate, contractId, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarksSummaryByCashGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarksSummaryByCashGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarksSummaryByCashGetCompleted(object state) {
            if ((this.MarksSummaryByCashGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarksSummaryByCashGetCompleted(this, new MarksSummaryByCashGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarksSummaryByCashGetAsync(string markId, string bizDate, string contractId, string bookGroup, string userId, string userPassword, string functionPath) {
            this.MarksSummaryByCashGetAsync(markId, bizDate, contractId, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void MarksSummaryByCashGetAsync(string markId, string bizDate, string contractId, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginMarksSummaryByCashGetDelegate == null)) {
                this.onBeginMarksSummaryByCashGetDelegate = new BeginOperationDelegate(this.OnBeginMarksSummaryByCashGet);
            }
            if ((this.onEndMarksSummaryByCashGetDelegate == null)) {
                this.onEndMarksSummaryByCashGetDelegate = new EndOperationDelegate(this.OnEndMarksSummaryByCashGet);
            }
            if ((this.onMarksSummaryByCashGetCompletedDelegate == null)) {
                this.onMarksSummaryByCashGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarksSummaryByCashGetCompleted);
            }
            base.InvokeAsync(this.onBeginMarksSummaryByCashGetDelegate, new object[] {
                        markId,
                        bizDate,
                        contractId,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarksSummaryByCashGetDelegate, this.onMarksSummaryByCashGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceMarks.IMarksService.BeginMarksSummaryGet(string markId, string bizDate, string bizDateFormat, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarksSummaryGet(markId, bizDate, bizDateFormat, contractId, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceMarks.IMarksService.EndMarksSummaryGet(System.IAsyncResult result) {
            return base.Channel.EndMarksSummaryGet(result);
        }
        
        private System.IAsyncResult OnBeginMarksSummaryGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string markId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bizDateFormat = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            string bookGroup = ((string)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceMarks.IMarksService)(this)).BeginMarksSummaryGet(markId, bizDate, bizDateFormat, contractId, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndMarksSummaryGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceMarks.IMarksService)(this)).EndMarksSummaryGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarksSummaryGetCompleted(object state) {
            if ((this.MarksSummaryGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarksSummaryGetCompleted(this, new MarksSummaryGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarksSummaryGetAsync(string markId, string bizDate, string bizDateFormat, string contractId, string bookGroup, string userId, string userPassword, string functionPath) {
            this.MarksSummaryGetAsync(markId, bizDate, bizDateFormat, contractId, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void MarksSummaryGetAsync(string markId, string bizDate, string bizDateFormat, string contractId, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginMarksSummaryGetDelegate == null)) {
                this.onBeginMarksSummaryGetDelegate = new BeginOperationDelegate(this.OnBeginMarksSummaryGet);
            }
            if ((this.onEndMarksSummaryGetDelegate == null)) {
                this.onEndMarksSummaryGetDelegate = new EndOperationDelegate(this.OnEndMarksSummaryGet);
            }
            if ((this.onMarksSummaryGetCompletedDelegate == null)) {
                this.onMarksSummaryGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarksSummaryGetCompleted);
            }
            base.InvokeAsync(this.onBeginMarksSummaryGetDelegate, new object[] {
                        markId,
                        bizDate,
                        bizDateFormat,
                        contractId,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndMarksSummaryGetDelegate, this.onMarksSummaryGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceMarks.IMarksService CreateChannel() {
            return new MarksServiceClientChannel(this);
        }
        
        private class MarksServiceClientChannel : ChannelBase<WorldWideClient.ServiceMarks.IMarksService>, WorldWideClient.ServiceMarks.IMarksService {
            
            public MarksServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceMarks.IMarksService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarkAsOfSet(string tradeDate, string settleDate, string bookGroup, string book, string contractId, string contractType, string price, string markId, string deliveryCode, string actUserId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[13];
                _args[0] = tradeDate;
                _args[1] = settleDate;
                _args[2] = bookGroup;
                _args[3] = book;
                _args[4] = contractId;
                _args[5] = contractType;
                _args[6] = price;
                _args[7] = markId;
                _args[8] = deliveryCode;
                _args[9] = actUserId;
                _args[10] = userId;
                _args[11] = userPassword;
                _args[12] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarkAsOfSet", _args, callback, asyncState);
                return _result;
            }
            
            public int EndMarkAsOfSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("MarkAsOfSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarkIsExistGet(string bizDate, string bookGroup, string book, string contractId, string contractType, string secId, string amount, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = book;
                _args[3] = contractId;
                _args[4] = contractType;
                _args[5] = secId;
                _args[6] = amount;
                _args[7] = userId;
                _args[8] = userPassword;
                _args[9] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarkIsExistGet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndMarkIsExistGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("MarkIsExistGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarkSet(
                        string markId, 
                        string bizDate, 
                        string bookGroup, 
                        string book, 
                        string contractId, 
                        string contractType, 
                        string secId, 
                        string amount, 
                        string openDate, 
                        string settleDate, 
                        string deliveryCode, 
                        string actUserId, 
                        bool isActive, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[16];
                _args[0] = markId;
                _args[1] = bizDate;
                _args[2] = bookGroup;
                _args[3] = book;
                _args[4] = contractId;
                _args[5] = contractType;
                _args[6] = secId;
                _args[7] = amount;
                _args[8] = openDate;
                _args[9] = settleDate;
                _args[10] = deliveryCode;
                _args[11] = actUserId;
                _args[12] = isActive;
                _args[13] = userId;
                _args[14] = userPassword;
                _args[15] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarkSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndMarkSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("MarkSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarksGet(string markId, string bizDate, string contractId, string bookGroup, short utcOffset, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = markId;
                _args[1] = bizDate;
                _args[2] = contractId;
                _args[3] = bookGroup;
                _args[4] = utcOffset;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarksGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndMarksGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("MarksGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarksSummaryByCashGet(string markId, string bizDate, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = markId;
                _args[1] = bizDate;
                _args[2] = contractId;
                _args[3] = bookGroup;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarksSummaryByCashGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndMarksSummaryByCashGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("MarksSummaryByCashGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarksSummaryGet(string markId, string bizDate, string bizDateFormat, string contractId, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = markId;
                _args[1] = bizDate;
                _args[2] = bizDateFormat;
                _args[3] = contractId;
                _args[4] = bookGroup;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("MarksSummaryGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndMarksSummaryGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("MarksSummaryGet", _args, result)));
                return _result;
            }
        }
    }
}
