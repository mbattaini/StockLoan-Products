//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceRecalls {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRecalls.IRecallsService")]
    public interface IRecallsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRecallsService/GetSourceIP", ReplyAction="http://tempuri.org/IRecallsService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRecallsService/RecallSet", ReplyAction="http://tempuri.org/IRecallsService/RecallSetResponse")]
        System.IAsyncResult BeginRecallSet(
                    string recallId, 
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string openDateTime, 
                    string reasonCode, 
                    string status, 
                    string actUserId, 
                    string sequenceNumber, 
                    string moveToDate, 
                    string buyInDate, 
                    string comment, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndRecallSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRecallsService/RecallsGet", ReplyAction="http://tempuri.org/IRecallsService/RecallsGetResponse")]
        System.IAsyncResult BeginRecallsGet(string bizDate, string recallId, short utcOffSet, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndRecallsGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecallsServiceChannel : WorldWideClient.ServiceRecalls.IRecallsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecallSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecallSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecallsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecallsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecallsServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceRecalls.IRecallsService>, WorldWideClient.ServiceRecalls.IRecallsService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecallSetDelegate;
        
        private EndOperationDelegate onEndRecallSetDelegate;
        
        private System.Threading.SendOrPostCallback onRecallSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecallsGetDelegate;
        
        private EndOperationDelegate onEndRecallsGetDelegate;
        
        private System.Threading.SendOrPostCallback onRecallsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RecallsServiceClient() {
        }
        
        public RecallsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecallsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecallsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecallsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<RecallSetCompletedEventArgs> RecallSetCompleted;
        
        public event System.EventHandler<RecallsGetCompletedEventArgs> RecallsGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceRecalls.IRecallsService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceRecalls.IRecallsService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceRecalls.IRecallsService.BeginRecallSet(
                    string recallId, 
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string openDateTime, 
                    string reasonCode, 
                    string status, 
                    string actUserId, 
                    string sequenceNumber, 
                    string moveToDate, 
                    string buyInDate, 
                    string comment, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginRecallSet(recallId, bizDate, bookGroup, contractId, contractType, book, secId, quantity, openDateTime, reasonCode, status, actUserId, sequenceNumber, moveToDate, buyInDate, comment, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceRecalls.IRecallsService.EndRecallSet(System.IAsyncResult result) {
            return base.Channel.EndRecallSet(result);
        }
        
        private System.IAsyncResult OnBeginRecallSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string recallId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            string contractType = ((string)(inValues[4]));
            string book = ((string)(inValues[5]));
            string secId = ((string)(inValues[6]));
            string quantity = ((string)(inValues[7]));
            string openDateTime = ((string)(inValues[8]));
            string reasonCode = ((string)(inValues[9]));
            string status = ((string)(inValues[10]));
            string actUserId = ((string)(inValues[11]));
            string sequenceNumber = ((string)(inValues[12]));
            string moveToDate = ((string)(inValues[13]));
            string buyInDate = ((string)(inValues[14]));
            string comment = ((string)(inValues[15]));
            bool isActive = ((bool)(inValues[16]));
            string userId = ((string)(inValues[17]));
            string userPassword = ((string)(inValues[18]));
            string functionPath = ((string)(inValues[19]));
            return ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).BeginRecallSet(recallId, bizDate, bookGroup, contractId, contractType, book, secId, quantity, openDateTime, reasonCode, status, actUserId, sequenceNumber, moveToDate, buyInDate, comment, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndRecallSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).EndRecallSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecallSetCompleted(object state) {
            if ((this.RecallSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecallSetCompleted(this, new RecallSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecallSetAsync(
                    string recallId, 
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string openDateTime, 
                    string reasonCode, 
                    string status, 
                    string actUserId, 
                    string sequenceNumber, 
                    string moveToDate, 
                    string buyInDate, 
                    string comment, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.RecallSetAsync(recallId, bizDate, bookGroup, contractId, contractType, book, secId, quantity, openDateTime, reasonCode, status, actUserId, sequenceNumber, moveToDate, buyInDate, comment, isActive, userId, userPassword, functionPath, null);
        }
        
        public void RecallSetAsync(
                    string recallId, 
                    string bizDate, 
                    string bookGroup, 
                    string contractId, 
                    string contractType, 
                    string book, 
                    string secId, 
                    string quantity, 
                    string openDateTime, 
                    string reasonCode, 
                    string status, 
                    string actUserId, 
                    string sequenceNumber, 
                    string moveToDate, 
                    string buyInDate, 
                    string comment, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginRecallSetDelegate == null)) {
                this.onBeginRecallSetDelegate = new BeginOperationDelegate(this.OnBeginRecallSet);
            }
            if ((this.onEndRecallSetDelegate == null)) {
                this.onEndRecallSetDelegate = new EndOperationDelegate(this.OnEndRecallSet);
            }
            if ((this.onRecallSetCompletedDelegate == null)) {
                this.onRecallSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecallSetCompleted);
            }
            base.InvokeAsync(this.onBeginRecallSetDelegate, new object[] {
                        recallId,
                        bizDate,
                        bookGroup,
                        contractId,
                        contractType,
                        book,
                        secId,
                        quantity,
                        openDateTime,
                        reasonCode,
                        status,
                        actUserId,
                        sequenceNumber,
                        moveToDate,
                        buyInDate,
                        comment,
                        isActive,
                        userId,
                        userPassword,
                        functionPath}, this.onEndRecallSetDelegate, this.onRecallSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceRecalls.IRecallsService.BeginRecallsGet(string bizDate, string recallId, short utcOffSet, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecallsGet(bizDate, recallId, utcOffSet, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceRecalls.IRecallsService.EndRecallsGet(System.IAsyncResult result) {
            return base.Channel.EndRecallsGet(result);
        }
        
        private System.IAsyncResult OnBeginRecallsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string recallId = ((string)(inValues[1]));
            short utcOffSet = ((short)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).BeginRecallsGet(bizDate, recallId, utcOffSet, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndRecallsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceRecalls.IRecallsService)(this)).EndRecallsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecallsGetCompleted(object state) {
            if ((this.RecallsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecallsGetCompleted(this, new RecallsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecallsGetAsync(string bizDate, string recallId, short utcOffSet, string bookGroup, string userId, string userPassword, string functionPath) {
            this.RecallsGetAsync(bizDate, recallId, utcOffSet, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void RecallsGetAsync(string bizDate, string recallId, short utcOffSet, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginRecallsGetDelegate == null)) {
                this.onBeginRecallsGetDelegate = new BeginOperationDelegate(this.OnBeginRecallsGet);
            }
            if ((this.onEndRecallsGetDelegate == null)) {
                this.onEndRecallsGetDelegate = new EndOperationDelegate(this.OnEndRecallsGet);
            }
            if ((this.onRecallsGetCompletedDelegate == null)) {
                this.onRecallsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecallsGetCompleted);
            }
            base.InvokeAsync(this.onBeginRecallsGetDelegate, new object[] {
                        bizDate,
                        recallId,
                        utcOffSet,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndRecallsGetDelegate, this.onRecallsGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceRecalls.IRecallsService CreateChannel() {
            return new RecallsServiceClientChannel(this);
        }
        
        private class RecallsServiceClientChannel : ChannelBase<WorldWideClient.ServiceRecalls.IRecallsService>, WorldWideClient.ServiceRecalls.IRecallsService {
            
            public RecallsServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceRecalls.IRecallsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecallSet(
                        string recallId, 
                        string bizDate, 
                        string bookGroup, 
                        string contractId, 
                        string contractType, 
                        string book, 
                        string secId, 
                        string quantity, 
                        string openDateTime, 
                        string reasonCode, 
                        string status, 
                        string actUserId, 
                        string sequenceNumber, 
                        string moveToDate, 
                        string buyInDate, 
                        string comment, 
                        bool isActive, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[20];
                _args[0] = recallId;
                _args[1] = bizDate;
                _args[2] = bookGroup;
                _args[3] = contractId;
                _args[4] = contractType;
                _args[5] = book;
                _args[6] = secId;
                _args[7] = quantity;
                _args[8] = openDateTime;
                _args[9] = reasonCode;
                _args[10] = status;
                _args[11] = actUserId;
                _args[12] = sequenceNumber;
                _args[13] = moveToDate;
                _args[14] = buyInDate;
                _args[15] = comment;
                _args[16] = isActive;
                _args[17] = userId;
                _args[18] = userPassword;
                _args[19] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("RecallSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRecallSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RecallSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecallsGet(string bizDate, string recallId, short utcOffSet, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = bizDate;
                _args[1] = recallId;
                _args[2] = utcOffSet;
                _args[3] = bookGroup;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("RecallsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndRecallsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("RecallsGet", _args, result)));
                return _result;
            }
        }
    }
}
