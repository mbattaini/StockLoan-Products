//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceReturns {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReturns.IReturnsService")]
    public interface IReturnsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReturnsService/GetSourceIP", ReplyAction="http://tempuri.org/IReturnsService/GetSourceIPResponse")]
        System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReturnsService/ReturnAsOfSet", ReplyAction="http://tempuri.org/IReturnsService/ReturnAsOfSetResponse")]
        System.IAsyncResult BeginReturnAsOfSet(string tradeDate, string bookGroup, string book, string contractId, string contractType, string returnId, string quantity, string actUserId, string settleDate, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndReturnAsOfSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReturnsService/ReturnSet", ReplyAction="http://tempuri.org/IReturnsService/ReturnSetResponse")]
        System.IAsyncResult BeginReturnSet(
                    string returnId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string quantity, 
                    string actUserId, 
                    string settleDateProjected, 
                    string settleDateActual, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndReturnSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReturnsService/ReturnsGet", ReplyAction="http://tempuri.org/IReturnsService/ReturnsGetResponse")]
        System.IAsyncResult BeginReturnsGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndReturnsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReturnsService/ReturnsSummaryByCashGet", ReplyAction="http://tempuri.org/IReturnsService/ReturnsSummaryByCashGetResponse")]
        System.IAsyncResult BeginReturnsSummaryByCashGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndReturnsSummaryByCashGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReturnsServiceChannel : WorldWideClient.ServiceReturns.IReturnsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReturnAsOfSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnAsOfSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReturnSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReturnsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReturnsSummaryByCashGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnsSummaryByCashGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReturnsServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceReturns.IReturnsService>, WorldWideClient.ServiceReturns.IReturnsService {
        
        private BeginOperationDelegate onBeginGetSourceIPDelegate;
        
        private EndOperationDelegate onEndGetSourceIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnAsOfSetDelegate;
        
        private EndOperationDelegate onEndReturnAsOfSetDelegate;
        
        private System.Threading.SendOrPostCallback onReturnAsOfSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnSetDelegate;
        
        private EndOperationDelegate onEndReturnSetDelegate;
        
        private System.Threading.SendOrPostCallback onReturnSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnsGetDelegate;
        
        private EndOperationDelegate onEndReturnsGetDelegate;
        
        private System.Threading.SendOrPostCallback onReturnsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnsSummaryByCashGetDelegate;
        
        private EndOperationDelegate onEndReturnsSummaryByCashGetDelegate;
        
        private System.Threading.SendOrPostCallback onReturnsSummaryByCashGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ReturnsServiceClient() {
        }
        
        public ReturnsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReturnsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReturnsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReturnsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSourceIPCompletedEventArgs> GetSourceIPCompleted;
        
        public event System.EventHandler<ReturnAsOfSetCompletedEventArgs> ReturnAsOfSetCompleted;
        
        public event System.EventHandler<ReturnSetCompletedEventArgs> ReturnSetCompleted;
        
        public event System.EventHandler<ReturnsGetCompletedEventArgs> ReturnsGetCompleted;
        
        public event System.EventHandler<ReturnsSummaryByCashGetCompletedEventArgs> ReturnsSummaryByCashGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceReturns.IReturnsService.BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WorldWideClient.ServiceReturns.IReturnsService.EndGetSourceIP(System.IAsyncResult result) {
            return base.Channel.EndGetSourceIP(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WorldWideClient.ServiceReturns.IReturnsService)(this)).BeginGetSourceIP(callback, asyncState);
        }
        
        private object[] OnEndGetSourceIP(System.IAsyncResult result) {
            string retVal = ((WorldWideClient.ServiceReturns.IReturnsService)(this)).EndGetSourceIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceIPCompleted(object state) {
            if ((this.GetSourceIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceIPCompleted(this, new GetSourceIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceIPAsync() {
            this.GetSourceIPAsync(null);
        }
        
        public void GetSourceIPAsync(object userState) {
            if ((this.onBeginGetSourceIPDelegate == null)) {
                this.onBeginGetSourceIPDelegate = new BeginOperationDelegate(this.OnBeginGetSourceIP);
            }
            if ((this.onEndGetSourceIPDelegate == null)) {
                this.onEndGetSourceIPDelegate = new EndOperationDelegate(this.OnEndGetSourceIP);
            }
            if ((this.onGetSourceIPCompletedDelegate == null)) {
                this.onGetSourceIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceIPDelegate, null, this.onEndGetSourceIPDelegate, this.onGetSourceIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceReturns.IReturnsService.BeginReturnAsOfSet(string tradeDate, string bookGroup, string book, string contractId, string contractType, string returnId, string quantity, string actUserId, string settleDate, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnAsOfSet(tradeDate, bookGroup, book, contractId, contractType, returnId, quantity, actUserId, settleDate, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceReturns.IReturnsService.EndReturnAsOfSet(System.IAsyncResult result) {
            return base.Channel.EndReturnAsOfSet(result);
        }
        
        private System.IAsyncResult OnBeginReturnAsOfSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tradeDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string book = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            string contractType = ((string)(inValues[4]));
            string returnId = ((string)(inValues[5]));
            string quantity = ((string)(inValues[6]));
            string actUserId = ((string)(inValues[7]));
            string settleDate = ((string)(inValues[8]));
            string userId = ((string)(inValues[9]));
            string userPassword = ((string)(inValues[10]));
            string functionPath = ((string)(inValues[11]));
            return ((WorldWideClient.ServiceReturns.IReturnsService)(this)).BeginReturnAsOfSet(tradeDate, bookGroup, book, contractId, contractType, returnId, quantity, actUserId, settleDate, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndReturnAsOfSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceReturns.IReturnsService)(this)).EndReturnAsOfSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReturnAsOfSetCompleted(object state) {
            if ((this.ReturnAsOfSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnAsOfSetCompleted(this, new ReturnAsOfSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnAsOfSetAsync(string tradeDate, string bookGroup, string book, string contractId, string contractType, string returnId, string quantity, string actUserId, string settleDate, string userId, string userPassword, string functionPath) {
            this.ReturnAsOfSetAsync(tradeDate, bookGroup, book, contractId, contractType, returnId, quantity, actUserId, settleDate, userId, userPassword, functionPath, null);
        }
        
        public void ReturnAsOfSetAsync(string tradeDate, string bookGroup, string book, string contractId, string contractType, string returnId, string quantity, string actUserId, string settleDate, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginReturnAsOfSetDelegate == null)) {
                this.onBeginReturnAsOfSetDelegate = new BeginOperationDelegate(this.OnBeginReturnAsOfSet);
            }
            if ((this.onEndReturnAsOfSetDelegate == null)) {
                this.onEndReturnAsOfSetDelegate = new EndOperationDelegate(this.OnEndReturnAsOfSet);
            }
            if ((this.onReturnAsOfSetCompletedDelegate == null)) {
                this.onReturnAsOfSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnAsOfSetCompleted);
            }
            base.InvokeAsync(this.onBeginReturnAsOfSetDelegate, new object[] {
                        tradeDate,
                        bookGroup,
                        book,
                        contractId,
                        contractType,
                        returnId,
                        quantity,
                        actUserId,
                        settleDate,
                        userId,
                        userPassword,
                        functionPath}, this.onEndReturnAsOfSetDelegate, this.onReturnAsOfSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceReturns.IReturnsService.BeginReturnSet(
                    string returnId, 
                    string bizDate, 
                    string bookGroup, 
                    string book, 
                    string contractId, 
                    string contractType, 
                    string quantity, 
                    string actUserId, 
                    string settleDateProjected, 
                    string settleDateActual, 
                    bool isActive, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginReturnSet(returnId, bizDate, bookGroup, book, contractId, contractType, quantity, actUserId, settleDateProjected, settleDateActual, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceReturns.IReturnsService.EndReturnSet(System.IAsyncResult result) {
            return base.Channel.EndReturnSet(result);
        }
        
        private System.IAsyncResult OnBeginReturnSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string returnId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string book = ((string)(inValues[3]));
            string contractId = ((string)(inValues[4]));
            string contractType = ((string)(inValues[5]));
            string quantity = ((string)(inValues[6]));
            string actUserId = ((string)(inValues[7]));
            string settleDateProjected = ((string)(inValues[8]));
            string settleDateActual = ((string)(inValues[9]));
            bool isActive = ((bool)(inValues[10]));
            string userId = ((string)(inValues[11]));
            string userPassword = ((string)(inValues[12]));
            string functionPath = ((string)(inValues[13]));
            return ((WorldWideClient.ServiceReturns.IReturnsService)(this)).BeginReturnSet(returnId, bizDate, bookGroup, book, contractId, contractType, quantity, actUserId, settleDateProjected, settleDateActual, isActive, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndReturnSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceReturns.IReturnsService)(this)).EndReturnSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReturnSetCompleted(object state) {
            if ((this.ReturnSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnSetCompleted(this, new ReturnSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnSetAsync(string returnId, string bizDate, string bookGroup, string book, string contractId, string contractType, string quantity, string actUserId, string settleDateProjected, string settleDateActual, bool isActive, string userId, string userPassword, string functionPath) {
            this.ReturnSetAsync(returnId, bizDate, bookGroup, book, contractId, contractType, quantity, actUserId, settleDateProjected, settleDateActual, isActive, userId, userPassword, functionPath, null);
        }
        
        public void ReturnSetAsync(string returnId, string bizDate, string bookGroup, string book, string contractId, string contractType, string quantity, string actUserId, string settleDateProjected, string settleDateActual, bool isActive, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginReturnSetDelegate == null)) {
                this.onBeginReturnSetDelegate = new BeginOperationDelegate(this.OnBeginReturnSet);
            }
            if ((this.onEndReturnSetDelegate == null)) {
                this.onEndReturnSetDelegate = new EndOperationDelegate(this.OnEndReturnSet);
            }
            if ((this.onReturnSetCompletedDelegate == null)) {
                this.onReturnSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnSetCompleted);
            }
            base.InvokeAsync(this.onBeginReturnSetDelegate, new object[] {
                        returnId,
                        bizDate,
                        bookGroup,
                        book,
                        contractId,
                        contractType,
                        quantity,
                        actUserId,
                        settleDateProjected,
                        settleDateActual,
                        isActive,
                        userId,
                        userPassword,
                        functionPath}, this.onEndReturnSetDelegate, this.onReturnSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceReturns.IReturnsService.BeginReturnsGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnsGet(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceReturns.IReturnsService.EndReturnsGet(System.IAsyncResult result) {
            return base.Channel.EndReturnsGet(result);
        }
        
        private System.IAsyncResult OnBeginReturnsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string returnId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            short utcOffSet = ((short)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceReturns.IReturnsService)(this)).BeginReturnsGet(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndReturnsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceReturns.IReturnsService)(this)).EndReturnsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReturnsGetCompleted(object state) {
            if ((this.ReturnsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnsGetCompleted(this, new ReturnsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnsGetAsync(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath) {
            this.ReturnsGetAsync(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, null);
        }
        
        public void ReturnsGetAsync(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginReturnsGetDelegate == null)) {
                this.onBeginReturnsGetDelegate = new BeginOperationDelegate(this.OnBeginReturnsGet);
            }
            if ((this.onEndReturnsGetDelegate == null)) {
                this.onEndReturnsGetDelegate = new EndOperationDelegate(this.OnEndReturnsGet);
            }
            if ((this.onReturnsGetCompletedDelegate == null)) {
                this.onReturnsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnsGetCompleted);
            }
            base.InvokeAsync(this.onBeginReturnsGetDelegate, new object[] {
                        returnId,
                        bizDate,
                        bookGroup,
                        contractId,
                        utcOffSet,
                        userId,
                        userPassword,
                        functionPath}, this.onEndReturnsGetDelegate, this.onReturnsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceReturns.IReturnsService.BeginReturnsSummaryByCashGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnsSummaryByCashGet(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceReturns.IReturnsService.EndReturnsSummaryByCashGet(System.IAsyncResult result) {
            return base.Channel.EndReturnsSummaryByCashGet(result);
        }
        
        private System.IAsyncResult OnBeginReturnsSummaryByCashGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string returnId = ((string)(inValues[0]));
            string bizDate = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string contractId = ((string)(inValues[3]));
            short utcOffSet = ((short)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceReturns.IReturnsService)(this)).BeginReturnsSummaryByCashGet(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndReturnsSummaryByCashGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceReturns.IReturnsService)(this)).EndReturnsSummaryByCashGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReturnsSummaryByCashGetCompleted(object state) {
            if ((this.ReturnsSummaryByCashGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnsSummaryByCashGetCompleted(this, new ReturnsSummaryByCashGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnsSummaryByCashGetAsync(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath) {
            this.ReturnsSummaryByCashGetAsync(returnId, bizDate, bookGroup, contractId, utcOffSet, userId, userPassword, functionPath, null);
        }
        
        public void ReturnsSummaryByCashGetAsync(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginReturnsSummaryByCashGetDelegate == null)) {
                this.onBeginReturnsSummaryByCashGetDelegate = new BeginOperationDelegate(this.OnBeginReturnsSummaryByCashGet);
            }
            if ((this.onEndReturnsSummaryByCashGetDelegate == null)) {
                this.onEndReturnsSummaryByCashGetDelegate = new EndOperationDelegate(this.OnEndReturnsSummaryByCashGet);
            }
            if ((this.onReturnsSummaryByCashGetCompletedDelegate == null)) {
                this.onReturnsSummaryByCashGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnsSummaryByCashGetCompleted);
            }
            base.InvokeAsync(this.onBeginReturnsSummaryByCashGetDelegate, new object[] {
                        returnId,
                        bizDate,
                        bookGroup,
                        contractId,
                        utcOffSet,
                        userId,
                        userPassword,
                        functionPath}, this.onEndReturnsSummaryByCashGetDelegate, this.onReturnsSummaryByCashGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceReturns.IReturnsService CreateChannel() {
            return new ReturnsServiceClientChannel(this);
        }
        
        private class ReturnsServiceClientChannel : ChannelBase<WorldWideClient.ServiceReturns.IReturnsService>, WorldWideClient.ServiceReturns.IReturnsService {
            
            public ReturnsServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceReturns.IReturnsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSourceIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSourceIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSourceIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSourceIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReturnAsOfSet(string tradeDate, string bookGroup, string book, string contractId, string contractType, string returnId, string quantity, string actUserId, string settleDate, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[12];
                _args[0] = tradeDate;
                _args[1] = bookGroup;
                _args[2] = book;
                _args[3] = contractId;
                _args[4] = contractType;
                _args[5] = returnId;
                _args[6] = quantity;
                _args[7] = actUserId;
                _args[8] = settleDate;
                _args[9] = userId;
                _args[10] = userPassword;
                _args[11] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ReturnAsOfSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndReturnAsOfSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ReturnAsOfSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReturnSet(
                        string returnId, 
                        string bizDate, 
                        string bookGroup, 
                        string book, 
                        string contractId, 
                        string contractType, 
                        string quantity, 
                        string actUserId, 
                        string settleDateProjected, 
                        string settleDateActual, 
                        bool isActive, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[14];
                _args[0] = returnId;
                _args[1] = bizDate;
                _args[2] = bookGroup;
                _args[3] = book;
                _args[4] = contractId;
                _args[5] = contractType;
                _args[6] = quantity;
                _args[7] = actUserId;
                _args[8] = settleDateProjected;
                _args[9] = settleDateActual;
                _args[10] = isActive;
                _args[11] = userId;
                _args[12] = userPassword;
                _args[13] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ReturnSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndReturnSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ReturnSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReturnsGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = returnId;
                _args[1] = bizDate;
                _args[2] = bookGroup;
                _args[3] = contractId;
                _args[4] = utcOffSet;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ReturnsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndReturnsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ReturnsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReturnsSummaryByCashGet(string returnId, string bizDate, string bookGroup, string contractId, short utcOffSet, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = returnId;
                _args[1] = bizDate;
                _args[2] = bookGroup;
                _args[3] = contractId;
                _args[4] = utcOffSet;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("ReturnsSummaryByCashGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndReturnsSummaryByCashGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("ReturnsSummaryByCashGet", _args, result)));
                return _result;
            }
        }
    }
}
