//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceInventory {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceInventory.IInventoryService")]
    public interface IInventoryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/DesksGet", ReplyAction="http://tempuri.org/IInventoryService/DesksGetResponse")]
        System.IAsyncResult BeginDesksGet(string desk, string bookGroup, string sIsNotSubscriber, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDesksGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/DeskSet", ReplyAction="http://tempuri.org/IInventoryService/DeskSetResponse")]
        System.IAsyncResult BeginDeskSet(string desk, string firmCode, string deskTypeCode, string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndDeskSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/DeskTypesGet", ReplyAction="http://tempuri.org/IInventoryService/DeskTypesGetResponse")]
        System.IAsyncResult BeginDeskTypesGet(string deskTypeCode, string deskType, string sIsActive, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDeskTypesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/FirmsGet", ReplyAction="http://tempuri.org/IInventoryService/FirmsGetResponse")]
        System.IAsyncResult BeginFirmsGet(string firmCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndFirmsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/FirmSet", ReplyAction="http://tempuri.org/IInventoryService/FirmSetResponse")]
        System.IAsyncResult BeginFirmSet(string firmCode, string firm, string sIsActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndFirmSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryGet", ReplyAction="http://tempuri.org/IInventoryService/InventoryGetResponse")]
        System.IAsyncResult BeginInventoryGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInventoryGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryHistoryGet", ReplyAction="http://tempuri.org/IInventoryService/InventoryHistoryGetResponse")]
        System.IAsyncResult BeginInventoryHistoryGet(string bookGroup, string secId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInventoryHistoryGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryItemSet", ReplyAction="http://tempuri.org/IInventoryService/InventoryItemSetResponse")]
        System.IAsyncResult BeginInventoryItemSet(string bizDate, string desk, string secId, string rate, string quantity, string source, string sourceActor, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndInventoryItemSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryFileLayoutGet", ReplyAction="http://tempuri.org/IInventoryService/InventoryFileLayoutGetResponse")]
        System.IAsyncResult BeginInventoryFileLayoutGet(string bookGroupGet, string desk, string inventoryType, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInventoryFileLayoutGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryFileLayoutSet", ReplyAction="http://tempuri.org/IInventoryService/InventoryFileLayoutSetResponse")]
        System.IAsyncResult BeginInventoryFileLayoutSet(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string recordLength, 
                    string headerFlag, 
                    string dataFlag, 
                    string trailerFlag, 
                    string delimiter, 
                    string accountLocale, 
                    string accountOrdinal, 
                    string accountPosition, 
                    string accountLength, 
                    string secIdOrdinal, 
                    string secIdPosition, 
                    string secIdLength, 
                    string quantityOrdinal, 
                    string quantityPosition, 
                    string quantityLength, 
                    string rateOrdinal, 
                    string ratePosition, 
                    string rateLength, 
                    string recordCountOrdinal, 
                    string recordCountPosition, 
                    string recordCountLength, 
                    string bizDateDD, 
                    string bizDateMM, 
                    string bizDateYY, 
                    string actor, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndInventoryFileLayoutSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventoryRatesGet", ReplyAction="http://tempuri.org/IInventoryService/InventoryRatesGetResponse")]
        System.IAsyncResult BeginInventoryRatesGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInventoryRatesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventorySubscriptionsGet", ReplyAction="http://tempuri.org/IInventoryService/InventorySubscriptionsGetResponse")]
        System.IAsyncResult BeginInventorySubscriptionsGet(string bookGroupGet, string desk, string inventoryType, short utcOffset, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInventorySubscriptionsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInventoryService/InventorySubscriptionSet", ReplyAction="http://tempuri.org/IInventoryService/InventorySubscriptionSetResponse")]
        System.IAsyncResult BeginInventorySubscriptionSet(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string bizDate, 
                    string loadTime, 
                    string loadStatus, 
                    string items, 
                    string lastLoadedTime, 
                    string lastLoadedVersion, 
                    string loadBizDatePrior, 
                    string fileTime, 
                    string fileChecktime, 
                    string fileStatus, 
                    string fileName, 
                    string fileHost, 
                    string fileUserId, 
                    string filePassword, 
                    string mailAddress, 
                    string mailSubject, 
                    string comment, 
                    string actor, 
                    bool isActive, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndInventorySubscriptionSet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInventoryServiceChannel : WorldWideClient.ServiceInventory.IInventoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesksGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DesksGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeskSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeskSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeskTypesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeskTypesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FirmsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FirmsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FirmSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FirmSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryHistoryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryHistoryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryItemSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryItemSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryFileLayoutGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryFileLayoutGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryFileLayoutSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryFileLayoutSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryRatesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventoryRatesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventorySubscriptionsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventorySubscriptionsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventorySubscriptionSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InventorySubscriptionSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceInventory.IInventoryService>, WorldWideClient.ServiceInventory.IInventoryService {
        
        private BeginOperationDelegate onBeginDesksGetDelegate;
        
        private EndOperationDelegate onEndDesksGetDelegate;
        
        private System.Threading.SendOrPostCallback onDesksGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeskSetDelegate;
        
        private EndOperationDelegate onEndDeskSetDelegate;
        
        private System.Threading.SendOrPostCallback onDeskSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeskTypesGetDelegate;
        
        private EndOperationDelegate onEndDeskTypesGetDelegate;
        
        private System.Threading.SendOrPostCallback onDeskTypesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFirmsGetDelegate;
        
        private EndOperationDelegate onEndFirmsGetDelegate;
        
        private System.Threading.SendOrPostCallback onFirmsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFirmSetDelegate;
        
        private EndOperationDelegate onEndFirmSetDelegate;
        
        private System.Threading.SendOrPostCallback onFirmSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryGetDelegate;
        
        private EndOperationDelegate onEndInventoryGetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryHistoryGetDelegate;
        
        private EndOperationDelegate onEndInventoryHistoryGetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryHistoryGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryItemSetDelegate;
        
        private EndOperationDelegate onEndInventoryItemSetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryItemSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryFileLayoutGetDelegate;
        
        private EndOperationDelegate onEndInventoryFileLayoutGetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryFileLayoutGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryFileLayoutSetDelegate;
        
        private EndOperationDelegate onEndInventoryFileLayoutSetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryFileLayoutSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventoryRatesGetDelegate;
        
        private EndOperationDelegate onEndInventoryRatesGetDelegate;
        
        private System.Threading.SendOrPostCallback onInventoryRatesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventorySubscriptionsGetDelegate;
        
        private EndOperationDelegate onEndInventorySubscriptionsGetDelegate;
        
        private System.Threading.SendOrPostCallback onInventorySubscriptionsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInventorySubscriptionSetDelegate;
        
        private EndOperationDelegate onEndInventorySubscriptionSetDelegate;
        
        private System.Threading.SendOrPostCallback onInventorySubscriptionSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public InventoryServiceClient() {
        }
        
        public InventoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InventoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DesksGetCompletedEventArgs> DesksGetCompleted;
        
        public event System.EventHandler<DeskSetCompletedEventArgs> DeskSetCompleted;
        
        public event System.EventHandler<DeskTypesGetCompletedEventArgs> DeskTypesGetCompleted;
        
        public event System.EventHandler<FirmsGetCompletedEventArgs> FirmsGetCompleted;
        
        public event System.EventHandler<FirmSetCompletedEventArgs> FirmSetCompleted;
        
        public event System.EventHandler<InventoryGetCompletedEventArgs> InventoryGetCompleted;
        
        public event System.EventHandler<InventoryHistoryGetCompletedEventArgs> InventoryHistoryGetCompleted;
        
        public event System.EventHandler<InventoryItemSetCompletedEventArgs> InventoryItemSetCompleted;
        
        public event System.EventHandler<InventoryFileLayoutGetCompletedEventArgs> InventoryFileLayoutGetCompleted;
        
        public event System.EventHandler<InventoryFileLayoutSetCompletedEventArgs> InventoryFileLayoutSetCompleted;
        
        public event System.EventHandler<InventoryRatesGetCompletedEventArgs> InventoryRatesGetCompleted;
        
        public event System.EventHandler<InventorySubscriptionsGetCompletedEventArgs> InventorySubscriptionsGetCompleted;
        
        public event System.EventHandler<InventorySubscriptionSetCompletedEventArgs> InventorySubscriptionSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginDesksGet(string desk, string bookGroup, string sIsNotSubscriber, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDesksGet(desk, bookGroup, sIsNotSubscriber, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndDesksGet(System.IAsyncResult result) {
            return base.Channel.EndDesksGet(result);
        }
        
        private System.IAsyncResult OnBeginDesksGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string desk = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string sIsNotSubscriber = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string functionPath = ((string)(inValues[5]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginDesksGet(desk, bookGroup, sIsNotSubscriber, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDesksGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndDesksGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDesksGetCompleted(object state) {
            if ((this.DesksGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DesksGetCompleted(this, new DesksGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DesksGetAsync(string desk, string bookGroup, string sIsNotSubscriber, string userId, string userPassword, string functionPath) {
            this.DesksGetAsync(desk, bookGroup, sIsNotSubscriber, userId, userPassword, functionPath, null);
        }
        
        public void DesksGetAsync(string desk, string bookGroup, string sIsNotSubscriber, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginDesksGetDelegate == null)) {
                this.onBeginDesksGetDelegate = new BeginOperationDelegate(this.OnBeginDesksGet);
            }
            if ((this.onEndDesksGetDelegate == null)) {
                this.onEndDesksGetDelegate = new EndOperationDelegate(this.OnEndDesksGet);
            }
            if ((this.onDesksGetCompletedDelegate == null)) {
                this.onDesksGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDesksGetCompleted);
            }
            base.InvokeAsync(this.onBeginDesksGetDelegate, new object[] {
                        desk,
                        bookGroup,
                        sIsNotSubscriber,
                        userId,
                        userPassword,
                        functionPath}, this.onEndDesksGetDelegate, this.onDesksGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginDeskSet(string desk, string firmCode, string deskTypeCode, string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeskSet(desk, firmCode, deskTypeCode, countryCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceInventory.IInventoryService.EndDeskSet(System.IAsyncResult result) {
            return base.Channel.EndDeskSet(result);
        }
        
        private System.IAsyncResult OnBeginDeskSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string desk = ((string)(inValues[0]));
            string firmCode = ((string)(inValues[1]));
            string deskTypeCode = ((string)(inValues[2]));
            string countryCode = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string bookGroup = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginDeskSet(desk, firmCode, deskTypeCode, countryCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDeskSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndDeskSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeskSetCompleted(object state) {
            if ((this.DeskSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeskSetCompleted(this, new DeskSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeskSetAsync(string desk, string firmCode, string deskTypeCode, string countryCode, string userId, string userPassword, string bookGroup, string functionPath) {
            this.DeskSetAsync(desk, firmCode, deskTypeCode, countryCode, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void DeskSetAsync(string desk, string firmCode, string deskTypeCode, string countryCode, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginDeskSetDelegate == null)) {
                this.onBeginDeskSetDelegate = new BeginOperationDelegate(this.OnBeginDeskSet);
            }
            if ((this.onEndDeskSetDelegate == null)) {
                this.onEndDeskSetDelegate = new EndOperationDelegate(this.OnEndDeskSet);
            }
            if ((this.onDeskSetCompletedDelegate == null)) {
                this.onDeskSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeskSetCompleted);
            }
            base.InvokeAsync(this.onBeginDeskSetDelegate, new object[] {
                        desk,
                        firmCode,
                        deskTypeCode,
                        countryCode,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndDeskSetDelegate, this.onDeskSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginDeskTypesGet(string deskTypeCode, string deskType, string sIsActive, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeskTypesGet(deskTypeCode, deskType, sIsActive, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndDeskTypesGet(System.IAsyncResult result) {
            return base.Channel.EndDeskTypesGet(result);
        }
        
        private System.IAsyncResult OnBeginDeskTypesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deskTypeCode = ((string)(inValues[0]));
            string deskType = ((string)(inValues[1]));
            string sIsActive = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginDeskTypesGet(deskTypeCode, deskType, sIsActive, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDeskTypesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndDeskTypesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeskTypesGetCompleted(object state) {
            if ((this.DeskTypesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeskTypesGetCompleted(this, new DeskTypesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeskTypesGetAsync(string deskTypeCode, string deskType, string sIsActive, string bookGroup, string userId, string userPassword, string functionPath) {
            this.DeskTypesGetAsync(deskTypeCode, deskType, sIsActive, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void DeskTypesGetAsync(string deskTypeCode, string deskType, string sIsActive, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginDeskTypesGetDelegate == null)) {
                this.onBeginDeskTypesGetDelegate = new BeginOperationDelegate(this.OnBeginDeskTypesGet);
            }
            if ((this.onEndDeskTypesGetDelegate == null)) {
                this.onEndDeskTypesGetDelegate = new EndOperationDelegate(this.OnEndDeskTypesGet);
            }
            if ((this.onDeskTypesGetCompletedDelegate == null)) {
                this.onDeskTypesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeskTypesGetCompleted);
            }
            base.InvokeAsync(this.onBeginDeskTypesGetDelegate, new object[] {
                        deskTypeCode,
                        deskType,
                        sIsActive,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndDeskTypesGetDelegate, this.onDeskTypesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginFirmsGet(string firmCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFirmsGet(firmCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndFirmsGet(System.IAsyncResult result) {
            return base.Channel.EndFirmsGet(result);
        }
        
        private System.IAsyncResult OnBeginFirmsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firmCode = ((string)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string userPassword = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginFirmsGet(firmCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndFirmsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndFirmsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFirmsGetCompleted(object state) {
            if ((this.FirmsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FirmsGetCompleted(this, new FirmsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FirmsGetAsync(string firmCode, string userId, string userPassword, string bookGroup, string functionPath) {
            this.FirmsGetAsync(firmCode, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void FirmsGetAsync(string firmCode, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginFirmsGetDelegate == null)) {
                this.onBeginFirmsGetDelegate = new BeginOperationDelegate(this.OnBeginFirmsGet);
            }
            if ((this.onEndFirmsGetDelegate == null)) {
                this.onEndFirmsGetDelegate = new EndOperationDelegate(this.OnEndFirmsGet);
            }
            if ((this.onFirmsGetCompletedDelegate == null)) {
                this.onFirmsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFirmsGetCompleted);
            }
            base.InvokeAsync(this.onBeginFirmsGetDelegate, new object[] {
                        firmCode,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndFirmsGetDelegate, this.onFirmsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginFirmSet(string firmCode, string firm, string sIsActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFirmSet(firmCode, firm, sIsActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceInventory.IInventoryService.EndFirmSet(System.IAsyncResult result) {
            return base.Channel.EndFirmSet(result);
        }
        
        private System.IAsyncResult OnBeginFirmSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firmCode = ((string)(inValues[0]));
            string firm = ((string)(inValues[1]));
            string sIsActive = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginFirmSet(firmCode, firm, sIsActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndFirmSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndFirmSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFirmSetCompleted(object state) {
            if ((this.FirmSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FirmSetCompleted(this, new FirmSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FirmSetAsync(string firmCode, string firm, string sIsActive, string userId, string userPassword, string bookGroup, string functionPath) {
            this.FirmSetAsync(firmCode, firm, sIsActive, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void FirmSetAsync(string firmCode, string firm, string sIsActive, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginFirmSetDelegate == null)) {
                this.onBeginFirmSetDelegate = new BeginOperationDelegate(this.OnBeginFirmSet);
            }
            if ((this.onEndFirmSetDelegate == null)) {
                this.onEndFirmSetDelegate = new EndOperationDelegate(this.OnEndFirmSet);
            }
            if ((this.onFirmSetCompletedDelegate == null)) {
                this.onFirmSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFirmSetCompleted);
            }
            base.InvokeAsync(this.onBeginFirmSetDelegate, new object[] {
                        firmCode,
                        firm,
                        sIsActive,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndFirmSetDelegate, this.onFirmSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventoryGet(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndInventoryGet(System.IAsyncResult result) {
            return base.Channel.EndInventoryGet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string desk = ((string)(inValues[2]));
            string secId = ((string)(inValues[3]));
            string version = ((string)(inValues[4]));
            string source = ((string)(inValues[5]));
            string sourceActor = ((string)(inValues[6]));
            string userId = ((string)(inValues[7]));
            string userPassword = ((string)(inValues[8]));
            string functionPath = ((string)(inValues[9]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryGet(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryGetCompleted(object state) {
            if ((this.InventoryGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryGetCompleted(this, new InventoryGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryGetAsync(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath) {
            this.InventoryGetAsync(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, null);
        }
        
        public void InventoryGetAsync(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginInventoryGetDelegate == null)) {
                this.onBeginInventoryGetDelegate = new BeginOperationDelegate(this.OnBeginInventoryGet);
            }
            if ((this.onEndInventoryGetDelegate == null)) {
                this.onEndInventoryGetDelegate = new EndOperationDelegate(this.OnEndInventoryGet);
            }
            if ((this.onInventoryGetCompletedDelegate == null)) {
                this.onInventoryGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryGetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        desk,
                        secId,
                        version,
                        source,
                        sourceActor,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventoryGetDelegate, this.onInventoryGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryHistoryGet(string bookGroup, string secId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventoryHistoryGet(bookGroup, secId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndInventoryHistoryGet(System.IAsyncResult result) {
            return base.Channel.EndInventoryHistoryGet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryHistoryGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bookGroup = ((string)(inValues[0]));
            string secId = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryHistoryGet(bookGroup, secId, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryHistoryGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryHistoryGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryHistoryGetCompleted(object state) {
            if ((this.InventoryHistoryGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryHistoryGetCompleted(this, new InventoryHistoryGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryHistoryGetAsync(string bookGroup, string secId, string userId, string userPassword, string functionPath) {
            this.InventoryHistoryGetAsync(bookGroup, secId, userId, userPassword, functionPath, null);
        }
        
        public void InventoryHistoryGetAsync(string bookGroup, string secId, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginInventoryHistoryGetDelegate == null)) {
                this.onBeginInventoryHistoryGetDelegate = new BeginOperationDelegate(this.OnBeginInventoryHistoryGet);
            }
            if ((this.onEndInventoryHistoryGetDelegate == null)) {
                this.onEndInventoryHistoryGetDelegate = new EndOperationDelegate(this.OnEndInventoryHistoryGet);
            }
            if ((this.onInventoryHistoryGetCompletedDelegate == null)) {
                this.onInventoryHistoryGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryHistoryGetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryHistoryGetDelegate, new object[] {
                        bookGroup,
                        secId,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventoryHistoryGetDelegate, this.onInventoryHistoryGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryItemSet(string bizDate, string desk, string secId, string rate, string quantity, string source, string sourceActor, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventoryItemSet(bizDate, desk, secId, rate, quantity, source, sourceActor, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceInventory.IInventoryService.EndInventoryItemSet(System.IAsyncResult result) {
            return base.Channel.EndInventoryItemSet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryItemSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string desk = ((string)(inValues[1]));
            string secId = ((string)(inValues[2]));
            string rate = ((string)(inValues[3]));
            string quantity = ((string)(inValues[4]));
            string source = ((string)(inValues[5]));
            string sourceActor = ((string)(inValues[6]));
            string userId = ((string)(inValues[7]));
            string userPassword = ((string)(inValues[8]));
            string bookGroup = ((string)(inValues[9]));
            string functionPath = ((string)(inValues[10]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryItemSet(bizDate, desk, secId, rate, quantity, source, sourceActor, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryItemSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryItemSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryItemSetCompleted(object state) {
            if ((this.InventoryItemSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryItemSetCompleted(this, new InventoryItemSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryItemSetAsync(string bizDate, string desk, string secId, string rate, string quantity, string source, string sourceActor, string userId, string userPassword, string bookGroup, string functionPath) {
            this.InventoryItemSetAsync(bizDate, desk, secId, rate, quantity, source, sourceActor, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void InventoryItemSetAsync(string bizDate, string desk, string secId, string rate, string quantity, string source, string sourceActor, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginInventoryItemSetDelegate == null)) {
                this.onBeginInventoryItemSetDelegate = new BeginOperationDelegate(this.OnBeginInventoryItemSet);
            }
            if ((this.onEndInventoryItemSetDelegate == null)) {
                this.onEndInventoryItemSetDelegate = new EndOperationDelegate(this.OnEndInventoryItemSet);
            }
            if ((this.onInventoryItemSetCompletedDelegate == null)) {
                this.onInventoryItemSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryItemSetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryItemSetDelegate, new object[] {
                        bizDate,
                        desk,
                        secId,
                        rate,
                        quantity,
                        source,
                        sourceActor,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndInventoryItemSetDelegate, this.onInventoryItemSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryFileLayoutGet(string bookGroupGet, string desk, string inventoryType, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventoryFileLayoutGet(bookGroupGet, desk, inventoryType, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndInventoryFileLayoutGet(System.IAsyncResult result) {
            return base.Channel.EndInventoryFileLayoutGet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryFileLayoutGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bookGroupGet = ((string)(inValues[0]));
            string desk = ((string)(inValues[1]));
            string inventoryType = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryFileLayoutGet(bookGroupGet, desk, inventoryType, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryFileLayoutGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryFileLayoutGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryFileLayoutGetCompleted(object state) {
            if ((this.InventoryFileLayoutGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryFileLayoutGetCompleted(this, new InventoryFileLayoutGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryFileLayoutGetAsync(string bookGroupGet, string desk, string inventoryType, string bookGroup, string userId, string userPassword, string functionPath) {
            this.InventoryFileLayoutGetAsync(bookGroupGet, desk, inventoryType, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void InventoryFileLayoutGetAsync(string bookGroupGet, string desk, string inventoryType, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginInventoryFileLayoutGetDelegate == null)) {
                this.onBeginInventoryFileLayoutGetDelegate = new BeginOperationDelegate(this.OnBeginInventoryFileLayoutGet);
            }
            if ((this.onEndInventoryFileLayoutGetDelegate == null)) {
                this.onEndInventoryFileLayoutGetDelegate = new EndOperationDelegate(this.OnEndInventoryFileLayoutGet);
            }
            if ((this.onInventoryFileLayoutGetCompletedDelegate == null)) {
                this.onInventoryFileLayoutGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryFileLayoutGetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryFileLayoutGetDelegate, new object[] {
                        bookGroupGet,
                        desk,
                        inventoryType,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventoryFileLayoutGetDelegate, this.onInventoryFileLayoutGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryFileLayoutSet(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string recordLength, 
                    string headerFlag, 
                    string dataFlag, 
                    string trailerFlag, 
                    string delimiter, 
                    string accountLocale, 
                    string accountOrdinal, 
                    string accountPosition, 
                    string accountLength, 
                    string secIdOrdinal, 
                    string secIdPosition, 
                    string secIdLength, 
                    string quantityOrdinal, 
                    string quantityPosition, 
                    string quantityLength, 
                    string rateOrdinal, 
                    string ratePosition, 
                    string rateLength, 
                    string recordCountOrdinal, 
                    string recordCountPosition, 
                    string recordCountLength, 
                    string bizDateDD, 
                    string bizDateMM, 
                    string bizDateYY, 
                    string actor, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginInventoryFileLayoutSet(bookGroupSet, desk, inventoryType, recordLength, headerFlag, dataFlag, trailerFlag, delimiter, accountLocale, accountOrdinal, accountPosition, accountLength, secIdOrdinal, secIdPosition, secIdLength, quantityOrdinal, quantityPosition, quantityLength, rateOrdinal, ratePosition, rateLength, recordCountOrdinal, recordCountPosition, recordCountLength, bizDateDD, bizDateMM, bizDateYY, actor, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceInventory.IInventoryService.EndInventoryFileLayoutSet(System.IAsyncResult result) {
            return base.Channel.EndInventoryFileLayoutSet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryFileLayoutSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bookGroupSet = ((string)(inValues[0]));
            string desk = ((string)(inValues[1]));
            string inventoryType = ((string)(inValues[2]));
            string recordLength = ((string)(inValues[3]));
            string headerFlag = ((string)(inValues[4]));
            string dataFlag = ((string)(inValues[5]));
            string trailerFlag = ((string)(inValues[6]));
            string delimiter = ((string)(inValues[7]));
            string accountLocale = ((string)(inValues[8]));
            string accountOrdinal = ((string)(inValues[9]));
            string accountPosition = ((string)(inValues[10]));
            string accountLength = ((string)(inValues[11]));
            string secIdOrdinal = ((string)(inValues[12]));
            string secIdPosition = ((string)(inValues[13]));
            string secIdLength = ((string)(inValues[14]));
            string quantityOrdinal = ((string)(inValues[15]));
            string quantityPosition = ((string)(inValues[16]));
            string quantityLength = ((string)(inValues[17]));
            string rateOrdinal = ((string)(inValues[18]));
            string ratePosition = ((string)(inValues[19]));
            string rateLength = ((string)(inValues[20]));
            string recordCountOrdinal = ((string)(inValues[21]));
            string recordCountPosition = ((string)(inValues[22]));
            string recordCountLength = ((string)(inValues[23]));
            string bizDateDD = ((string)(inValues[24]));
            string bizDateMM = ((string)(inValues[25]));
            string bizDateYY = ((string)(inValues[26]));
            string actor = ((string)(inValues[27]));
            string bookGroup = ((string)(inValues[28]));
            string userId = ((string)(inValues[29]));
            string userPassword = ((string)(inValues[30]));
            string functionPath = ((string)(inValues[31]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryFileLayoutSet(bookGroupSet, desk, inventoryType, recordLength, headerFlag, dataFlag, trailerFlag, delimiter, accountLocale, accountOrdinal, accountPosition, accountLength, secIdOrdinal, secIdPosition, secIdLength, quantityOrdinal, quantityPosition, quantityLength, rateOrdinal, ratePosition, rateLength, recordCountOrdinal, recordCountPosition, recordCountLength, bizDateDD, bizDateMM, bizDateYY, actor, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryFileLayoutSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryFileLayoutSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryFileLayoutSetCompleted(object state) {
            if ((this.InventoryFileLayoutSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryFileLayoutSetCompleted(this, new InventoryFileLayoutSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryFileLayoutSetAsync(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string recordLength, 
                    string headerFlag, 
                    string dataFlag, 
                    string trailerFlag, 
                    string delimiter, 
                    string accountLocale, 
                    string accountOrdinal, 
                    string accountPosition, 
                    string accountLength, 
                    string secIdOrdinal, 
                    string secIdPosition, 
                    string secIdLength, 
                    string quantityOrdinal, 
                    string quantityPosition, 
                    string quantityLength, 
                    string rateOrdinal, 
                    string ratePosition, 
                    string rateLength, 
                    string recordCountOrdinal, 
                    string recordCountPosition, 
                    string recordCountLength, 
                    string bizDateDD, 
                    string bizDateMM, 
                    string bizDateYY, 
                    string actor, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.InventoryFileLayoutSetAsync(bookGroupSet, desk, inventoryType, recordLength, headerFlag, dataFlag, trailerFlag, delimiter, accountLocale, accountOrdinal, accountPosition, accountLength, secIdOrdinal, secIdPosition, secIdLength, quantityOrdinal, quantityPosition, quantityLength, rateOrdinal, ratePosition, rateLength, recordCountOrdinal, recordCountPosition, recordCountLength, bizDateDD, bizDateMM, bizDateYY, actor, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void InventoryFileLayoutSetAsync(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string recordLength, 
                    string headerFlag, 
                    string dataFlag, 
                    string trailerFlag, 
                    string delimiter, 
                    string accountLocale, 
                    string accountOrdinal, 
                    string accountPosition, 
                    string accountLength, 
                    string secIdOrdinal, 
                    string secIdPosition, 
                    string secIdLength, 
                    string quantityOrdinal, 
                    string quantityPosition, 
                    string quantityLength, 
                    string rateOrdinal, 
                    string ratePosition, 
                    string rateLength, 
                    string recordCountOrdinal, 
                    string recordCountPosition, 
                    string recordCountLength, 
                    string bizDateDD, 
                    string bizDateMM, 
                    string bizDateYY, 
                    string actor, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginInventoryFileLayoutSetDelegate == null)) {
                this.onBeginInventoryFileLayoutSetDelegate = new BeginOperationDelegate(this.OnBeginInventoryFileLayoutSet);
            }
            if ((this.onEndInventoryFileLayoutSetDelegate == null)) {
                this.onEndInventoryFileLayoutSetDelegate = new EndOperationDelegate(this.OnEndInventoryFileLayoutSet);
            }
            if ((this.onInventoryFileLayoutSetCompletedDelegate == null)) {
                this.onInventoryFileLayoutSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryFileLayoutSetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryFileLayoutSetDelegate, new object[] {
                        bookGroupSet,
                        desk,
                        inventoryType,
                        recordLength,
                        headerFlag,
                        dataFlag,
                        trailerFlag,
                        delimiter,
                        accountLocale,
                        accountOrdinal,
                        accountPosition,
                        accountLength,
                        secIdOrdinal,
                        secIdPosition,
                        secIdLength,
                        quantityOrdinal,
                        quantityPosition,
                        quantityLength,
                        rateOrdinal,
                        ratePosition,
                        rateLength,
                        recordCountOrdinal,
                        recordCountPosition,
                        recordCountLength,
                        bizDateDD,
                        bizDateMM,
                        bizDateYY,
                        actor,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventoryFileLayoutSetDelegate, this.onInventoryFileLayoutSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventoryRatesGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventoryRatesGet(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndInventoryRatesGet(System.IAsyncResult result) {
            return base.Channel.EndInventoryRatesGet(result);
        }
        
        private System.IAsyncResult OnBeginInventoryRatesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bizDate = ((string)(inValues[0]));
            string bookGroup = ((string)(inValues[1]));
            string desk = ((string)(inValues[2]));
            string secId = ((string)(inValues[3]));
            string version = ((string)(inValues[4]));
            string source = ((string)(inValues[5]));
            string sourceActor = ((string)(inValues[6]));
            string userId = ((string)(inValues[7]));
            string userPassword = ((string)(inValues[8]));
            string functionPath = ((string)(inValues[9]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventoryRatesGet(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventoryRatesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventoryRatesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventoryRatesGetCompleted(object state) {
            if ((this.InventoryRatesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventoryRatesGetCompleted(this, new InventoryRatesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventoryRatesGetAsync(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath) {
            this.InventoryRatesGetAsync(bizDate, bookGroup, desk, secId, version, source, sourceActor, userId, userPassword, functionPath, null);
        }
        
        public void InventoryRatesGetAsync(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginInventoryRatesGetDelegate == null)) {
                this.onBeginInventoryRatesGetDelegate = new BeginOperationDelegate(this.OnBeginInventoryRatesGet);
            }
            if ((this.onEndInventoryRatesGetDelegate == null)) {
                this.onEndInventoryRatesGetDelegate = new EndOperationDelegate(this.OnEndInventoryRatesGet);
            }
            if ((this.onInventoryRatesGetCompletedDelegate == null)) {
                this.onInventoryRatesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventoryRatesGetCompleted);
            }
            base.InvokeAsync(this.onBeginInventoryRatesGetDelegate, new object[] {
                        bizDate,
                        bookGroup,
                        desk,
                        secId,
                        version,
                        source,
                        sourceActor,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventoryRatesGetDelegate, this.onInventoryRatesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventorySubscriptionsGet(string bookGroupGet, string desk, string inventoryType, short utcOffset, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInventorySubscriptionsGet(bookGroupGet, desk, inventoryType, utcOffset, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceInventory.IInventoryService.EndInventorySubscriptionsGet(System.IAsyncResult result) {
            return base.Channel.EndInventorySubscriptionsGet(result);
        }
        
        private System.IAsyncResult OnBeginInventorySubscriptionsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bookGroupGet = ((string)(inValues[0]));
            string desk = ((string)(inValues[1]));
            string inventoryType = ((string)(inValues[2]));
            short utcOffset = ((short)(inValues[3]));
            string bookGroup = ((string)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string userPassword = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventorySubscriptionsGet(bookGroupGet, desk, inventoryType, utcOffset, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventorySubscriptionsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventorySubscriptionsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventorySubscriptionsGetCompleted(object state) {
            if ((this.InventorySubscriptionsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventorySubscriptionsGetCompleted(this, new InventorySubscriptionsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventorySubscriptionsGetAsync(string bookGroupGet, string desk, string inventoryType, short utcOffset, string bookGroup, string userId, string userPassword, string functionPath) {
            this.InventorySubscriptionsGetAsync(bookGroupGet, desk, inventoryType, utcOffset, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void InventorySubscriptionsGetAsync(string bookGroupGet, string desk, string inventoryType, short utcOffset, string bookGroup, string userId, string userPassword, string functionPath, object userState) {
            if ((this.onBeginInventorySubscriptionsGetDelegate == null)) {
                this.onBeginInventorySubscriptionsGetDelegate = new BeginOperationDelegate(this.OnBeginInventorySubscriptionsGet);
            }
            if ((this.onEndInventorySubscriptionsGetDelegate == null)) {
                this.onEndInventorySubscriptionsGetDelegate = new EndOperationDelegate(this.OnEndInventorySubscriptionsGet);
            }
            if ((this.onInventorySubscriptionsGetCompletedDelegate == null)) {
                this.onInventorySubscriptionsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventorySubscriptionsGetCompleted);
            }
            base.InvokeAsync(this.onBeginInventorySubscriptionsGetDelegate, new object[] {
                        bookGroupGet,
                        desk,
                        inventoryType,
                        utcOffset,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventorySubscriptionsGetDelegate, this.onInventorySubscriptionsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceInventory.IInventoryService.BeginInventorySubscriptionSet(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string bizDate, 
                    string loadTime, 
                    string loadStatus, 
                    string items, 
                    string lastLoadedTime, 
                    string lastLoadedVersion, 
                    string loadBizDatePrior, 
                    string fileTime, 
                    string fileChecktime, 
                    string fileStatus, 
                    string fileName, 
                    string fileHost, 
                    string fileUserId, 
                    string filePassword, 
                    string mailAddress, 
                    string mailSubject, 
                    string comment, 
                    string actor, 
                    bool isActive, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginInventorySubscriptionSet(bookGroupSet, desk, inventoryType, bizDate, loadTime, loadStatus, items, lastLoadedTime, lastLoadedVersion, loadBizDatePrior, fileTime, fileChecktime, fileStatus, fileName, fileHost, fileUserId, filePassword, mailAddress, mailSubject, comment, actor, isActive, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceInventory.IInventoryService.EndInventorySubscriptionSet(System.IAsyncResult result) {
            return base.Channel.EndInventorySubscriptionSet(result);
        }
        
        private System.IAsyncResult OnBeginInventorySubscriptionSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string bookGroupSet = ((string)(inValues[0]));
            string desk = ((string)(inValues[1]));
            string inventoryType = ((string)(inValues[2]));
            string bizDate = ((string)(inValues[3]));
            string loadTime = ((string)(inValues[4]));
            string loadStatus = ((string)(inValues[5]));
            string items = ((string)(inValues[6]));
            string lastLoadedTime = ((string)(inValues[7]));
            string lastLoadedVersion = ((string)(inValues[8]));
            string loadBizDatePrior = ((string)(inValues[9]));
            string fileTime = ((string)(inValues[10]));
            string fileChecktime = ((string)(inValues[11]));
            string fileStatus = ((string)(inValues[12]));
            string fileName = ((string)(inValues[13]));
            string fileHost = ((string)(inValues[14]));
            string fileUserId = ((string)(inValues[15]));
            string filePassword = ((string)(inValues[16]));
            string mailAddress = ((string)(inValues[17]));
            string mailSubject = ((string)(inValues[18]));
            string comment = ((string)(inValues[19]));
            string actor = ((string)(inValues[20]));
            bool isActive = ((bool)(inValues[21]));
            string bookGroup = ((string)(inValues[22]));
            string userId = ((string)(inValues[23]));
            string userPassword = ((string)(inValues[24]));
            string functionPath = ((string)(inValues[25]));
            return ((WorldWideClient.ServiceInventory.IInventoryService)(this)).BeginInventorySubscriptionSet(bookGroupSet, desk, inventoryType, bizDate, loadTime, loadStatus, items, lastLoadedTime, lastLoadedVersion, loadBizDatePrior, fileTime, fileChecktime, fileStatus, fileName, fileHost, fileUserId, filePassword, mailAddress, mailSubject, comment, actor, isActive, bookGroup, userId, userPassword, functionPath, callback, asyncState);
        }
        
        private object[] OnEndInventorySubscriptionSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceInventory.IInventoryService)(this)).EndInventorySubscriptionSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInventorySubscriptionSetCompleted(object state) {
            if ((this.InventorySubscriptionSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InventorySubscriptionSetCompleted(this, new InventorySubscriptionSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InventorySubscriptionSetAsync(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string bizDate, 
                    string loadTime, 
                    string loadStatus, 
                    string items, 
                    string lastLoadedTime, 
                    string lastLoadedVersion, 
                    string loadBizDatePrior, 
                    string fileTime, 
                    string fileChecktime, 
                    string fileStatus, 
                    string fileName, 
                    string fileHost, 
                    string fileUserId, 
                    string filePassword, 
                    string mailAddress, 
                    string mailSubject, 
                    string comment, 
                    string actor, 
                    bool isActive, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath) {
            this.InventorySubscriptionSetAsync(bookGroupSet, desk, inventoryType, bizDate, loadTime, loadStatus, items, lastLoadedTime, lastLoadedVersion, loadBizDatePrior, fileTime, fileChecktime, fileStatus, fileName, fileHost, fileUserId, filePassword, mailAddress, mailSubject, comment, actor, isActive, bookGroup, userId, userPassword, functionPath, null);
        }
        
        public void InventorySubscriptionSetAsync(
                    string bookGroupSet, 
                    string desk, 
                    string inventoryType, 
                    string bizDate, 
                    string loadTime, 
                    string loadStatus, 
                    string items, 
                    string lastLoadedTime, 
                    string lastLoadedVersion, 
                    string loadBizDatePrior, 
                    string fileTime, 
                    string fileChecktime, 
                    string fileStatus, 
                    string fileName, 
                    string fileHost, 
                    string fileUserId, 
                    string filePassword, 
                    string mailAddress, 
                    string mailSubject, 
                    string comment, 
                    string actor, 
                    bool isActive, 
                    string bookGroup, 
                    string userId, 
                    string userPassword, 
                    string functionPath, 
                    object userState) {
            if ((this.onBeginInventorySubscriptionSetDelegate == null)) {
                this.onBeginInventorySubscriptionSetDelegate = new BeginOperationDelegate(this.OnBeginInventorySubscriptionSet);
            }
            if ((this.onEndInventorySubscriptionSetDelegate == null)) {
                this.onEndInventorySubscriptionSetDelegate = new EndOperationDelegate(this.OnEndInventorySubscriptionSet);
            }
            if ((this.onInventorySubscriptionSetCompletedDelegate == null)) {
                this.onInventorySubscriptionSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInventorySubscriptionSetCompleted);
            }
            base.InvokeAsync(this.onBeginInventorySubscriptionSetDelegate, new object[] {
                        bookGroupSet,
                        desk,
                        inventoryType,
                        bizDate,
                        loadTime,
                        loadStatus,
                        items,
                        lastLoadedTime,
                        lastLoadedVersion,
                        loadBizDatePrior,
                        fileTime,
                        fileChecktime,
                        fileStatus,
                        fileName,
                        fileHost,
                        fileUserId,
                        filePassword,
                        mailAddress,
                        mailSubject,
                        comment,
                        actor,
                        isActive,
                        bookGroup,
                        userId,
                        userPassword,
                        functionPath}, this.onEndInventorySubscriptionSetDelegate, this.onInventorySubscriptionSetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceInventory.IInventoryService CreateChannel() {
            return new InventoryServiceClientChannel(this);
        }
        
        private class InventoryServiceClientChannel : ChannelBase<WorldWideClient.ServiceInventory.IInventoryService>, WorldWideClient.ServiceInventory.IInventoryService {
            
            public InventoryServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceInventory.IInventoryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDesksGet(string desk, string bookGroup, string sIsNotSubscriber, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = desk;
                _args[1] = bookGroup;
                _args[2] = sIsNotSubscriber;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DesksGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDesksGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DesksGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeskSet(string desk, string firmCode, string deskTypeCode, string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = desk;
                _args[1] = firmCode;
                _args[2] = deskTypeCode;
                _args[3] = countryCode;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = bookGroup;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DeskSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeskSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeskSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeskTypesGet(string deskTypeCode, string deskType, string sIsActive, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = deskTypeCode;
                _args[1] = deskType;
                _args[2] = sIsActive;
                _args[3] = bookGroup;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DeskTypesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDeskTypesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DeskTypesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFirmsGet(string firmCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = firmCode;
                _args[1] = userId;
                _args[2] = userPassword;
                _args[3] = bookGroup;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("FirmsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndFirmsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("FirmsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFirmSet(string firmCode, string firm, string sIsActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = firmCode;
                _args[1] = firm;
                _args[2] = sIsActive;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("FirmSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndFirmSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("FirmSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = desk;
                _args[3] = secId;
                _args[4] = version;
                _args[5] = source;
                _args[6] = sourceActor;
                _args[7] = userId;
                _args[8] = userPassword;
                _args[9] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInventoryGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InventoryGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryHistoryGet(string bookGroup, string secId, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = bookGroup;
                _args[1] = secId;
                _args[2] = userId;
                _args[3] = userPassword;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryHistoryGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInventoryHistoryGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InventoryHistoryGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryItemSet(string bizDate, string desk, string secId, string rate, string quantity, string source, string sourceActor, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = bizDate;
                _args[1] = desk;
                _args[2] = secId;
                _args[3] = rate;
                _args[4] = quantity;
                _args[5] = source;
                _args[6] = sourceActor;
                _args[7] = userId;
                _args[8] = userPassword;
                _args[9] = bookGroup;
                _args[10] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryItemSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInventoryItemSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InventoryItemSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryFileLayoutGet(string bookGroupGet, string desk, string inventoryType, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = bookGroupGet;
                _args[1] = desk;
                _args[2] = inventoryType;
                _args[3] = bookGroup;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryFileLayoutGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInventoryFileLayoutGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InventoryFileLayoutGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryFileLayoutSet(
                        string bookGroupSet, 
                        string desk, 
                        string inventoryType, 
                        string recordLength, 
                        string headerFlag, 
                        string dataFlag, 
                        string trailerFlag, 
                        string delimiter, 
                        string accountLocale, 
                        string accountOrdinal, 
                        string accountPosition, 
                        string accountLength, 
                        string secIdOrdinal, 
                        string secIdPosition, 
                        string secIdLength, 
                        string quantityOrdinal, 
                        string quantityPosition, 
                        string quantityLength, 
                        string rateOrdinal, 
                        string ratePosition, 
                        string rateLength, 
                        string recordCountOrdinal, 
                        string recordCountPosition, 
                        string recordCountLength, 
                        string bizDateDD, 
                        string bizDateMM, 
                        string bizDateYY, 
                        string actor, 
                        string bookGroup, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[32];
                _args[0] = bookGroupSet;
                _args[1] = desk;
                _args[2] = inventoryType;
                _args[3] = recordLength;
                _args[4] = headerFlag;
                _args[5] = dataFlag;
                _args[6] = trailerFlag;
                _args[7] = delimiter;
                _args[8] = accountLocale;
                _args[9] = accountOrdinal;
                _args[10] = accountPosition;
                _args[11] = accountLength;
                _args[12] = secIdOrdinal;
                _args[13] = secIdPosition;
                _args[14] = secIdLength;
                _args[15] = quantityOrdinal;
                _args[16] = quantityPosition;
                _args[17] = quantityLength;
                _args[18] = rateOrdinal;
                _args[19] = ratePosition;
                _args[20] = rateLength;
                _args[21] = recordCountOrdinal;
                _args[22] = recordCountPosition;
                _args[23] = recordCountLength;
                _args[24] = bizDateDD;
                _args[25] = bizDateMM;
                _args[26] = bizDateYY;
                _args[27] = actor;
                _args[28] = bookGroup;
                _args[29] = userId;
                _args[30] = userPassword;
                _args[31] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryFileLayoutSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInventoryFileLayoutSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InventoryFileLayoutSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventoryRatesGet(string bizDate, string bookGroup, string desk, string secId, string version, string source, string sourceActor, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = bizDate;
                _args[1] = bookGroup;
                _args[2] = desk;
                _args[3] = secId;
                _args[4] = version;
                _args[5] = source;
                _args[6] = sourceActor;
                _args[7] = userId;
                _args[8] = userPassword;
                _args[9] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventoryRatesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInventoryRatesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InventoryRatesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventorySubscriptionsGet(string bookGroupGet, string desk, string inventoryType, short utcOffset, string bookGroup, string userId, string userPassword, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = bookGroupGet;
                _args[1] = desk;
                _args[2] = inventoryType;
                _args[3] = utcOffset;
                _args[4] = bookGroup;
                _args[5] = userId;
                _args[6] = userPassword;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventorySubscriptionsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInventorySubscriptionsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InventorySubscriptionsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInventorySubscriptionSet(
                        string bookGroupSet, 
                        string desk, 
                        string inventoryType, 
                        string bizDate, 
                        string loadTime, 
                        string loadStatus, 
                        string items, 
                        string lastLoadedTime, 
                        string lastLoadedVersion, 
                        string loadBizDatePrior, 
                        string fileTime, 
                        string fileChecktime, 
                        string fileStatus, 
                        string fileName, 
                        string fileHost, 
                        string fileUserId, 
                        string filePassword, 
                        string mailAddress, 
                        string mailSubject, 
                        string comment, 
                        string actor, 
                        bool isActive, 
                        string bookGroup, 
                        string userId, 
                        string userPassword, 
                        string functionPath, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[26];
                _args[0] = bookGroupSet;
                _args[1] = desk;
                _args[2] = inventoryType;
                _args[3] = bizDate;
                _args[4] = loadTime;
                _args[5] = loadStatus;
                _args[6] = items;
                _args[7] = lastLoadedTime;
                _args[8] = lastLoadedVersion;
                _args[9] = loadBizDatePrior;
                _args[10] = fileTime;
                _args[11] = fileChecktime;
                _args[12] = fileStatus;
                _args[13] = fileName;
                _args[14] = fileHost;
                _args[15] = fileUserId;
                _args[16] = filePassword;
                _args[17] = mailAddress;
                _args[18] = mailSubject;
                _args[19] = comment;
                _args[20] = actor;
                _args[21] = isActive;
                _args[22] = bookGroup;
                _args[23] = userId;
                _args[24] = userPassword;
                _args[25] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("InventorySubscriptionSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInventorySubscriptionSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InventorySubscriptionSet", _args, result)));
                return _result;
            }
        }
    }
}
