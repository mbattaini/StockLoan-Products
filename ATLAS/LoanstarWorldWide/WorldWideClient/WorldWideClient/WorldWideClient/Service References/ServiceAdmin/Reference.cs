//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WorldWideClient.ServiceAdmin {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceAdmin.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CountriesGet", ReplyAction="http://tempuri.org/IAdminService/CountriesGetResponse")]
        System.IAsyncResult BeginCountriesGet(string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCountriesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CountryCodeIsoConversionsGet", ReplyAction="http://tempuri.org/IAdminService/CountryCodeIsoConversionsGetResponse")]
        System.IAsyncResult BeginCountryCodeIsoConversionsGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCountryCodeIsoConversionsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CountrySet", ReplyAction="http://tempuri.org/IAdminService/CountrySetResponse")]
        System.IAsyncResult BeginCountrySet(string countryCode, string country, string settleDays, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndCountrySet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CurrenciesGet", ReplyAction="http://tempuri.org/IAdminService/CurrenciesGetResponse")]
        System.IAsyncResult BeginCurrenciesGet(string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCurrenciesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CurrencyConversionsGet", ReplyAction="http://tempuri.org/IAdminService/CurrencyConversionsGetResponse")]
        System.IAsyncResult BeginCurrencyConversionsGet(string currencyIsoFrom, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndCurrencyConversionsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CurrencyConversionSet", ReplyAction="http://tempuri.org/IAdminService/CurrencyConversionSetResponse")]
        System.IAsyncResult BeginCurrencyConversionSet(string currencyIsoFrom, string currencyIsoTo, string currencyConvertRate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndCurrencyConversionSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/CurrencySet", ReplyAction="http://tempuri.org/IAdminService/CurrencySetResponse")]
        System.IAsyncResult BeginCurrencySet(string currencyIso, string currency, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        bool EndCurrencySet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminService/DeliveryTypesGet", ReplyAction="http://tempuri.org/IAdminService/DeliveryTypesGetResponse")]
        System.IAsyncResult BeginDeliveryTypesGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDeliveryTypesGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : WorldWideClient.ServiceAdmin.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountriesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CountriesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountryCodeIsoConversionsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CountryCodeIsoConversionsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountrySetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CountrySetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrenciesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrenciesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConversionsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyConversionsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConversionSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencyConversionSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencySetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrencySetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliveryTypesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeliveryTypesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<WorldWideClient.ServiceAdmin.IAdminService>, WorldWideClient.ServiceAdmin.IAdminService {
        
        private BeginOperationDelegate onBeginCountriesGetDelegate;
        
        private EndOperationDelegate onEndCountriesGetDelegate;
        
        private System.Threading.SendOrPostCallback onCountriesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCountryCodeIsoConversionsGetDelegate;
        
        private EndOperationDelegate onEndCountryCodeIsoConversionsGetDelegate;
        
        private System.Threading.SendOrPostCallback onCountryCodeIsoConversionsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCountrySetDelegate;
        
        private EndOperationDelegate onEndCountrySetDelegate;
        
        private System.Threading.SendOrPostCallback onCountrySetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrenciesGetDelegate;
        
        private EndOperationDelegate onEndCurrenciesGetDelegate;
        
        private System.Threading.SendOrPostCallback onCurrenciesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencyConversionsGetDelegate;
        
        private EndOperationDelegate onEndCurrencyConversionsGetDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyConversionsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencyConversionSetDelegate;
        
        private EndOperationDelegate onEndCurrencyConversionSetDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencyConversionSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrencySetDelegate;
        
        private EndOperationDelegate onEndCurrencySetDelegate;
        
        private System.Threading.SendOrPostCallback onCurrencySetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeliveryTypesGetDelegate;
        
        private EndOperationDelegate onEndDeliveryTypesGetDelegate;
        
        private System.Threading.SendOrPostCallback onDeliveryTypesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CountriesGetCompletedEventArgs> CountriesGetCompleted;
        
        public event System.EventHandler<CountryCodeIsoConversionsGetCompletedEventArgs> CountryCodeIsoConversionsGetCompleted;
        
        public event System.EventHandler<CountrySetCompletedEventArgs> CountrySetCompleted;
        
        public event System.EventHandler<CurrenciesGetCompletedEventArgs> CurrenciesGetCompleted;
        
        public event System.EventHandler<CurrencyConversionsGetCompletedEventArgs> CurrencyConversionsGetCompleted;
        
        public event System.EventHandler<CurrencyConversionSetCompletedEventArgs> CurrencyConversionSetCompleted;
        
        public event System.EventHandler<CurrencySetCompletedEventArgs> CurrencySetCompleted;
        
        public event System.EventHandler<DeliveryTypesGetCompletedEventArgs> DeliveryTypesGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCountriesGet(string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCountriesGet(countryCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceAdmin.IAdminService.EndCountriesGet(System.IAsyncResult result) {
            return base.Channel.EndCountriesGet(result);
        }
        
        private System.IAsyncResult OnBeginCountriesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string countryCode = ((string)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string userPassword = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCountriesGet(countryCode, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCountriesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCountriesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountriesGetCompleted(object state) {
            if ((this.CountriesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountriesGetCompleted(this, new CountriesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountriesGetAsync(string countryCode, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CountriesGetAsync(countryCode, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CountriesGetAsync(string countryCode, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCountriesGetDelegate == null)) {
                this.onBeginCountriesGetDelegate = new BeginOperationDelegate(this.OnBeginCountriesGet);
            }
            if ((this.onEndCountriesGetDelegate == null)) {
                this.onEndCountriesGetDelegate = new EndOperationDelegate(this.OnEndCountriesGet);
            }
            if ((this.onCountriesGetCompletedDelegate == null)) {
                this.onCountriesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountriesGetCompleted);
            }
            base.InvokeAsync(this.onBeginCountriesGetDelegate, new object[] {
                        countryCode,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCountriesGetDelegate, this.onCountriesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCountryCodeIsoConversionsGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCountryCodeIsoConversionsGet(userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceAdmin.IAdminService.EndCountryCodeIsoConversionsGet(System.IAsyncResult result) {
            return base.Channel.EndCountryCodeIsoConversionsGet(result);
        }
        
        private System.IAsyncResult OnBeginCountryCodeIsoConversionsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string functionPath = ((string)(inValues[3]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCountryCodeIsoConversionsGet(userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCountryCodeIsoConversionsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCountryCodeIsoConversionsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountryCodeIsoConversionsGetCompleted(object state) {
            if ((this.CountryCodeIsoConversionsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountryCodeIsoConversionsGetCompleted(this, new CountryCodeIsoConversionsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountryCodeIsoConversionsGetAsync(string userId, string userPassword, string bookGroup, string functionPath) {
            this.CountryCodeIsoConversionsGetAsync(userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CountryCodeIsoConversionsGetAsync(string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCountryCodeIsoConversionsGetDelegate == null)) {
                this.onBeginCountryCodeIsoConversionsGetDelegate = new BeginOperationDelegate(this.OnBeginCountryCodeIsoConversionsGet);
            }
            if ((this.onEndCountryCodeIsoConversionsGetDelegate == null)) {
                this.onEndCountryCodeIsoConversionsGetDelegate = new EndOperationDelegate(this.OnEndCountryCodeIsoConversionsGet);
            }
            if ((this.onCountryCodeIsoConversionsGetCompletedDelegate == null)) {
                this.onCountryCodeIsoConversionsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountryCodeIsoConversionsGetCompleted);
            }
            base.InvokeAsync(this.onBeginCountryCodeIsoConversionsGetDelegate, new object[] {
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCountryCodeIsoConversionsGetDelegate, this.onCountryCodeIsoConversionsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCountrySet(string countryCode, string country, string settleDays, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCountrySet(countryCode, country, settleDays, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceAdmin.IAdminService.EndCountrySet(System.IAsyncResult result) {
            return base.Channel.EndCountrySet(result);
        }
        
        private System.IAsyncResult OnBeginCountrySet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string countryCode = ((string)(inValues[0]));
            string country = ((string)(inValues[1]));
            string settleDays = ((string)(inValues[2]));
            bool isActive = ((bool)(inValues[3]));
            string userId = ((string)(inValues[4]));
            string userPassword = ((string)(inValues[5]));
            string bookGroup = ((string)(inValues[6]));
            string functionPath = ((string)(inValues[7]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCountrySet(countryCode, country, settleDays, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCountrySet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCountrySet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountrySetCompleted(object state) {
            if ((this.CountrySetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountrySetCompleted(this, new CountrySetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountrySetAsync(string countryCode, string country, string settleDays, bool isActive, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CountrySetAsync(countryCode, country, settleDays, isActive, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CountrySetAsync(string countryCode, string country, string settleDays, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCountrySetDelegate == null)) {
                this.onBeginCountrySetDelegate = new BeginOperationDelegate(this.OnBeginCountrySet);
            }
            if ((this.onEndCountrySetDelegate == null)) {
                this.onEndCountrySetDelegate = new EndOperationDelegate(this.OnEndCountrySet);
            }
            if ((this.onCountrySetCompletedDelegate == null)) {
                this.onCountrySetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountrySetCompleted);
            }
            base.InvokeAsync(this.onBeginCountrySetDelegate, new object[] {
                        countryCode,
                        country,
                        settleDays,
                        isActive,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCountrySetDelegate, this.onCountrySetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCurrenciesGet(string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrenciesGet(currencyIso, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceAdmin.IAdminService.EndCurrenciesGet(System.IAsyncResult result) {
            return base.Channel.EndCurrenciesGet(result);
        }
        
        private System.IAsyncResult OnBeginCurrenciesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currencyIso = ((string)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string userPassword = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCurrenciesGet(currencyIso, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCurrenciesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCurrenciesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrenciesGetCompleted(object state) {
            if ((this.CurrenciesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrenciesGetCompleted(this, new CurrenciesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrenciesGetAsync(string currencyIso, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CurrenciesGetAsync(currencyIso, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CurrenciesGetAsync(string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCurrenciesGetDelegate == null)) {
                this.onBeginCurrenciesGetDelegate = new BeginOperationDelegate(this.OnBeginCurrenciesGet);
            }
            if ((this.onEndCurrenciesGetDelegate == null)) {
                this.onEndCurrenciesGetDelegate = new EndOperationDelegate(this.OnEndCurrenciesGet);
            }
            if ((this.onCurrenciesGetCompletedDelegate == null)) {
                this.onCurrenciesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrenciesGetCompleted);
            }
            base.InvokeAsync(this.onBeginCurrenciesGetDelegate, new object[] {
                        currencyIso,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCurrenciesGetDelegate, this.onCurrenciesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCurrencyConversionsGet(string currencyIsoFrom, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyConversionsGet(currencyIsoFrom, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceAdmin.IAdminService.EndCurrencyConversionsGet(System.IAsyncResult result) {
            return base.Channel.EndCurrencyConversionsGet(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyConversionsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currencyIsoFrom = ((string)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string userPassword = ((string)(inValues[2]));
            string bookGroup = ((string)(inValues[3]));
            string functionPath = ((string)(inValues[4]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCurrencyConversionsGet(currencyIsoFrom, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCurrencyConversionsGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCurrencyConversionsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyConversionsGetCompleted(object state) {
            if ((this.CurrencyConversionsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyConversionsGetCompleted(this, new CurrencyConversionsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyConversionsGetAsync(string currencyIsoFrom, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CurrencyConversionsGetAsync(currencyIsoFrom, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CurrencyConversionsGetAsync(string currencyIsoFrom, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCurrencyConversionsGetDelegate == null)) {
                this.onBeginCurrencyConversionsGetDelegate = new BeginOperationDelegate(this.OnBeginCurrencyConversionsGet);
            }
            if ((this.onEndCurrencyConversionsGetDelegate == null)) {
                this.onEndCurrencyConversionsGetDelegate = new EndOperationDelegate(this.OnEndCurrencyConversionsGet);
            }
            if ((this.onCurrencyConversionsGetCompletedDelegate == null)) {
                this.onCurrencyConversionsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyConversionsGetCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyConversionsGetDelegate, new object[] {
                        currencyIsoFrom,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCurrencyConversionsGetDelegate, this.onCurrencyConversionsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCurrencyConversionSet(string currencyIsoFrom, string currencyIsoTo, string currencyConvertRate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencyConversionSet(currencyIsoFrom, currencyIsoTo, currencyConvertRate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceAdmin.IAdminService.EndCurrencyConversionSet(System.IAsyncResult result) {
            return base.Channel.EndCurrencyConversionSet(result);
        }
        
        private System.IAsyncResult OnBeginCurrencyConversionSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currencyIsoFrom = ((string)(inValues[0]));
            string currencyIsoTo = ((string)(inValues[1]));
            string currencyConvertRate = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCurrencyConversionSet(currencyIsoFrom, currencyIsoTo, currencyConvertRate, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCurrencyConversionSet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCurrencyConversionSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencyConversionSetCompleted(object state) {
            if ((this.CurrencyConversionSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencyConversionSetCompleted(this, new CurrencyConversionSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencyConversionSetAsync(string currencyIsoFrom, string currencyIsoTo, string currencyConvertRate, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CurrencyConversionSetAsync(currencyIsoFrom, currencyIsoTo, currencyConvertRate, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CurrencyConversionSetAsync(string currencyIsoFrom, string currencyIsoTo, string currencyConvertRate, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCurrencyConversionSetDelegate == null)) {
                this.onBeginCurrencyConversionSetDelegate = new BeginOperationDelegate(this.OnBeginCurrencyConversionSet);
            }
            if ((this.onEndCurrencyConversionSetDelegate == null)) {
                this.onEndCurrencyConversionSetDelegate = new EndOperationDelegate(this.OnEndCurrencyConversionSet);
            }
            if ((this.onCurrencyConversionSetCompletedDelegate == null)) {
                this.onCurrencyConversionSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencyConversionSetCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencyConversionSetDelegate, new object[] {
                        currencyIsoFrom,
                        currencyIsoTo,
                        currencyConvertRate,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCurrencyConversionSetDelegate, this.onCurrencyConversionSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginCurrencySet(string currencyIso, string currency, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrencySet(currencyIso, currency, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool WorldWideClient.ServiceAdmin.IAdminService.EndCurrencySet(System.IAsyncResult result) {
            return base.Channel.EndCurrencySet(result);
        }
        
        private System.IAsyncResult OnBeginCurrencySet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currencyIso = ((string)(inValues[0]));
            string currency = ((string)(inValues[1]));
            bool isActive = ((bool)(inValues[2]));
            string userId = ((string)(inValues[3]));
            string userPassword = ((string)(inValues[4]));
            string bookGroup = ((string)(inValues[5]));
            string functionPath = ((string)(inValues[6]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginCurrencySet(currencyIso, currency, isActive, userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndCurrencySet(System.IAsyncResult result) {
            bool retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndCurrencySet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrencySetCompleted(object state) {
            if ((this.CurrencySetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrencySetCompleted(this, new CurrencySetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrencySetAsync(string currencyIso, string currency, bool isActive, string userId, string userPassword, string bookGroup, string functionPath) {
            this.CurrencySetAsync(currencyIso, currency, isActive, userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void CurrencySetAsync(string currencyIso, string currency, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginCurrencySetDelegate == null)) {
                this.onBeginCurrencySetDelegate = new BeginOperationDelegate(this.OnBeginCurrencySet);
            }
            if ((this.onEndCurrencySetDelegate == null)) {
                this.onEndCurrencySetDelegate = new EndOperationDelegate(this.OnEndCurrencySet);
            }
            if ((this.onCurrencySetCompletedDelegate == null)) {
                this.onCurrencySetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrencySetCompleted);
            }
            base.InvokeAsync(this.onBeginCurrencySetDelegate, new object[] {
                        currencyIso,
                        currency,
                        isActive,
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndCurrencySetDelegate, this.onCurrencySetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldWideClient.ServiceAdmin.IAdminService.BeginDeliveryTypesGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeliveryTypesGet(userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] WorldWideClient.ServiceAdmin.IAdminService.EndDeliveryTypesGet(System.IAsyncResult result) {
            return base.Channel.EndDeliveryTypesGet(result);
        }
        
        private System.IAsyncResult OnBeginDeliveryTypesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            string bookGroup = ((string)(inValues[2]));
            string functionPath = ((string)(inValues[3]));
            return ((WorldWideClient.ServiceAdmin.IAdminService)(this)).BeginDeliveryTypesGet(userId, userPassword, bookGroup, functionPath, callback, asyncState);
        }
        
        private object[] OnEndDeliveryTypesGet(System.IAsyncResult result) {
            byte[] retVal = ((WorldWideClient.ServiceAdmin.IAdminService)(this)).EndDeliveryTypesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeliveryTypesGetCompleted(object state) {
            if ((this.DeliveryTypesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeliveryTypesGetCompleted(this, new DeliveryTypesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeliveryTypesGetAsync(string userId, string userPassword, string bookGroup, string functionPath) {
            this.DeliveryTypesGetAsync(userId, userPassword, bookGroup, functionPath, null);
        }
        
        public void DeliveryTypesGetAsync(string userId, string userPassword, string bookGroup, string functionPath, object userState) {
            if ((this.onBeginDeliveryTypesGetDelegate == null)) {
                this.onBeginDeliveryTypesGetDelegate = new BeginOperationDelegate(this.OnBeginDeliveryTypesGet);
            }
            if ((this.onEndDeliveryTypesGetDelegate == null)) {
                this.onEndDeliveryTypesGetDelegate = new EndOperationDelegate(this.OnEndDeliveryTypesGet);
            }
            if ((this.onDeliveryTypesGetCompletedDelegate == null)) {
                this.onDeliveryTypesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeliveryTypesGetCompleted);
            }
            base.InvokeAsync(this.onBeginDeliveryTypesGetDelegate, new object[] {
                        userId,
                        userPassword,
                        bookGroup,
                        functionPath}, this.onEndDeliveryTypesGetDelegate, this.onDeliveryTypesGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldWideClient.ServiceAdmin.IAdminService CreateChannel() {
            return new AdminServiceClientChannel(this);
        }
        
        private class AdminServiceClientChannel : ChannelBase<WorldWideClient.ServiceAdmin.IAdminService>, WorldWideClient.ServiceAdmin.IAdminService {
            
            public AdminServiceClientChannel(System.ServiceModel.ClientBase<WorldWideClient.ServiceAdmin.IAdminService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCountriesGet(string countryCode, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = countryCode;
                _args[1] = userId;
                _args[2] = userPassword;
                _args[3] = bookGroup;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CountriesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndCountriesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("CountriesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCountryCodeIsoConversionsGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = userPassword;
                _args[2] = bookGroup;
                _args[3] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CountryCodeIsoConversionsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndCountryCodeIsoConversionsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("CountryCodeIsoConversionsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCountrySet(string countryCode, string country, string settleDays, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = countryCode;
                _args[1] = country;
                _args[2] = settleDays;
                _args[3] = isActive;
                _args[4] = userId;
                _args[5] = userPassword;
                _args[6] = bookGroup;
                _args[7] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CountrySet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCountrySet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CountrySet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrenciesGet(string currencyIso, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = currencyIso;
                _args[1] = userId;
                _args[2] = userPassword;
                _args[3] = bookGroup;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CurrenciesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndCurrenciesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("CurrenciesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencyConversionsGet(string currencyIsoFrom, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = currencyIsoFrom;
                _args[1] = userId;
                _args[2] = userPassword;
                _args[3] = bookGroup;
                _args[4] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyConversionsGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndCurrencyConversionsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("CurrencyConversionsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencyConversionSet(string currencyIsoFrom, string currencyIsoTo, string currencyConvertRate, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = currencyIsoFrom;
                _args[1] = currencyIsoTo;
                _args[2] = currencyConvertRate;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CurrencyConversionSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCurrencyConversionSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CurrencyConversionSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrencySet(string currencyIso, string currency, bool isActive, string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = currencyIso;
                _args[1] = currency;
                _args[2] = isActive;
                _args[3] = userId;
                _args[4] = userPassword;
                _args[5] = bookGroup;
                _args[6] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("CurrencySet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCurrencySet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CurrencySet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeliveryTypesGet(string userId, string userPassword, string bookGroup, string functionPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = userPassword;
                _args[2] = bookGroup;
                _args[3] = functionPath;
                System.IAsyncResult _result = base.BeginInvoke("DeliveryTypesGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDeliveryTypesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DeliveryTypesGet", _args, result)));
                return _result;
            }
        }
    }
}
