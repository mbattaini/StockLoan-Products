//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50630.0
// 
namespace ShortSaleLocatesClient.ServiceLocate {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceLocate.ILocateService")]
    public interface ILocateService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILocateService/LocateGet", ReplyAction="http://tempuri.org/ILocateService/LocateGetResponse")]
        System.IAsyncResult BeginLocateGet(string tradeDate, string groupCode, string locateId, string status, short utcOffset, System.AsyncCallback callback, object asyncState);
        
        byte[] EndLocateGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILocateService/LocateSet", ReplyAction="http://tempuri.org/ILocateService/LocateSetResponse")]
        System.IAsyncResult BeginLocateSet(string locateId, string comment, string quantity, string userId, System.AsyncCallback callback, object asyncState);
        
        void EndLocateSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILocateService/SeucrityIdInformationGet", ReplyAction="http://tempuri.org/ILocateService/SeucrityIdInformationGetResponse")]
        System.IAsyncResult BeginSeucrityIdInformationGet(string secId, System.AsyncCallback callback, object asyncState);
        
        void EndSeucrityIdInformationGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILocateService/LocateResearchGet", ReplyAction="http://tempuri.org/ILocateService/LocateResearchGetResponse")]
        System.IAsyncResult BeginLocateResearchGet(
                    string locateId, 
                    string startDate, 
                    string stopDate, 
                    string clientId, 
                    string groupCode, 
                    string secId, 
                    string source, 
                    string status, 
                    string actor, 
                    string comment, 
                    string clientQuantity, 
                    string clientQuantityOperator, 
                    string quantity, 
                    string quantityOperator, 
                    string openTime, 
                    string openTimeOperator, 
                    short utcOffset, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        byte[] EndLocateResearchGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocateServiceChannel : ShortSaleLocatesClient.ServiceLocate.ILocateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocateGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LocateGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocateResearchGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LocateResearchGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocateServiceClient : System.ServiceModel.ClientBase<ShortSaleLocatesClient.ServiceLocate.ILocateService>, ShortSaleLocatesClient.ServiceLocate.ILocateService {
        
        private BeginOperationDelegate onBeginLocateGetDelegate;
        
        private EndOperationDelegate onEndLocateGetDelegate;
        
        private System.Threading.SendOrPostCallback onLocateGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginLocateSetDelegate;
        
        private EndOperationDelegate onEndLocateSetDelegate;
        
        private System.Threading.SendOrPostCallback onLocateSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSeucrityIdInformationGetDelegate;
        
        private EndOperationDelegate onEndSeucrityIdInformationGetDelegate;
        
        private System.Threading.SendOrPostCallback onSeucrityIdInformationGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginLocateResearchGetDelegate;
        
        private EndOperationDelegate onEndLocateResearchGetDelegate;
        
        private System.Threading.SendOrPostCallback onLocateResearchGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LocateServiceClient() {
        }
        
        public LocateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LocateGetCompletedEventArgs> LocateGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LocateSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SeucrityIdInformationGetCompleted;
        
        public event System.EventHandler<LocateResearchGetCompletedEventArgs> LocateResearchGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ShortSaleLocatesClient.ServiceLocate.ILocateService.BeginLocateGet(string tradeDate, string groupCode, string locateId, string status, short utcOffset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLocateGet(tradeDate, groupCode, locateId, status, utcOffset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] ShortSaleLocatesClient.ServiceLocate.ILocateService.EndLocateGet(System.IAsyncResult result) {
            return base.Channel.EndLocateGet(result);
        }
        
        private System.IAsyncResult OnBeginLocateGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tradeDate = ((string)(inValues[0]));
            string groupCode = ((string)(inValues[1]));
            string locateId = ((string)(inValues[2]));
            string status = ((string)(inValues[3]));
            short utcOffset = ((short)(inValues[4]));
            return ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).BeginLocateGet(tradeDate, groupCode, locateId, status, utcOffset, callback, asyncState);
        }
        
        private object[] OnEndLocateGet(System.IAsyncResult result) {
            byte[] retVal = ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).EndLocateGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLocateGetCompleted(object state) {
            if ((this.LocateGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LocateGetCompleted(this, new LocateGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LocateGetAsync(string tradeDate, string groupCode, string locateId, string status, short utcOffset) {
            this.LocateGetAsync(tradeDate, groupCode, locateId, status, utcOffset, null);
        }
        
        public void LocateGetAsync(string tradeDate, string groupCode, string locateId, string status, short utcOffset, object userState) {
            if ((this.onBeginLocateGetDelegate == null)) {
                this.onBeginLocateGetDelegate = new BeginOperationDelegate(this.OnBeginLocateGet);
            }
            if ((this.onEndLocateGetDelegate == null)) {
                this.onEndLocateGetDelegate = new EndOperationDelegate(this.OnEndLocateGet);
            }
            if ((this.onLocateGetCompletedDelegate == null)) {
                this.onLocateGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLocateGetCompleted);
            }
            base.InvokeAsync(this.onBeginLocateGetDelegate, new object[] {
                        tradeDate,
                        groupCode,
                        locateId,
                        status,
                        utcOffset}, this.onEndLocateGetDelegate, this.onLocateGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ShortSaleLocatesClient.ServiceLocate.ILocateService.BeginLocateSet(string locateId, string comment, string quantity, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLocateSet(locateId, comment, quantity, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ShortSaleLocatesClient.ServiceLocate.ILocateService.EndLocateSet(System.IAsyncResult result) {
            base.Channel.EndLocateSet(result);
        }
        
        private System.IAsyncResult OnBeginLocateSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string locateId = ((string)(inValues[0]));
            string comment = ((string)(inValues[1]));
            string quantity = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            return ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).BeginLocateSet(locateId, comment, quantity, userId, callback, asyncState);
        }
        
        private object[] OnEndLocateSet(System.IAsyncResult result) {
            ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).EndLocateSet(result);
            return null;
        }
        
        private void OnLocateSetCompleted(object state) {
            if ((this.LocateSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LocateSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LocateSetAsync(string locateId, string comment, string quantity, string userId) {
            this.LocateSetAsync(locateId, comment, quantity, userId, null);
        }
        
        public void LocateSetAsync(string locateId, string comment, string quantity, string userId, object userState) {
            if ((this.onBeginLocateSetDelegate == null)) {
                this.onBeginLocateSetDelegate = new BeginOperationDelegate(this.OnBeginLocateSet);
            }
            if ((this.onEndLocateSetDelegate == null)) {
                this.onEndLocateSetDelegate = new EndOperationDelegate(this.OnEndLocateSet);
            }
            if ((this.onLocateSetCompletedDelegate == null)) {
                this.onLocateSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLocateSetCompleted);
            }
            base.InvokeAsync(this.onBeginLocateSetDelegate, new object[] {
                        locateId,
                        comment,
                        quantity,
                        userId}, this.onEndLocateSetDelegate, this.onLocateSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ShortSaleLocatesClient.ServiceLocate.ILocateService.BeginSeucrityIdInformationGet(string secId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSeucrityIdInformationGet(secId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ShortSaleLocatesClient.ServiceLocate.ILocateService.EndSeucrityIdInformationGet(System.IAsyncResult result) {
            base.Channel.EndSeucrityIdInformationGet(result);
        }
        
        private System.IAsyncResult OnBeginSeucrityIdInformationGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string secId = ((string)(inValues[0]));
            return ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).BeginSeucrityIdInformationGet(secId, callback, asyncState);
        }
        
        private object[] OnEndSeucrityIdInformationGet(System.IAsyncResult result) {
            ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).EndSeucrityIdInformationGet(result);
            return null;
        }
        
        private void OnSeucrityIdInformationGetCompleted(object state) {
            if ((this.SeucrityIdInformationGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SeucrityIdInformationGetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SeucrityIdInformationGetAsync(string secId) {
            this.SeucrityIdInformationGetAsync(secId, null);
        }
        
        public void SeucrityIdInformationGetAsync(string secId, object userState) {
            if ((this.onBeginSeucrityIdInformationGetDelegate == null)) {
                this.onBeginSeucrityIdInformationGetDelegate = new BeginOperationDelegate(this.OnBeginSeucrityIdInformationGet);
            }
            if ((this.onEndSeucrityIdInformationGetDelegate == null)) {
                this.onEndSeucrityIdInformationGetDelegate = new EndOperationDelegate(this.OnEndSeucrityIdInformationGet);
            }
            if ((this.onSeucrityIdInformationGetCompletedDelegate == null)) {
                this.onSeucrityIdInformationGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSeucrityIdInformationGetCompleted);
            }
            base.InvokeAsync(this.onBeginSeucrityIdInformationGetDelegate, new object[] {
                        secId}, this.onEndSeucrityIdInformationGetDelegate, this.onSeucrityIdInformationGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ShortSaleLocatesClient.ServiceLocate.ILocateService.BeginLocateResearchGet(
                    string locateId, 
                    string startDate, 
                    string stopDate, 
                    string clientId, 
                    string groupCode, 
                    string secId, 
                    string source, 
                    string status, 
                    string actor, 
                    string comment, 
                    string clientQuantity, 
                    string clientQuantityOperator, 
                    string quantity, 
                    string quantityOperator, 
                    string openTime, 
                    string openTimeOperator, 
                    short utcOffset, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginLocateResearchGet(locateId, startDate, stopDate, clientId, groupCode, secId, source, status, actor, comment, clientQuantity, clientQuantityOperator, quantity, quantityOperator, openTime, openTimeOperator, utcOffset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] ShortSaleLocatesClient.ServiceLocate.ILocateService.EndLocateResearchGet(System.IAsyncResult result) {
            return base.Channel.EndLocateResearchGet(result);
        }
        
        private System.IAsyncResult OnBeginLocateResearchGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string locateId = ((string)(inValues[0]));
            string startDate = ((string)(inValues[1]));
            string stopDate = ((string)(inValues[2]));
            string clientId = ((string)(inValues[3]));
            string groupCode = ((string)(inValues[4]));
            string secId = ((string)(inValues[5]));
            string source = ((string)(inValues[6]));
            string status = ((string)(inValues[7]));
            string actor = ((string)(inValues[8]));
            string comment = ((string)(inValues[9]));
            string clientQuantity = ((string)(inValues[10]));
            string clientQuantityOperator = ((string)(inValues[11]));
            string quantity = ((string)(inValues[12]));
            string quantityOperator = ((string)(inValues[13]));
            string openTime = ((string)(inValues[14]));
            string openTimeOperator = ((string)(inValues[15]));
            short utcOffset = ((short)(inValues[16]));
            return ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).BeginLocateResearchGet(locateId, startDate, stopDate, clientId, groupCode, secId, source, status, actor, comment, clientQuantity, clientQuantityOperator, quantity, quantityOperator, openTime, openTimeOperator, utcOffset, callback, asyncState);
        }
        
        private object[] OnEndLocateResearchGet(System.IAsyncResult result) {
            byte[] retVal = ((ShortSaleLocatesClient.ServiceLocate.ILocateService)(this)).EndLocateResearchGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLocateResearchGetCompleted(object state) {
            if ((this.LocateResearchGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LocateResearchGetCompleted(this, new LocateResearchGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LocateResearchGetAsync(
                    string locateId, 
                    string startDate, 
                    string stopDate, 
                    string clientId, 
                    string groupCode, 
                    string secId, 
                    string source, 
                    string status, 
                    string actor, 
                    string comment, 
                    string clientQuantity, 
                    string clientQuantityOperator, 
                    string quantity, 
                    string quantityOperator, 
                    string openTime, 
                    string openTimeOperator, 
                    short utcOffset) {
            this.LocateResearchGetAsync(locateId, startDate, stopDate, clientId, groupCode, secId, source, status, actor, comment, clientQuantity, clientQuantityOperator, quantity, quantityOperator, openTime, openTimeOperator, utcOffset, null);
        }
        
        public void LocateResearchGetAsync(
                    string locateId, 
                    string startDate, 
                    string stopDate, 
                    string clientId, 
                    string groupCode, 
                    string secId, 
                    string source, 
                    string status, 
                    string actor, 
                    string comment, 
                    string clientQuantity, 
                    string clientQuantityOperator, 
                    string quantity, 
                    string quantityOperator, 
                    string openTime, 
                    string openTimeOperator, 
                    short utcOffset, 
                    object userState) {
            if ((this.onBeginLocateResearchGetDelegate == null)) {
                this.onBeginLocateResearchGetDelegate = new BeginOperationDelegate(this.OnBeginLocateResearchGet);
            }
            if ((this.onEndLocateResearchGetDelegate == null)) {
                this.onEndLocateResearchGetDelegate = new EndOperationDelegate(this.OnEndLocateResearchGet);
            }
            if ((this.onLocateResearchGetCompletedDelegate == null)) {
                this.onLocateResearchGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLocateResearchGetCompleted);
            }
            base.InvokeAsync(this.onBeginLocateResearchGetDelegate, new object[] {
                        locateId,
                        startDate,
                        stopDate,
                        clientId,
                        groupCode,
                        secId,
                        source,
                        status,
                        actor,
                        comment,
                        clientQuantity,
                        clientQuantityOperator,
                        quantity,
                        quantityOperator,
                        openTime,
                        openTimeOperator,
                        utcOffset}, this.onEndLocateResearchGetDelegate, this.onLocateResearchGetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ShortSaleLocatesClient.ServiceLocate.ILocateService CreateChannel() {
            return new LocateServiceClientChannel(this);
        }
        
        private class LocateServiceClientChannel : ChannelBase<ShortSaleLocatesClient.ServiceLocate.ILocateService>, ShortSaleLocatesClient.ServiceLocate.ILocateService {
            
            public LocateServiceClientChannel(System.ServiceModel.ClientBase<ShortSaleLocatesClient.ServiceLocate.ILocateService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLocateGet(string tradeDate, string groupCode, string locateId, string status, short utcOffset, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = tradeDate;
                _args[1] = groupCode;
                _args[2] = locateId;
                _args[3] = status;
                _args[4] = utcOffset;
                System.IAsyncResult _result = base.BeginInvoke("LocateGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndLocateGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("LocateGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLocateSet(string locateId, string comment, string quantity, string userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = locateId;
                _args[1] = comment;
                _args[2] = quantity;
                _args[3] = userId;
                System.IAsyncResult _result = base.BeginInvoke("LocateSet", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLocateSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LocateSet", _args, result);
            }
            
            public System.IAsyncResult BeginSeucrityIdInformationGet(string secId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = secId;
                System.IAsyncResult _result = base.BeginInvoke("SeucrityIdInformationGet", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSeucrityIdInformationGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SeucrityIdInformationGet", _args, result);
            }
            
            public System.IAsyncResult BeginLocateResearchGet(
                        string locateId, 
                        string startDate, 
                        string stopDate, 
                        string clientId, 
                        string groupCode, 
                        string secId, 
                        string source, 
                        string status, 
                        string actor, 
                        string comment, 
                        string clientQuantity, 
                        string clientQuantityOperator, 
                        string quantity, 
                        string quantityOperator, 
                        string openTime, 
                        string openTimeOperator, 
                        short utcOffset, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[17];
                _args[0] = locateId;
                _args[1] = startDate;
                _args[2] = stopDate;
                _args[3] = clientId;
                _args[4] = groupCode;
                _args[5] = secId;
                _args[6] = source;
                _args[7] = status;
                _args[8] = actor;
                _args[9] = comment;
                _args[10] = clientQuantity;
                _args[11] = clientQuantityOperator;
                _args[12] = quantity;
                _args[13] = quantityOperator;
                _args[14] = openTime;
                _args[15] = openTimeOperator;
                _args[16] = utcOffset;
                System.IAsyncResult _result = base.BeginInvoke("LocateResearchGet", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndLocateResearchGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("LocateResearchGet", _args, result)));
                return _result;
            }
        }
    }
}
