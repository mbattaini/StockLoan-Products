//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Data;
using System.Windows.Forms;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;

using StockLoan.Locates.Infrastructure.Interface;

using StockLoan.Locates.LocatesClientModule.Constants;

namespace StockLoan.Locates.LocatesClientModule
{
    public partial class LocatesView : UserControl, ILocatesView, ISmartPartInfoProvider
    {

        
        
        //-----------------------------------------------------------------------------------------
        #region Members
        string strDomainUser = "";


        #endregion



        //-----------------------------------------------------------------------------------------
        // These Local Form Events Raise Global CAB Events, 
        // The Controller Only Responds to the CAB Events
        #region Events

        //-----------------------------------------------------------------------------------------
        // OnLocatesGridError
        [EventPublication(EventTopicNames.LocatesGridError, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1TrueDBGrid.ErrorEventArgs> LocatesGridError;
        private void gridLocates_Error(object sender, C1.Win.C1TrueDBGrid.ErrorEventArgs e)
        {
            OnLocatesGridError(e);
        }
        protected virtual void OnLocatesGridError(C1.Win.C1TrueDBGrid.ErrorEventArgs eventArgs)
        {
            if (LocatesGridError != null)
            {
                LocatesGridError(this, eventArgs);
            }
        }

        //-----------------------------------------------------------------------------------------
        // OnLocatesGridMouseDown
        [EventPublication(EventTopicNames.LocatesGridMouseDown, PublicationScope.Global)]
        public event EventHandler<MouseEventArgs> LocatesGridMouseDown;
        private void gridLocates_MouseDown(object sender, MouseEventArgs e)
        {
            OnLocatesGridMouseDown(e);
        }        
        protected virtual void OnLocatesGridMouseDown(MouseEventArgs eventArgs)
        {
            if (LocatesGridMouseDown != null)
            {
                LocatesGridMouseDown(this, eventArgs);
            }
        }

        //-----------------------------------------------------------------------------------------
        // OnLocatesGridKeyPress
        [EventPublication(EventTopicNames.LocatesGridKeyPress, PublicationScope.Global)]
        public event EventHandler<KeyPressEventArgs> LocatesGridKeyPress;
        private void gridLocates_KeyPress(object sender, KeyPressEventArgs e)
        {
            OnLocatesGridKeyPress(e);
        }
        protected virtual void OnLocatesGridKeyPress(KeyPressEventArgs eventArgs)
        {
            if (LocatesGridKeyPress != null)
            {
                LocatesGridKeyPress(this, eventArgs);
            }
        }

        //-----------------------------------------------------------------------------------------
        // OnLocatesGridBeforeColumnUpdate
        [EventPublication(EventTopicNames.LocatesGridBeforeColumnUpdate, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs> LocatesGridBeforeColumnUpdate;
        private void gridLocates_BeforeColUpdate(object sender, C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs e)
        {
            OnLocatesGridBeforeColumnUpdate(e);
        }
        protected virtual void OnLocatesGridBeforeColumnUpdate(C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs eventArgs)
        {
            if (LocatesGridBeforeColumnUpdate != null)
            {
                LocatesGridBeforeColumnUpdate(this, eventArgs);
            }
        }

        //-----------------------------------------------------------------------------------------
        // OnLocatesGridFormatText
        [EventPublication(EventTopicNames.LocatesGridFormatText, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1TrueDBGrid.FormatTextEventArgs> LocatesGridFormatText;
        private void gridLocates_FormatText(object sender, C1.Win.C1TrueDBGrid.FormatTextEventArgs e)
        {
            OnLocatesGridFormatText(e);
        }
        protected virtual void OnLocatesGridFormatText(C1.Win.C1TrueDBGrid.FormatTextEventArgs eventArgs)
        {
            if (LocatesGridFormatText != null)
            {
                LocatesGridFormatText(this, eventArgs);
            }
        }


        //-----------------------------------------------------------------------------------------
        // OnTradeDateKeyPress
        [EventPublication(EventTopicNames.TradeDateKeyPress, PublicationScope.Global)]
        public event EventHandler<KeyPressEventArgs> TradeDateKeyPress;
        private void cbxTradeDate_KeyPress(object sender, KeyPressEventArgs e)
        {
            OnTradeDateKeyPress(e);
        }
        protected virtual void OnTradeDateKeyPress(KeyPressEventArgs eventArgs)
        {
            if (TradeDateKeyPress != null)
            {
                TradeDateKeyPress(this, eventArgs);
            }
        }


        //-----------------------------------------------------------------------------------------
        // InventoryListFetchRowStyle
        [EventPublication(EventTopicNames.InventoryListFetchRowStyle, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1List.FetchRowStyleEventArgs> InventoryListFetchRowStyle;
        private void listInventory_FetchRowStyle(object sender, C1.Win.C1List.FetchRowStyleEventArgs e)
        {
            OnInventoryListFetchRowStyle(e);
        }
        protected virtual void OnInventoryListFetchRowStyle(C1.Win.C1List.FetchRowStyleEventArgs eventArgs)
        {
            if (InventoryListFetchRowStyle != null)
            {
                InventoryListFetchRowStyle(this, eventArgs);
            }
        }

        //-----------------------------------------------------------------------------------------
        // InventoryListFormatText
        [EventPublication(EventTopicNames.InventoryListFormatText, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1List.FormatTextEventArgs> InventoryListFormatText;
        private void listInventory_FormatText(object sender, C1.Win.C1List.FormatTextEventArgs e)
        {
            OnInventoryListFormatText(e);
        }
        protected virtual void OnInventoryListFormatText(C1.Win.C1List.FormatTextEventArgs eventArgs)
        {
            if (InventoryListFormatText != null)
            {
                InventoryListFormatText(this, eventArgs);
            }
        }


        //-----------------------------------------------------------------------------------------
        // OnLocateSummaryListFormatText
        [EventPublication(EventTopicNames.LocateSummaryListFormatText, PublicationScope.Global)]
        public event EventHandler<C1.Win.C1List.FormatTextEventArgs> LocateSummaryListFormatText;
        private void listLocateSummary_FormatText(object sender, C1.Win.C1List.FormatTextEventArgs e)
        {
            OnLocateSummaryListFormatText(e);
        }
        protected virtual void OnLocateSummaryListFormatText(C1.Win.C1List.FormatTextEventArgs eventArgs)
        {
            if (LocateSummaryListFormatText != null)
            {
                LocateSummaryListFormatText(this, eventArgs);
            }
        }

        #endregion


        //-----------------------------------------------------------------------------------------
        // View Methods, Control Logic
        #region Methods

        public LocatesView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        public string DomainUser
        {
            get { return strDomainUser; }
            set { strDomainUser = value; }
        }

        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo info;
            switch (smartPartInfoType.Name)
            {
                default:
                    info = new SmartPartInfo("Locates", "StockLoan ShortSale Locator View");
                    break;
            }
            return info;
        }

        #endregion




        //-----------------------------------------------------------------------------------------
        // Impliment the "Passive View" style of MVC by Exposing the Controls Directly to the Controller
        #region Control References
       
        public System.Windows.Forms.Button Submit
        {
            get { return btnSubmit; }
        }
        public C1.Win.C1List.C1Combo TradeDateCombo
        {
            get { return this.cbxTradeDate; }            
        }
        public C1.Win.C1Input.C1Label LabelTradeDate
        {
            get { return lblTradeDate; }
        }

        public C1.Win.C1TrueDBGrid.C1TrueDBGrid LocatesGrid
        {
            get { return this.gridLocates; }
        }
        public C1.Win.C1Input.C1TextBox ClientComment
        {
            get { return tbClientComment; }
        }
        public C1.Win.C1Input.C1TextBox GroupName
        {
            get { return tbGroupName; }
        }
        public C1.Win.C1List.C1List InventoryList
        {
            get { return listInventory; }
        }
        public C1.Win.C1List.C1List LocateSummaryList
        {
            get { return listLocateSummary; }
        }
        public System.Windows.Forms.CheckBox EnableResearch
        {
            get { return chkEnableResearch; }
        }
        public System.Windows.Forms.CheckBox AutoUpdateAll
        {
            get { return chkAutoUpdateAll; }
        }
        public System.Windows.Forms.CheckBox AutoUpdatePending
        {
            get { return chkAutoUpdatePending; }
        }

        public System.Windows.Forms.Button ShowAll
        {
            get { return btnShowAll;  }
        }
        public System.Windows.Forms.Button ShowPending
        {
            get { return btnShowPending; }
        }
        public C1.Win.C1Input.C1TextBox Status
        {
            get { return tbStatus; }
        }

        // These Controls are Enabled and Disabled by the "Research" Check-Box
        public C1.Win.C1Input.C1NumericEdit Quarter
        {
            get { return numQuarter; }
        }
        public C1.Win.C1Input.C1Label LabelQuarter
        {
            get { return lblQuarter; }
        }

        public C1.Win.C1Input.C1NumericEdit Year
        {
            get { return numYear; }
        }
        public C1.Win.C1Input.C1Label LabelYear
        {
            get { return lblYear; }
        }

        public C1.Win.C1Input.C1TextBox SecId
        {
            get { return tbSecId; }
        }
        public C1.Win.C1Input.C1Label LabelSecId
        {
            get { return lblSecurityId; }
        }


        public C1.Win.C1List.C1Combo TradingGroupCombo
        {
            get { return this.cbxTradingGroups; }
        }
        public C1.Win.C1Input.C1Label LabelTradingGroup
        {
            get { return lblTradingGroup; }
        }

        public C1.Win.C1Input.C1TextBox Comment
        {
            get { return tbComment; }
        }
        public C1.Win.C1Input.C1Label LabelComment
        {
            get { return lblComment; }
        }


        public C1.Win.C1Input.C1TextBox Request
        {
            get { return tbRequest; }
        }
        public C1.Win.C1Input.C1Label LabelRequest
        {
            get { return lblRequestedItems; }
        }

        #endregion


































    }

    class LocateEventArgs : EventArgs
    {
    }
}

