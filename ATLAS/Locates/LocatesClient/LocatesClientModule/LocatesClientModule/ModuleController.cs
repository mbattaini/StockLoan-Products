//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;

using System.Drawing;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;

//using Microsoft.Office.Interop.Excel;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.WinForms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.Logging;

using C1.Win.C1TrueDBGrid;

using StockLoan.Common;
using StockLoan.Locates;
using StockLoan.Locates.Infrastructure.Interface;
using StockLoan.Locates.Infrastructure.Interface.Constants;

using StockLoan.Locates.LocatesClientModule.Constants;


namespace StockLoan.Locates.LocatesClientModule
{
    public class ModuleController : WorkItemController
    {
        [EventPublication(LocatesClientModule.Constants.EventTopicNames.SplashStatusUpdate, PublicationScope.Global)]
        public event EventHandler<SplashUpdateEventArgs> SplashStatusUpdate;


        const int QUANTITY = 9;
        const int SOURCE = 10;
        const int FEE_RATE = 12;
        const int PRE_BORROW = 13;

        // GUI
        LocatesView viewLocates;
        PreBorrowView viewPreBorrow;
        SplashForm frmSplash;
        public SplashForm SplashScreen
        {
            get { return frmSplash; }
            set { frmSplash = value; }
        }

        // Server Connection
        LocatesWebClient clientLocatesWeb;

        // Data
        private DataSet datasetLocates, datasetInventory;
        private DataView dataviewLocates, locateSummaryDataView, dataviewTradingGroups;

        //// Startup Progress
        //string strStartupStatus = "";
        //int nStartupProgressPercent = 0;


        // Timers
        private System.Timers.Timer RefreshTimer;
        private System.Timers.Timer UpdateAllRefreshTimer;


        ToolStripStatusLabel barLocatesStatus;
        public string LocatesStatus
        {
            get { return barLocatesStatus.Text; }
            set { barLocatesStatus.Text = value; }
        }

        string strBizDate = "";
        public string BizDate
        {
            get { return strBizDate; }
        }


        string strSecId = "";
        public string SecId
        {
            get { return strSecId; }
            set { strSecId = value; }
        }

        string strGroupCode = "";
        public string GroupCode
        {
            get { return strGroupCode; }
            set { strGroupCode = value; }
        }


        /// <summary>
        /// Main Entry Point For Controller
        /// Everything Starts Here...
        /// </summary>
        public override void Run()
        {
            OpenSplashScreen();
            AddServices();

            AddStatusBar();
            AddWebClient();
            AddData();
            AddViews();
            AddCommands();
            AddTimers();
            ExtendMenu();
            ExtendToolStrip();
            CloseSplashScreen();
        }


        #region Setup Module and Views

        private void OpenSplashScreen()
        {
            SplashScreen = new SplashForm();
            SplashStatusUpdate += new EventHandler<SplashUpdateEventArgs>(SplashScreen.OnSplashStatusUpdate);
            SplashScreen.Show();
        }

        private void CloseSplashScreen()
        {
            RaiseSplashUpdate("Complete.", 100);
            SplashScreen.Hide();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void AddStatusBar()
        {
            // Add the StatusBar to the viewLocates.
            RaiseSplashUpdate("Adding Status Bar", 10);

            barLocatesStatus = new ToolStripStatusLabel();
            WorkItem.UIExtensionSites[Infrastructure.Interface.Constants.UIExtensionSiteNames.MainStatus].Add(barLocatesStatus);
            barLocatesStatus.Enabled = true;
            barLocatesStatus.Visible = true;
        }


        private void AddWebClient()
        {
            RaiseSplashUpdate("Adding Network Server Connection", 20);

            clientLocatesWeb = new LocatesWebClient();
            clientLocatesWeb.ServerUpdated += new EventHandler<LocatesUpdateEventArgs>(clientLocatesWeb_InventoryUpdated);
            clientLocatesWeb.Subscribe();
        }







        /// <summary>
        /// Retrieve Data to Initialize Form
        /// </summary>
        private void AddData()
        {

            datasetLocates = new DataSet();

            DataSet dsTemp = null;
            string strTableName = "";

            // TradingGroups
            strTableName = "TradingGroups";
            RaiseSplashUpdate("Retrieving Data for Trading Groups", 30);

            dsTemp = clientLocatesWeb.TradingGroups();
            datasetLocates.Tables.Add(dsTemp.Tables[strTableName].Copy());
            dsTemp.Clear();

            dataviewTradingGroups = new DataView(datasetLocates.Tables[strTableName]);
            dataviewTradingGroups.RowFilter = "IsActive = 1";
            dataviewTradingGroups.Sort = "GroupName";


            // TradeDates
            strTableName = "TradeDates";
            RaiseSplashUpdate("Retrieving Data for Trading Dates", 40);

            dsTemp = clientLocatesWeb.TradeDates();
            datasetLocates.Tables.Add(dsTemp.Tables[strTableName].Copy());
            dsTemp.Clear();


            // BizDate
            strBizDate = clientLocatesWeb.BizDateExchange();

            // Locates
            strTableName = "Locates";
            RaiseSplashUpdate("Retrieving Locates Data", 50);
            dsTemp = clientLocatesWeb.Locates(UtcOffset, null, strBizDate, strBizDate, null, null, "Pending");
            datasetLocates.Tables.Add(dsTemp.Tables[strTableName].Copy());

            dataviewLocates = new DataView(datasetLocates.Tables["Locates"]);
            dataviewLocates.Sort = "LocateId DESC";

            dsTemp.Clear();
            dsTemp.Dispose();

            // LocateSummary
            strTableName = "LocateSummary";
            RaiseSplashUpdate("Retrieving Locate Summary Data", 60);
            datasetLocates.Tables.Add(strTableName);
            datasetLocates.Tables[strTableName].Columns.Add("SecId", typeof(string));
            datasetLocates.Tables[strTableName].Columns.Add("GroupCode", typeof(string));
            datasetLocates.Tables[strTableName].Columns.Add("ClientQuantity", typeof(long));
            datasetLocates.Tables[strTableName].Columns.Add("Quantity", typeof(long));

            datasetLocates.Tables[strTableName].PrimaryKey = new DataColumn[2] 
                {
                     datasetLocates.Tables[strTableName].Columns["SecId"],
                     datasetLocates.Tables[strTableName].Columns["GroupCode"]
                };

            locateSummaryDataView = new DataView(datasetLocates.Tables[strTableName]);
            locateSummaryDataView.RowFilter = "SecId = ''";
            locateSummaryDataView.Sort = "GroupCode";



        }


        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm
            try
            {
                // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);
                //foreach (KeyValuePair<string, IWorkspace> item in WorkItem.Workspaces)
                //{
                //    IWorkspace wkspc = item.Value;
                //    string str = string.Format("{0}: {1}", item.Key, item.Value.GetType().Name);
                //    System.Diagnostics.Debug.Print(str);
                //} 

                RaiseSplashUpdate("Creating User Controls (View)", 70);

                string strWorkspaceLeft = WorkspaceNames.LeftWorkspace;
                string strWorkspaceRight = WorkspaceNames.RightWorkspace;

                viewLocates = ShowViewInWorkspace<LocatesView>(strWorkspaceRight);
                viewLocates.DomainUser = DomainUser();

                DeckWorkspace wkspcDeckRight = (DeckWorkspace)WorkItem.Workspaces[strWorkspaceRight];
                DeckWorkspace wkspcDeckLeft = (DeckWorkspace)WorkItem.Workspaces[strWorkspaceLeft];

                viewLocates.TradeDateCombo.DataSource = datasetLocates.Tables["TradeDates"];
                viewLocates.TradeDateCombo.DisplayMember = "TradeDate";
                viewLocates.TradeDateCombo.DataMember = "TradeDate";
                viewLocates.TradeDateCombo.SelectedIndex = 0;

                //viewLocates.TradingGroupCombo.HoldFields();
                viewLocates.TradingGroupCombo.DataSource = dataviewTradingGroups;
                //viewLocates.TradingGroupCombo.DisplayMember = "GroupName";
                viewLocates.TradingGroupCombo.DataMember = "GroupCode";
                viewLocates.TradingGroupCombo.SelectedIndex = 0;

                viewLocates.LocateSummaryList.HoldFields();
                viewLocates.LocateSummaryList.DataSource = locateSummaryDataView;

                viewLocates.LocatesGrid.SetDataBinding(dataviewLocates, null);

                LocatesGridFill(true);



            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                MessageBox.Show(Ex.Message);
                HandleException(Ex);
            }
        }

        /// <summary>
        /// Use The ActionCatalog to Handle GUI Events
        /// </summary>  
        public void AddCommands()
        {
            try
            {
                ////---------------------------------------------------------------------------------
                //// Work Item Subscribe
                //Command cmdSubscribe = WorkItem.Commands[Constants.CommandNames.Subscribe];
                //EventCommandAdapter<WorkItem> ecaSubscribe = new EventCommandAdapter<WorkItem>(WorkItem, "Activating");
                //cmdSubscribe.AddCommandAdapter(ecaSubscribe);

                //Command cmdUnSubscribe = WorkItem.Commands[Constants.CommandNames.Unsubscribe];
                //EventCommandAdapter<WorkItem> ecaUnSubscribe = new EventCommandAdapter<WorkItem>(WorkItem, "Deactivating");
                //cmdUnSubscribe.AddCommandAdapter(ecaUnSubscribe);

                RaiseSplashUpdate("Connecting User Commands", 80);

                //---------------------------------------------------------------------------------
                // Menu Item Commands
                //Command cmdShowPreBorrow = WorkItem.Commands[Constants.CommandNames.ShowPreBorrow];
                //EventCommandAdapter<Button> ecaShowPreBorrow = new EventCommandAdapter<Button>(viewLocates.Submit, "Click");
                //cmdShowPreBorrow.AddCommandAdapter(ecaShowPreBorrow);



                //---------------------------------------------------------------------------------
                //Buttons
                Command cmdSubmitLocate = WorkItem.Commands[Constants.CommandNames.SubmitLocate];
                EventCommandAdapter<Button> ecaSubmit = new EventCommandAdapter<Button>(viewLocates.Submit, "Click");
                cmdSubmitLocate.AddCommandAdapter(ecaSubmit);

                Command cmdShowAll = WorkItem.Commands[Constants.CommandNames.ShowAll];
                EventCommandAdapter<Button> ecaShowAll = new EventCommandAdapter<Button>(viewLocates.Submit, "Click");
                cmdShowAll.AddCommandAdapter(ecaShowAll);

                Command cmdShowPending = WorkItem.Commands[Constants.CommandNames.ShowPending];
                EventCommandAdapter<Button> ecaShowPending = new EventCommandAdapter<Button>(viewLocates.ShowPending, "Click");
                cmdShowPending.AddCommandAdapter(ecaShowPending);

                //---------------------------------------------------------------------------------
                // Check-Boxes
                Command cmdResearchChange = WorkItem.Commands[Constants.CommandNames.ResearchChange];
                EventCommandAdapter<CheckBox> ecaResearchChange = new EventCommandAdapter<CheckBox>(viewLocates.EnableResearch, "CheckedChanged");
                cmdResearchChange.AddCommandAdapter(ecaResearchChange);

                Command cmdAutoUpdateAllChange = WorkItem.Commands[Constants.CommandNames.AutoUpdateAllChange];
                EventCommandAdapter<CheckBox> ecaAutoUpdateAllChange = new EventCommandAdapter<CheckBox>(viewLocates.AutoUpdateAll, "CheckedChanged");
                cmdAutoUpdateAllChange.AddCommandAdapter(ecaAutoUpdateAllChange);

                Command cmdAutoUpdatePendingChange = WorkItem.Commands[Constants.CommandNames.AutoUpdatePendingChange];
                EventCommandAdapter<CheckBox> ecaAutoUpdatePendingChange = new EventCommandAdapter<CheckBox>(viewLocates.AutoUpdatePending, "CheckedChanged");
                cmdAutoUpdatePendingChange.AddCommandAdapter(ecaAutoUpdatePendingChange);



                //---------------------------------------------------------------------------------
                // GUI ComboBoxes
                Command cmdTradeDateRowChange = WorkItem.Commands[Constants.CommandNames.TradeDateRowChange];
                EventCommandAdapter<C1.Win.C1List.C1Combo> ecaTradeDateRowChange = new EventCommandAdapter<C1.Win.C1List.C1Combo>(viewLocates.TradeDateCombo, "RowChange");
                cmdTradeDateRowChange.AddCommandAdapter(ecaTradeDateRowChange);

                Command cmdTradingGroupItemChanged = WorkItem.Commands[Constants.CommandNames.TradingGroupItemChanged];
                EventCommandAdapter<C1.Win.C1List.C1Combo> ecaTradingGroupItemChanged = new EventCommandAdapter<C1.Win.C1List.C1Combo>(viewLocates.TradingGroupCombo, "ItemChanged");
                cmdTradingGroupItemChanged.AddCommandAdapter(ecaTradingGroupItemChanged);


                //---------------------------------------------------------------------------------
                // GUI TextBoxes
                Command cmdRequestTextChanged = WorkItem.Commands[Constants.CommandNames.RequestTextChanged];
                EventCommandAdapter<C1.Win.C1Input.C1TextBox> ecaRequestTextChanged = new EventCommandAdapter<C1.Win.C1Input.C1TextBox>(viewLocates.Request, "TextChanged");
                cmdRequestTextChanged.AddCommandAdapter(ecaRequestTextChanged);

                Command cmdSecIdTextChanged = WorkItem.Commands[Constants.CommandNames.SecIdTextChanged];
                EventCommandAdapter<C1.Win.C1Input.C1TextBox> ecaSecIdTextChanged = new EventCommandAdapter<C1.Win.C1Input.C1TextBox>(viewLocates.SecId, "TextChanged");
                cmdSecIdTextChanged.AddCommandAdapter(ecaSecIdTextChanged);

                Command cmdCommentTextChanged = WorkItem.Commands[Constants.CommandNames.CommentTextChanged];
                EventCommandAdapter<C1.Win.C1Input.C1TextBox> ecaCommentTextChanged = new EventCommandAdapter<C1.Win.C1Input.C1TextBox>(viewLocates.Comment, "TextChanged");
                cmdCommentTextChanged.AddCommandAdapter(ecaCommentTextChanged);



                //---------------------------------------------------------------------------------
                // GUI Internal Events
                Command cmdLocatesGridPaint = WorkItem.Commands[Constants.CommandNames.LocatesGridPaint];
                EventCommandAdapter<C1.Win.C1TrueDBGrid.C1TrueDBGrid> ecaLocatesGridPaint = new EventCommandAdapter<C1.Win.C1TrueDBGrid.C1TrueDBGrid>(viewLocates.LocatesGrid, "Paint");
                cmdLocatesGridPaint.AddCommandAdapter(ecaLocatesGridPaint);

                Command cmdLocatesGridBeforeUpdate = WorkItem.Commands[Constants.CommandNames.LocatesGridBeforeUpdate];
                EventCommandAdapter<C1.Win.C1TrueDBGrid.C1TrueDBGrid> ecaLocatesGridBeforeUpdate = new EventCommandAdapter<C1.Win.C1TrueDBGrid.C1TrueDBGrid>(viewLocates.LocatesGrid, "BeforeUpdate");
                cmdLocatesGridBeforeUpdate.AddCommandAdapter(ecaLocatesGridBeforeUpdate);


            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                MessageBox.Show(Ex.Message);
                HandleException(Ex);
            }
        }


        private void AddTimers()
        {
            RaiseSplashUpdate("Starting Timers", 90);
            RefreshTimer = new System.Timers.Timer();
            RefreshTimer.Interval = double.Parse(Standard.ConfigValue("ShortSaleRefreshInterval", "30")) * 1000;
            ((System.ComponentModel.ISupportInitialize)(this.RefreshTimer)).BeginInit();
            RefreshTimer.Interval = 20000;
            RefreshTimer.SynchronizingObject = (System.ComponentModel.ISynchronizeInvoke)viewLocates;
            RefreshTimer.Elapsed += new System.Timers.ElapsedEventHandler(this.RefreshTimer_Elapsed);
            ((System.ComponentModel.ISupportInitialize)(this.RefreshTimer)).EndInit();


            UpdateAllRefreshTimer = new System.Timers.Timer();
            ((System.ComponentModel.ISupportInitialize)(this.UpdateAllRefreshTimer)).BeginInit();
            UpdateAllRefreshTimer.Interval = 20000;
            UpdateAllRefreshTimer.SynchronizingObject = (System.ComponentModel.ISynchronizeInvoke)viewLocates;
            UpdateAllRefreshTimer.Elapsed += new System.Timers.ElapsedEventHandler(this.UpdateAllRefreshTimer_Elapsed);
            ((System.ComponentModel.ISupportInitialize)(this.UpdateAllRefreshTimer)).EndInit();

        }


        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm

            RaiseSplashUpdate("Adding Context menu", 92);


            viewLocates.ContextMenuStrip = new ContextMenuStrip();

            AddMainMenuItem(Constants.CommandNames.ActionZeroLocates, "Zero Locates", "Action");
            AddContextMenuItem(Constants.CommandNames.ActionZeroLocates, "Zero Locates", "Action");

            AddMainMenuItem(Constants.CommandNames.SendToEmail, "Send To Email", "Send To");
            AddContextMenuItem(Constants.CommandNames.SendToEmail, "Send To Email", "Send To");

            AddMainMenuItem(Constants.CommandNames.SendToExcel, "Send To Exchange", "Send To");
            AddContextMenuItem(Constants.CommandNames.SendToExcel, "Send To Exchange", "Send To");

            AddMainMenuItem(Constants.CommandNames.ShowPreBorrow, "Show Pre-Borrow", "Show");
            AddContextMenuItem(Constants.CommandNames.ShowPreBorrow, "Show Pre-Borrow", "Show");

        }

        // Add Items to the Main Menu
        private void AddMainMenuItem(string CommandName, string CommandText, string RootMenuName)
        {
            string strMenuLocation = Infrastructure.Interface.Constants.UIExtensionSiteNames.MainToolbar;

            ToolStripMenuItem menuitemCommand = new ToolStripMenuItem();
            menuitemCommand.Name = CommandText;
            menuitemCommand.Text = CommandText;
            WorkItem.Commands[CommandName].AddInvoker(menuitemCommand, "Click");

            if (string.IsNullOrEmpty(RootMenuName))
            {
                WorkItem.UIExtensionSites[strMenuLocation].Add(menuitemCommand);
            }
            else
            {
                // Try To Find the Root MenuItem Node
                ToolStripMenuItem RootMenu = null;
                foreach (ToolStripMenuItem itemRootMenu in WorkItem.UIExtensionSites[strMenuLocation])
                {
                    if ((RootMenuName == itemRootMenu.Name) || (RootMenuName == itemRootMenu.Text))
                    {
                        RootMenu = itemRootMenu;
                        break;
                    }
                }

                // If We Did Not Find RootMenu, Must Create a Root Menu
                if (null == RootMenu)   
                {
                    RootMenu = new ToolStripMenuItem(RootMenuName);
                    RootMenu.Name = RootMenuName;
                    WorkItem.UIExtensionSites[strMenuLocation].Add<ToolStripMenuItem>(RootMenu);
                }
                
                // Then Add the New Item 
                ((ToolStripDropDownItem)RootMenu).DropDownItems.Add(menuitemCommand);
            }
        }

        //-----------------------------------------------------------------------------------------
        // Add Items to Right-Click Menu
        private void AddContextMenuItem(string CommandName, string CommandText, string RootMenuName)
        {
            ContextMenuStrip menuContext = viewLocates.ContextMenuStrip;

            ToolStripMenuItem menuitemCommand = new ToolStripMenuItem();
            menuitemCommand.Name = CommandText;
            menuitemCommand.Text = CommandText;
            WorkItem.Commands[CommandName].AddInvoker(menuitemCommand, "Click");

            if (string.IsNullOrEmpty(RootMenuName))
            {
                menuContext.Items.Add(menuitemCommand);
            }
            else
            {
                // Try To Find the Root MenuItem Node
                ToolStripMenuItem RootMenu = null;
                foreach (ToolStripMenuItem itemRootMenu in menuContext.Items)
                {
                    if ((RootMenuName == itemRootMenu.Name) || (RootMenuName == itemRootMenu.Text))
                    {
                        RootMenu = itemRootMenu;
                        break;
                    }
                }

                // If We Did Not Find RootMenu, Must Create a Root Menu
                if (null == RootMenu)
                {
                    RootMenu = new ToolStripMenuItem(RootMenuName);
                    RootMenu.Name = RootMenuName;
                    menuContext.Items.Add(RootMenu);
                }

                // Then Add the New Item 
                ((ToolStripDropDownItem)RootMenu).DropDownItems.Add(menuitemCommand);
            }
        }


        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm

            //AddToolStripButton(Constants.CommandNames.EchoData, "Hello World");
            //AddToolStripButton(Constants.CommandNames.Subscribe, "Subscribe");
            //AddToolStripButton(Constants.CommandNames.Unsubscribe, "Unsubscribe");
            //AddToolStripButton(Constants.CommandNames.SubmitLocate, "Submit Locate Request");
        }

        // This method creates a ToolStripButton and adds it to the MainToolbar using the UIExtensionSites. Then it associates the Click event of the button
        // to a command. UIExtensionSites are points of extension where modules can add UI elements, such as items in a toolbar.
        private void AddToolStripButton(string commandName, string text)
        {
            ToolStripButton button = new ToolStripButton();
            button.Text = text;
            button.ToolTipText = text;

            // Add the button to the MainToolBar.
            WorkItem.UIExtensionSites[Infrastructure.Interface.Constants.UIExtensionSiteNames.MainToolbar].Add(button);

            // Associate the Click event of the button to a command
            WorkItem.Commands[commandName].AddInvoker(button, "Click");
        }

        #endregion


        //-----------------------------------------------------------------------------------------
        #region Properties

        public short UtcOffset
        {
            get
            {
                TimeSpan timeSpan = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now);
                return (short)(timeSpan.Hours * 60);
            }
        }

        public string DomainUser()
        {
            return string.Format("{0}\\{1}", SystemInformation.UserDomainName, SystemInformation.UserName);
        }

        #endregion


        //-----------------------------------------------------------------------------------------
        // Event Publications
        #region Publications

        protected void RaiseSplashUpdate(string StatusMessage, int PercentComplete)
        {
            SplashUpdateEventArgs argsEvent = new SplashUpdateEventArgs();
            argsEvent.Message = StatusMessage;
            argsEvent.PercentComplete = PercentComplete;

            if (SplashStatusUpdate != null)
            {
                SplashStatusUpdate(this, argsEvent);
            }
        }




        #endregion


        //-----------------------------------------------------------------------------------------
        // Event Subscriptions
        #region Event Subscriptions


        //-----------------------------------------------------------------------------------------
        // WebServer-Event Handlers
        void clientLocatesWeb_InventoryUpdated(object sender, LocatesUpdateEventArgs e)
        {
            LocatesStatus = e.Message;
        }

        //-----------------------------------------------------------------------------------------
        // Local Timer-Event Handlers
        private void RefreshTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (RefreshTimer.Enabled)
            {
                RefreshTimer.Enabled = false;

                if (viewLocates.AutoUpdateAll.Checked) { LocatesGridFill(false); }
                else if (viewLocates.AutoUpdatePending.Checked) { LocatesGridFill(true); }

                InventoryListFill("", "");
                RefreshTimer.Enabled = true;
            }
        }
        private void UpdateAllRefreshTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if ((UpdateAllRefreshTimer.Enabled) && (!RefreshTimer.Enabled))
            {
                UpdateAllRefreshTimer.Enabled = false;
                LocatesGridFill(false);
                UpdateAllRefreshTimer.Enabled = true;
            }
        }


        //-----------------------------------------------------------------------------------------
        // Global CAB-Event Handlers
        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.ShellFormResize, ThreadOption.UserInterface)]
        public void OnShellFormResize(object sender, ShellFormEventArgs e)
        {
            if (e.WindowState.Equals(FormWindowState.Minimized))
            {
                if (!viewLocates.EnableResearch.Checked)
                {
                    viewLocates.AutoUpdateAll.Checked = true;
                }
            }
        }

        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.ShellFormClosing, ThreadOption.UserInterface)]
        public void OnShellFormClosing(object sender, ShellFormEventArgs e)
        {
            clientLocatesWeb.Unsubscribe();

            if (e.WindowState.Equals(FormWindowState.Normal))
            {
                RegistryValue.Write(viewLocates.Name, "Top", e.Bounds.Top.ToString());
                RegistryValue.Write(viewLocates.Name, "Left", e.Bounds.Left.ToString());
                RegistryValue.Write(viewLocates.Name, "Height", e.Bounds.Height.ToString());
                RegistryValue.Write(viewLocates.Name, "Width", e.Bounds.Width.ToString());
            }

            RefreshTimer.Enabled = false;
            UpdateAllRefreshTimer.Enabled = false;
        }

        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.ShellFormDeactivate, ThreadOption.UserInterface)]
        public void OnShellFormDeactivate(object sender, ShellFormEventArgs e)
        {
            if (!viewLocates.EnableResearch.Checked)
            {
                viewLocates.AutoUpdateAll.Checked = true;
            }
        }

        [EventSubscription(LocatesClientModule.Constants.EventTopicNames.LocatesGridError, ThreadOption.UserInterface)]
        public void OnLocatesGridError(object sender, C1.Win.C1TrueDBGrid.ErrorEventArgs e)
        {
            // mainForm.Alert(e.Exception.Message, PilotState.RunFault);
            // e.Handled = true;

            MessageBox.Show(e.Exception.Message);
            HandleException(e.Exception);
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.LocatesGridMouseDown, ThreadOption.UserInterface)]
        public void OnLocatesGridMouseDown(object sender, MouseEventArgs e)
        {
            if (e.X <= viewLocates.LocatesGrid.RecordSelectorWidth && e.Y <= viewLocates.LocatesGrid.RowHeight)
            {
                if (viewLocates.LocatesGrid.SelectedRows.Count.Equals(0))
                {
                    for (int i = 0; i < viewLocates.LocatesGrid.Splits[0, 0].Rows.Count; i++)
                    {
                        viewLocates.LocatesGrid.SelectedRows.Add(i);
                    }

                    foreach (C1.Win.C1TrueDBGrid.C1DataColumn dataColumn in viewLocates.LocatesGrid.Columns)
                    {
                        viewLocates.LocatesGrid.SelectedCols.Add(dataColumn);
                    }
                }
                else
                {
                    viewLocates.LocatesGrid.SelectedRows.Clear();
                    viewLocates.LocatesGrid.SelectedCols.Clear();
                }
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.LocatesGridKeyPress, ThreadOption.UserInterface)]
        public void OnLocatesGridKeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            try
            {
                int i = viewLocates.LocatesGrid.Col;
                string gridData = "";

                if ((e.KeyChar == 9) && (viewLocates.LocatesGrid.Col == PRE_BORROW)) // User has tabbed from the last column.
                {
                    if (viewLocates.LocatesGrid.Splits[0].Rows.Count > (viewLocates.LocatesGrid.Row + 1))
                    {
                        viewLocates.LocatesGrid.Row += 1;
                        e.Handled = true;
                    }

                    return;
                }

                if (e.KeyChar.Equals((char)32) && viewLocates.LocatesGrid.Col.Equals(QUANTITY)
                    && viewLocates.LocatesGrid.Columns[QUANTITY].Text.Trim().Equals("") && viewLocates.LocatesGrid.EditActive) // User wishes to copy client quantity.
                {
                    viewLocates.LocatesGrid.Columns[QUANTITY].Text = viewLocates.LocatesGrid.Columns["Request"].Text;
                    viewLocates.LocatesGrid.Col = SOURCE;

                    return;
                }

                if (e.KeyChar.Equals((char)13))
                {
                    if ((viewLocates.LocatesGrid.Splits[0].Rows.Count == 1) && (viewLocates.LocatesGrid.DataChanged))
                    {
                        viewLocates.LocatesGrid.UpdateData();
                    }
                }

                if (e.KeyChar.Equals((char)3) && viewLocates.LocatesGrid.SelectedRows.Count > 0)
                {
                    foreach (C1.Win.C1TrueDBGrid.C1DataColumn dataColumn in viewLocates.LocatesGrid.SelectedCols)
                    {
                        gridData += dataColumn.Caption + "\t";
                    }
                    gridData += "\n";

                    foreach (int row in viewLocates.LocatesGrid.SelectedRows)
                    {
                        foreach (C1.Win.C1TrueDBGrid.C1DataColumn dataColumn in viewLocates.LocatesGrid.SelectedCols)
                        {
                            gridData += dataColumn.CellText(row) + "\t";
                        }
                        gridData += "\n";
                    }

                    Clipboard.SetDataObject(gridData, true);

                    string strMsg = "Copied " + viewLocates.LocatesGrid.SelectedRows.Count + " rows to the clipboard.";
                    // mainForm.Alert(strMsg, PilotState.Normal);
                    MessageBox.Show(strMsg);

                    e.Handled = true;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.LocatesGridBeforeColumnUpdate, ThreadOption.UserInterface)]
        public void OnLocatesGridBeforeColUpdate(object sender, C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs e)
        {
            try
            {
                if (e.Column.DataColumn.DataField.Equals("PreBorrow"))
                {
                    if ((bool.Parse(e.OldValue.ToString()) == true) && (bool.Parse(viewLocates.LocatesGrid.Columns["PreBorrow"].Value.ToString()) == false))
                    {
                        viewLocates.LocatesGrid.Columns["Source"].Text = "";
                        viewLocates.LocatesGrid.Columns["FeeRate"].Text = "";
                    }
                }
            }
            catch (Exception Ex)
            {
                // mainForm.Alert(error.Message, PilotState.RunFault);
                MessageBox.Show(Ex.Message);
                HandleException(Ex);
            }
        }

        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.LocatesGridFormatText, ThreadOption.UserInterface)]
        public void OnLocatesGridFormatText(object sender, C1.Win.C1TrueDBGrid.FormatTextEventArgs e)
        {
            if (e.Value.Length == 0)
            {
                return;
            }

            try
            {
                switch (viewLocates.LocatesGrid.Columns[e.ColIndex].DataField)
                {
                    case ("LocateIdTail"):
                        e.Value = e.Value.ToString().PadLeft(5, '0');
                        break;
                    case ("OpenTime"):
                        if (viewLocates.EnableResearch.Checked)
                        {
                            e.Value = DateTime.Parse(e.Value).ToString(Standard.DateTimeShortFormat);
                        }
                        else
                        {
                            e.Value = DateTime.Parse(e.Value).ToString(Standard.TimeFileFormat);
                        }
                        break;
                    case ("ClientQuantity"):
                    case ("Quantity"):
                        e.Value = long.Parse(e.Value).ToString("#,##0");
                        break;
                    case ("ActTime"):
                        e.Value = Tools.FormatDate(e.Value.ToString(), "HH:mm:ss");
                        break;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.TradeDateKeyPress, ThreadOption.UserInterface)]
        public void OnTradeDateKeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            if (e.KeyChar.Equals((char)13))
            {
                viewLocates.TradeDateCombo.Text = Tools.FormatDate(viewLocates.TradeDateCombo.Text, Standard.DateFormat);
                e.Handled = true;
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.InventoryListFetchRowStyle, ThreadOption.UserInterface)]
        public void OnInventoryListFetchRowStyle(object sender, C1.Win.C1List.FetchRowStyleEventArgs e)
        {
            try
            {
                if (DateTime.Parse(viewLocates.InventoryList.GetItemText(e.Row, "Received")).ToString(Standard.DateFormat).CompareTo(viewLocates.TradeDateCombo.Tag) >= 0)
                {
                    if (long.Parse(viewLocates.InventoryList.Columns["Quantity"].CellValue(e.Row).ToString()) < 0)
                    {
                        e.CellStyle.ForeColor = Color.Red;
                    }
                    else
                    {
                        e.CellStyle.ForeColor = Color.Navy;
                    }
                }
                else
                {
                    e.CellStyle.ForeColor = Color.Gray;
                }
            }
            catch (Exception Ex)
            {
                // mainForm.Alert(Ex.Message, PilotState.RunFault);
                MessageBox.Show(Ex.Message);
                HandleException(Ex);
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.InventoryListFormatText, ThreadOption.UserInterface)]
        public void OnInventoryListFormatText(object sender, C1.Win.C1List.FormatTextEventArgs e)
        {
            if (e.Value.Length == 0) // Then nothing to do.
            {
                return;
            }

            try
            {
                switch (viewLocates.InventoryList.Columns[e.ColIndex].DataField)
                {
                    case ("ScribeTime"):
                        e.Value = DateTime.Parse(e.Value).ToString(Standard.DateTimeShortFormat);
                        break;
                    case ("BizDate"):
                        e.Value = DateTime.Parse(e.Value).ToString(Standard.DateFormat);
                        break;
                    case ("Quantity"):
                        e.Value = long.Parse(e.Value).ToString("#,##0");
                        break;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
            }
        }

        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.LocateSummaryListFormatText, ThreadOption.UserInterface)]
        public void OnLocateSummaryListFormatText(object sender, FormatTextEventArgs e)
        {
            if (e.Value.Length == 0)
            {
                return;
            }

            try
            {
                switch (viewLocates.LocateSummaryList.Columns[e.ColIndex].DataField)
                {
                    case ("ClientQuantity"):
                    case ("Quantity"):
                        e.Value = long.Parse(e.Value).ToString("#,##0");
                        break;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
            }
        }




        //-----------------------------------------------------------------------------------------
        // PreBorrow View
        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.PreBorrowGridBeforeUpdate, ThreadOption.UserInterface)]
        private void OnPreBorrowGridBeforeUpdate(object sender, C1.Win.C1TrueDBGrid.CancelEventArgs e)
        {
            try
            {
                if (viewPreBorrow.PreBorrowGrid.Columns["GroupCode"].Text.Equals(""))
                {
                    string strMsg = "Please select a group code.";
                    //mainForm.Alert(strMsg, PilotState.RunFault);
                    MessageBox.Show(strMsg);
                    e.Cancel = true;
                }
                else if (viewPreBorrow.PreBorrowGrid.Columns["SecId"].Text.Equals(""))
                {
                    string strMsg = "Please enter a security id.";
                    //mainForm.Alert(strMsg, PilotState.RunFault);
                    MessageBox.Show(strMsg);
                    e.Cancel = true;
                }
                else if (viewPreBorrow.PreBorrowGrid.Columns["Quantity"].Text.Equals(""))
                {
                    string strMsg = "Please enter a quantity.";
                    //mainForm.Alert(strMsg, PilotState.RunFault);
                    MessageBox.Show(strMsg);
                    e.Cancel = true;
                }
                else
                {
                    clientLocatesWeb.LocatesPreBorrowSet
                    (
                        BizDate,
                        viewPreBorrow.PreBorrowGrid.Columns["GroupCode"].Value.ToString(),
                        viewPreBorrow.PreBorrowGrid.Columns["SecId"].Value.ToString(),
                        viewPreBorrow.PreBorrowGrid.Columns["Quantity"].Value.ToString(),
                        viewPreBorrow.PreBorrowGrid.Columns["RebateRate"].Value.ToString(),
                        DomainUser()
                    );

                    viewPreBorrow.PreBorrowGrid.Columns["ActUserId"].Text = DomainUser();
                    viewPreBorrow.PreBorrowGrid.Columns["ActTime"].Value = DateTime.Now.ToString();

                    e.Cancel = false;
                }
                StatusSet();
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
                e.Cancel = true;
            }
        }


        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.PreBorrowGridKeyPress, ThreadOption.UserInterface)]
        private void OnPreBorrowGridKeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                viewPreBorrow.PreBorrowGrid.UpdateData();
            }
        }

        [EventSubscription(StockLoan.Locates.Infrastructure.Interface.Constants.EventTopicNames.PreBorrowGridFormatText, ThreadOption.UserInterface)]
        private void OnPreBorrowGridFormatText(object sender, C1.Win.C1TrueDBGrid.FormatTextEventArgs e)
        {
            if (e.Value.Length == 0)
            {
                return;
            }

            try
            {
                switch ( viewPreBorrow.PreBorrowGrid.Columns[e.ColIndex].DataField)
                {
                    case ("ActTime"):
                        e.Value = DateTime.Parse(e.Value).ToString(Standard.DateTimeShortFormat);
                        break;

                    case ("AllocatedQuantity"):
                    case ("Quantity"):
                        e.Value = long.Parse(e.Value).ToString("#,##0");
                        break;

                    case ("RebateRate"):
                        e.Value = decimal.Parse(e.Value).ToString("00.000");
                        break;
                }
            }
            catch { }
        }



        private void OnPreBorrowGridBeforeColUpdate(object sender, C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs e)
        {
            try
            {
                switch (e.Column.DataColumn.DataField)
                {
                    case "SecId":
                        SecId = viewPreBorrow.PreBorrowGrid.Columns["SecId"].Text;
                        viewPreBorrow.PreBorrowGrid.Columns["SecId"].Text = SecId;
                        // viewPreBorrow.PreBorrowGrid.Columns["Symbol"].Text = mainForm.Symbol;
                        break;

                    case "Quantity":
                        viewPreBorrow.PreBorrowGrid.Columns["AllocatedQuantity"].Text = "0";
                        break;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
                e.Cancel = true;
            }
        }



        private void StatusSet()
        {
            if (viewPreBorrow.PreBorrowGrid.SelectedRows.Count > 0)
            {
                viewPreBorrow.StatusLabel.Text = "Selected " + viewPreBorrow.PreBorrowGrid.SelectedRows.Count.ToString("#,##0") + " items of "
                    + viewPreBorrow.PreBorrowGrid.Splits[0].Rows.Count.ToString("#,##0") + " shown in grid.";
            }
            else
            {
                viewPreBorrow.StatusLabel.Text = "Showing " + viewPreBorrow.PreBorrowGrid.Splits[0].Rows.Count.ToString("#,##0") + " items in grid.";
            }
        }

        #endregion Event Subscriptions


        //-----------------------------------------------------------------------------------------
        // Command Handler
        #region GUI_CommandHandlers

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm


        //-----------------------------------------------------------------------------------------
        // Command Handlers are used by CAB to Execute Methods when the GUI Raises Events (Button.Click, CheckBox.CheckedChanged, etc...)
        [CommandHandler(Constants.CommandNames.EchoData)]
        public void OnEchoData(object sender, EventArgs e)
        {
            LocatesStatus = clientLocatesWeb.EchoData(42);
        }

        [CommandHandler(Constants.CommandNames.Subscribe)]
        public void OnSubscribe(object sender, EventArgs e)
        {
            clientLocatesWeb.Subscribe();
        }

        [CommandHandler(Constants.CommandNames.Unsubscribe)]
        public void OnUnsubscribe(object sender, EventArgs e)
        {
            clientLocatesWeb.Unsubscribe();
        }

        [CommandHandler(Constants.CommandNames.SubmitLocate)]
        public void OnSubmitLocate(object sender, EventArgs e)
        {
            string tradeDateMin = "";
            string tradeDateMax = "";
            string groupCode = "";

            viewLocates.Cursor = Cursors.WaitCursor;

            if (viewLocates.EnableResearch.Checked)
            {
                switch ((short)viewLocates.Quarter.Value)
                {
                    case 1:
                        tradeDateMin = viewLocates.Year.Text + "-01-01";
                        tradeDateMax = viewLocates.Year.Text + "-03-31";
                        break;
                    case 2:
                        tradeDateMin = viewLocates.Year.Text + "-04-01";
                        tradeDateMax = viewLocates.Year.Text + "-06-30";
                        break;
                    case 3:
                        tradeDateMin = viewLocates.Year.Text + "-07-01";
                        tradeDateMax = viewLocates.Year.Text + "-09-30";
                        break;
                    case 4:
                        tradeDateMin = viewLocates.Year.Text + "-10-01";
                        tradeDateMax = viewLocates.Year.Text + "-12-31";
                        break;
                }

                if (!viewLocates.TradingGroupCombo.Text.Equals("***"))
                {
                    groupCode = viewLocates.TradingGroupCombo.Text;
                }

                string strSecId = viewLocates.SecId.Text.Trim();
                LocatesGridFill(tradeDateMin, tradeDateMax, groupCode, strSecId);

            }
            else
            {
                if (!string.IsNullOrEmpty(viewLocates.Request.Text))
                {
                    string strClientId = viewLocates.DomainUser;
                    string strGroupCode = viewLocates.TradingGroupCombo.Text;
                    string strComment = viewLocates.Comment.Text;
                    string strRequestList = viewLocates.Request.Text;

                    clientLocatesWeb.SubmitLocateList(strClientId, strGroupCode, strComment, strRequestList);

                    viewLocates.Request.Text = "";
                    viewLocates.Request.Text = "";
                }
                viewLocates.Submit.Enabled = false;
            }

            viewLocates.Cursor = Cursors.Default;
        }

        [CommandHandler(Constants.CommandNames.ShowAll)]
        public void OnShowAll(object sender, EventArgs e)
        {
            if (viewLocates.AutoUpdateAll.Checked) { viewLocates.AutoUpdateAll.Checked = false; }
            if (viewLocates.AutoUpdatePending.Checked) { viewLocates.AutoUpdatePending.Checked = false; }

            LocatesGridFill();
        }

        [CommandHandler(Constants.CommandNames.ShowPending)]
        public void OnShowPending(object sender, EventArgs e)
        {
            if (viewLocates.AutoUpdateAll.Checked) { viewLocates.AutoUpdateAll.Checked = false; }
            if (viewLocates.AutoUpdatePending.Checked) { viewLocates.AutoUpdatePending.Checked = false; }

            LocatesGridFill(true);
        }

        [CommandHandler(Constants.CommandNames.LocatesGridPaint)]
        public void OnLocatesGridPaint(object sender, EventArgs e)
        {
            try
            {
                if (!viewLocates.LocatesGrid.Columns["SecId"].Text.Equals(SecId) || !viewLocates.LocatesGrid.Columns["GroupCode"].Text.Trim().Equals(GroupCode.Trim()))
                {
                    SecId = viewLocates.LocatesGrid.Columns["SecId"].Text;
                    GroupCode = viewLocates.LocatesGrid.Columns["GroupCode"].Text;

                    viewLocates.Cursor = Cursors.WaitCursor;

                    viewLocates.ClientComment.Text = viewLocates.LocatesGrid.Columns["ClientComment"].Text;
                    viewLocates.GroupName.Text = viewLocates.LocatesGrid.Columns["GroupName"].Text;

                    InventoryListFill(GroupCode, SecId);
                    LocateSummaryListFill(SecId);

                    viewLocates.Cursor = Cursors.Default;
                }
            }
            catch
            {
                SecId = "";

                viewLocates.Cursor = Cursors.WaitCursor;

                viewLocates.ClientComment.Text = "";
                viewLocates.GroupName.Text = "";

                InventoryListFill("", null);
                LocateSummaryListFill("");

                viewLocates.Cursor = Cursors.Default;
            }
        }


        [CommandHandler(Constants.CommandNames.LocatesGridBeforeUpdate)]
        public void OnLocatesGridBeforeUpdate(object sender, EventArgs e)
        {
            DataSet tempDataSet = new DataSet();

            long locateQuantity = 0;
            float rate;


            if (!viewLocates.LocatesGrid.Columns[QUANTITY].Text.Equals(""))
            {
                try
                {
                    locateQuantity = (long)viewLocates.LocatesGrid.Columns[QUANTITY].Value;
                }
                catch
                {
                    string strMsg = "Entry for the quantity located must be a numeric value!";
                    // mainForm.Alert(strMsg, PilotState.RunFault);
                    MessageBox.Show(strMsg);


                    viewLocates.LocatesGrid.Col = QUANTITY;
                    //e.Cancel = true;
                    return;
                }
            }

            if (!viewLocates.LocatesGrid.Columns["FeeRate"].Text.Equals(""))
            {
                try
                {
                    rate = float.Parse(viewLocates.LocatesGrid.Columns["FeeRate"].Text);
                }
                catch
                {
                    string strMsg = "Entry for a fee must be a numeric value!";
                    // mainForm.Alert(strMsg, PilotState.RunFault);
                    MessageBox.Show(strMsg);

                    viewLocates.LocatesGrid.Col = FEE_RATE;
                    // e.Cancel = true;
                    return;
                }
            }

            viewLocates.LocatesGrid.Columns["Source"].Text = viewLocates.LocatesGrid.Columns["Source"].Text.Trim();

            try
            {
                if (bool.Parse(viewLocates.LocatesGrid.Columns[PRE_BORROW].Value.ToString()) == true)
                {
                    clientLocatesWeb.LocatePreBorrowSubmit
                        (
                            (long)viewLocates.LocatesGrid.Columns["LocateId"].Value,
                            viewLocates.LocatesGrid.Columns["GroupCode"].Text,
                            viewLocates.LocatesGrid.Columns["SecId"].Text,
                            viewLocates.LocatesGrid.Columns["Quantity"].Value.ToString(),
                            viewLocates.LocatesGrid.Columns["FeeRate"].Value.ToString(),
                            DomainUser()
                        );
                }
                else
                {
                    clientLocatesWeb.LocateItemSet
                        (
                            (long)viewLocates.LocatesGrid.Columns["LocateId"].Value,
                            viewLocates.LocatesGrid.Columns["Located"].Value.ToString(),
                            viewLocates.LocatesGrid.Columns["Source"].Text,
                            viewLocates.LocatesGrid.Columns["FeeRate"].Value.ToString(),
                            viewLocates.LocatesGrid.Columns["PreBorrow"].Value.ToString(),
                            viewLocates.LocatesGrid.Columns["Comment"].Text,
                            DomainUser()
                        );
                }

                viewLocates.LocatesGrid.Columns["ActUserShortName"].Text = "me";
                viewLocates.LocatesGrid.Columns["ActTime"].Text = DateTime.Now.ToString("HH:mm:ss");

                if (!viewLocates.LocatesGrid.Columns[QUANTITY].Text.Equals(""))
                {
                    if ((long)viewLocates.LocatesGrid.Columns["Request"].Value <= (long)viewLocates.LocatesGrid.Columns["Located"].Value)
                    {
                        viewLocates.LocatesGrid.Columns["Status"].Text = "FullOK";
                    }
                    else if (locateQuantity > 0)
                    {
                        viewLocates.LocatesGrid.Columns["Status"].Text = "Partial";
                    }
                    else if (locateQuantity == 0)
                    {
                        viewLocates.LocatesGrid.Columns["Status"].Text = "None";
                    }
                }

                tempDataSet = clientLocatesWeb.LocateItemGet(viewLocates.LocatesGrid.Columns["LocateId"].Value.ToString(), UtcOffset);

                foreach (DataRow dr in tempDataSet.Tables["Table"].Rows)
                {
                    datasetLocates.Tables["Locates"].LoadDataRow(dr.ItemArray, true);
                }


                foreach (DataRow dr in tempDataSet.Tables["Table1"].Rows)
                {
                    Log.Write(dr["ClientQuantity"].ToString(), 1);
                    datasetLocates.Tables["LocateSummary"].LoadDataRow(dr.ItemArray, true);
                }

                LocateSummaryListFill(SecId);
            }
            catch (Exception Ex)
            {
                string strMsg = "Error processing the update to ID " + viewLocates.LocatesGrid.Columns["LocateIdTail"].Text + ".";

                // mainForm.Alert(strMsg, PilotState.RunFault);
                MessageBox.Show(strMsg);

                strMsg = Ex.Message + " [ShortSaleLocateForm.LocatesGrid_BeforeUpdate]";

                // Log.Write(ee.Message + , Log.Error, 1);
                WriteLogEntry(strMsg, 1, "General");

                // e.Cancel = true;

                HandleException(Ex);
                return;
            }

        }


        [CommandHandler(Constants.CommandNames.ResearchChange)]
        public void OnEnableResearchChanged(object sender, EventArgs e)
        {
            viewLocates.ClientComment.Value = "";
            viewLocates.GroupName.Value = "";

            viewLocates.SecId.Text = "";
            viewLocates.Comment.Text = "";
            viewLocates.Request.Text = "";

            viewLocates.SecId.Visible = viewLocates.EnableResearch.Checked;
            viewLocates.LabelSecId.Visible = viewLocates.EnableResearch.Checked;

            viewLocates.Year.Visible = viewLocates.EnableResearch.Checked;
            viewLocates.LabelYear.Visible = viewLocates.EnableResearch.Checked;

            viewLocates.Quarter.Visible = viewLocates.EnableResearch.Checked;
            viewLocates.LabelQuarter.Visible = viewLocates.EnableResearch.Checked;

            viewLocates.Comment.Visible = !viewLocates.EnableResearch.Checked;
            viewLocates.LabelComment.Visible = !viewLocates.EnableResearch.Checked;

            viewLocates.Request.Visible = !viewLocates.EnableResearch.Checked;
            viewLocates.LabelRequest.Visible = !viewLocates.EnableResearch.Checked;

            //StatusLabel.Visible = !viewLocates.EnableResearch.Checked;
            //StatusTextBox.Visible = !viewLocates.EnableResearch.Checked;

            viewLocates.ShowAll.Enabled = !viewLocates.EnableResearch.Checked;
            viewLocates.ShowPending.Enabled = !viewLocates.EnableResearch.Checked;

            viewLocates.AutoUpdatePending.Checked = !viewLocates.EnableResearch.Checked;
            viewLocates.AutoUpdatePending.Enabled = !viewLocates.EnableResearch.Checked;

            viewLocates.AutoUpdateAll.Checked = !viewLocates.EnableResearch.Checked;
            viewLocates.AutoUpdateAll.Enabled = !viewLocates.EnableResearch.Checked;

            RefreshTimer.Enabled = !viewLocates.EnableResearch.Checked;

            dataviewLocates.RowFilter = "";

            viewLocates.TradingGroupCombo.ReadOnly = (!viewLocates.EnableResearch.Checked && viewLocates.Request.ReadOnly);

            viewLocates.LabelTradeDate.Enabled = !viewLocates.EnableResearch.Checked;
            viewLocates.TradeDateCombo.Enabled = !viewLocates.EnableResearch.Checked;

            viewLocates.Submit.Enabled = false;
            viewLocates.Refresh();
            if (viewLocates.EnableResearch.Checked)
            {
                datasetLocates.Tables["Locates"].Clear();
                datasetLocates.Tables["Locates"].AcceptChanges();

                viewLocates.LocatesGrid.Splits[0].DisplayColumns["OpenTime"].Width = 115;
                viewLocates.Status.Text = "";
            }
            else
            {
                LocatesGridFill();

                viewLocates.LocatesGrid.Splits[0].DisplayColumns["OpenTime"].Width = 65;
            }
        }

        [CommandHandler(Constants.CommandNames.AutoUpdatePendingChange)]
        public void OnAutoUpdatePendingChange(object sender, System.EventArgs e)
        {
            if (viewLocates.AutoUpdateAll.Checked) { viewLocates.AutoUpdateAll.Checked = false; }
            RefreshTimer.Enabled = viewLocates.AutoUpdatePending.Checked;
        }

        [CommandHandler(Constants.CommandNames.AutoUpdateAllChange)]
        public void OnAutoUpdateAllChange(object sender, System.EventArgs e)
        {
            if (viewLocates.AutoUpdatePending.Checked) { viewLocates.AutoUpdatePending.Checked = false; }
            UpdateAllRefreshTimer.Enabled = viewLocates.AutoUpdateAll.Checked;
        }

        [CommandHandler(Constants.CommandNames.CommentTextChanged)]
        public void OnCommentTextChanged(object sender, System.EventArgs e)
        {
            if (!viewLocates.Comment.Text.Equals(""))
            {
                viewLocates.Submit.Enabled = true;
                viewLocates.Status.Text = "";
            }
        }

        [CommandHandler(Constants.CommandNames.TradeDateRowChange)]
        public void OnTradeDateComboRowChange(object sender, System.EventArgs e)
        {
            if (viewLocates.TradeDateCombo.Enabled && viewLocates.TradeDateCombo.SelectedIndex > -1)
            {
                LocatesGridFill();
            }
        }

        [CommandHandler(Constants.CommandNames.TradingGroupItemChanged)]
        public void OnTradingGroupItemChanged(object sender, System.EventArgs e)
        {
            viewLocates.Status.Text = viewLocates.TradingGroupCombo.GetItemText(viewLocates.TradingGroupCombo.WillChangeToIndex, 1);

            if (viewLocates.EnableResearch.Checked)
            {
                viewLocates.Submit.Enabled = !(viewLocates.TradingGroupCombo.GetItemText(viewLocates.TradingGroupCombo.WillChangeToIndex, 0).Equals("***")
                    && viewLocates.SecId.Text.Trim().Equals(""));
            }
        }

        [CommandHandler(Constants.CommandNames.RequestTextChanged)]
        public void OnRequestTextChanged(object sender, System.EventArgs e)
        {
            if (!string.IsNullOrEmpty(viewLocates.Request.Text))
            {
                viewLocates.Submit.Enabled = true;
                viewLocates.Status.Text = "";
            }
        }

        [CommandHandler(Constants.CommandNames.SecIdTextChanged)]
        public void OnSecIdTextChanged(object sender, System.EventArgs e)
        {
            viewLocates.Submit.Enabled = !(viewLocates.TradingGroupCombo.Text.Equals("***") && viewLocates.SecId.Text.Trim().Equals(""));
        }



        #endregion


        //-----------------------------------------------------------------------------------------
        // Menu Item Commands
        #region Menu Item Handlers


        [CommandHandler(Constants.CommandNames.ActionZeroLocates)]
        public void OnZeroLocates(object sender, System.EventArgs e)
        {
            DataSet tempDataSet = new DataSet();

            try
            {
                for (int count = 0; count < viewLocates.LocatesGrid.SelectedRows.Count; count++)
                {
                    viewLocates.LocatesGrid[viewLocates.LocatesGrid.SelectedRows[count], "Located"] = 0;

                    clientLocatesWeb.LocateItemSet(
                        (long)viewLocates.LocatesGrid.Columns["LocateId"].CellValue(viewLocates.LocatesGrid.SelectedRows[count]),
                        viewLocates.LocatesGrid.Columns["Located"].CellValue(viewLocates.LocatesGrid.SelectedRows[count]).ToString(),
                        viewLocates.LocatesGrid.Columns["Source"].CellText(viewLocates.LocatesGrid.SelectedRows[count]),
                        viewLocates.LocatesGrid.Columns["FeeRate"].CellValue(viewLocates.LocatesGrid.SelectedRows[count]).ToString(),
                        viewLocates.LocatesGrid.Columns["PreBorrow"].CellValue(viewLocates.LocatesGrid.SelectedRows[count]).ToString(),
                        viewLocates.LocatesGrid.Columns["Comment"].CellText(viewLocates.LocatesGrid.SelectedRows[count]),
                        DomainUser()
                        );

                    viewLocates.LocatesGrid[viewLocates.LocatesGrid.SelectedRows[count], "ActUserShortName"] = "me";
                    viewLocates.LocatesGrid[viewLocates.LocatesGrid.SelectedRows[count], "ActTime"] = DateTime.Now.ToString("HH:mm:ss");

                    tempDataSet = clientLocatesWeb.LocateItemGet(viewLocates.LocatesGrid.Columns["LocateId"].CellValue(viewLocates.LocatesGrid.SelectedRows[count]).ToString(), UtcOffset);

                    foreach (DataRow dr in tempDataSet.Tables["Table"].Rows)
                    {
                        datasetLocates.Tables["Locates"].LoadDataRow(dr.ItemArray, true);
                    }

                    foreach (DataRow dr in tempDataSet.Tables["Table1"].Rows)
                    {
                        datasetLocates.Tables["LocateSummary"].LoadDataRow(dr.ItemArray, true);
                    }
                }
            }
            catch (Exception Ex)
            {
                //mainForm.Alert(error.Message, PilotState.RunFault);
                MessageBox.Show(Ex.Message);
            }
        }


        [CommandHandler(Constants.CommandNames.SendToExcel)]
        public void OnSendToExcel(object sender, System.EventArgs e)
        {
            MessageBox.Show("Excel");
            //Export To Excel
        }

        [CommandHandler(Constants.CommandNames.SendToEmail)]
        public void OnSendToEmail(object sender, System.EventArgs e)
        {
            MessageBox.Show("Email");
            // Send Email
        }

        [CommandHandler(Constants.CommandNames.ShowPreBorrow)]
        public void OnShowPreBorrow(object sender, System.EventArgs e)
        {
            try
            {
                viewPreBorrow.Top = int.Parse(RegistryValue.Read(viewPreBorrow.Name, "Top", "25"));
                viewPreBorrow.Left = int.Parse(RegistryValue.Read(viewPreBorrow.Name, "Left", "25"));
                viewPreBorrow.Height = int.Parse(RegistryValue.Read(viewPreBorrow.Name, "Height", "450"));
                viewPreBorrow.Width = int.Parse(RegistryValue.Read(viewPreBorrow.Name, "Width", "645"));

                viewPreBorrow = WorkItem.SmartParts.AddNew<PreBorrowView>();
                WorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(viewPreBorrow);

                //bool mayEdit = mainForm.AdminAgent.MayEdit(mainForm.UserId, "ShortSaleLocatesPreBorrow");

                //PreBorrowGrid.AllowUpdate = mayEdit;
                //PreBorrowGrid.AllowAddNew = mayEdit; 


                viewPreBorrow.GroupCode.SetDataBinding(datasetLocates, "TradingGroups", true);

                string strTableName = "PreBorrows";
                DataSet dsTemp = clientLocatesWeb.LocatesPreBorrowGet(BizDate, "", UtcOffset);
                datasetLocates.Tables.Add(dsTemp.Tables[strTableName].Copy());
                viewPreBorrow.PreBorrowGrid.SetDataBinding(datasetLocates, strTableName, true);
                dsTemp.Clear();
			
				StatusSet();
            }
            catch(Exception Ex)
            {
                HandleException(Ex);
            }
        }












        #endregion


        //-----------------------------------------------------------------------------------------
        // Populate the View with Data
        #region View Populate Methods
        /// <summary>
        /// Populate GUI Inventory List
        /// </summary>
        /// <param name="groupCode">Trading Group Code from dbo.tbTradingGroups.GroupCode</param>
        /// <param name="secId">Security Id from dbo.tbSecMaster</param>
        private void InventoryListFill(string groupCode, string secId)
        {
            try
            {
                if (datasetInventory != null)
                {
                    datasetInventory.Tables["Inventory"].Clear();
                    datasetInventory.Tables["Inventory"].AcceptChanges(); // Clear list of potentially incorrect data.
                }

                if (secId != null)
                {
                    viewLocates.InventoryList.Caption = "Available Inventory [" + secId + "]";

                    datasetInventory = clientLocatesWeb.Inventory(groupCode, secId, UtcOffset); // Get new list for current security.

                    viewLocates.InventoryList.HoldFields();
                    viewLocates.InventoryList.DataSource = datasetInventory;
                    viewLocates.InventoryList.DataMember = "Inventory";
                    viewLocates.InventoryList.Rebind();
                }

                if ((datasetInventory != null) && (datasetInventory.Tables["Inventory"].Rows.Count > 0))
                {
                    viewLocates.InventoryList.DeadAreaBackColor = Color.Honeydew;
                }
                else
                {
                    viewLocates.InventoryList.DeadAreaBackColor = Color.DarkGray;
                }
            }
            catch (Exception Ex)
            {
                viewLocates.InventoryList.DeadAreaBackColor = Color.RosyBrown;
                //string strMsg = e.Message + " [LocatesClient.ModuleController.InventoryListFill]";
                //Log.Write(strMsg, Log.Error, 1);
                HandleException(Ex);
            }
        }

        //-----------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------
        /// <summary>
        /// Populate Main Grid Control with Locate Data
        /// </summary>
        private void LocatesGridFill()
        {
            LocatesGridFill(false);
        }

        /// <summary>
        /// Populate Main Grid Control with Locate Data
        /// </summary>
        /// <param name="returnPending">Return Only Locates which have a Status = "Pending"</param>
        private void LocatesGridFill(bool returnPending)
        {
            viewLocates.ClientComment.Value = "";
            viewLocates.GroupName.Value = "";


            LocatesStatus = "Please wait... Loading locates for " + viewLocates.TradeDateCombo.Text + "...";
            viewLocates.Cursor = Cursors.WaitCursor;

            LocateSummaryListFill("");
            Application.DoEvents();

            try
            {
                if (viewLocates.TradeDateCombo.Text.Equals(viewLocates.TradeDateCombo.Tag)) // Load request is for the current trade date.
                {
                    viewLocates.AutoUpdatePending.Enabled = true;
                    //viewLocates.LocatesGrid.AllowUpdate = mayEdit;
                    viewLocates.LocatesGrid.MarqueeStyle = C1.Win.C1TrueDBGrid.MarqueeEnum.SolidCellBorder;
                }
                else
                {
                    viewLocates.AutoUpdatePending.Checked = false;
                    viewLocates.AutoUpdatePending.Enabled = false;

                    viewLocates.LocatesGrid.AllowUpdate = false;
                    viewLocates.LocatesGrid.MarqueeStyle = C1.Win.C1TrueDBGrid.MarqueeEnum.DottedRowBorder;
                }

                DataRow[] rows = null;
                DataSet dataSet = null;
                string strTradeDate = viewLocates.TradeDateCombo.Text.Trim();

                if (returnPending)
                {
                    //dataSet = mainForm.ShortSaleAgent.LocatesGet(viewLocates.TradeDateCombo.Text, null, "Pending", UtcOffset);
                    //rows = dataSet.Tables["Table"].Select();

                    dataSet = clientLocatesWeb.Locates(UtcOffset, null, strTradeDate, strTradeDate, null, null, "Pending");
                    rows = dataSet.Tables["Locates"].Select();
                }
                else
                {
                    //dataSet = mainForm.ShortSaleAgent.LocatesGet(viewLocates.TradeDateCombo.Text, null, null, UtcOffset);
                    //rows = dataSet.Tables["Table"].Select();

                    dataSet = clientLocatesWeb.Locates(UtcOffset, null, strTradeDate, strTradeDate, null, null, null);
                    rows = dataSet.Tables["Locates"].Select();
                }

                if (returnPending && (rows.Length > 0))
                {
                    string strMsg = string.Format("Locates @ {0}; {1} pending locate(s).", DateTime.Now.ToString(Standard.TimeShortFormat), rows.Length.ToString("#,##0"));
                    MessageBox.Show(strMsg);
                }


                datasetLocates.Tables["Locates"].Rows.Clear();
                datasetLocates.Tables["Locates"].BeginLoadData();

                foreach (DataRow row in rows)
                {
                    datasetLocates.Tables["Locates"].ImportRow(row);
                }

                datasetLocates.Tables["Locates"].EndLoadData();

                datasetLocates.Tables["LocateSummary"].Rows.Clear();
                datasetLocates.Tables["LocateSummary"].BeginLoadData();

                foreach (DataRow row in rows)
                {
                    datasetLocates.Tables["LocateSummary"].ImportRow(row);
                }

                datasetLocates.Tables["LocateSummary"].EndLoadData();

                LocatesStatus = "Loading locates for " + viewLocates.TradeDateCombo.Text + "... Done!";
            }
            catch (Exception Ex)
            {
                //mainForm.Alert(error.Message, PilotState.RunFault);
                HandleException(Ex);
            }

            if (viewLocates.LocatesGrid.Splits[0, 0].Rows.Count > 0)
            {
                LocateSummaryListFill(viewLocates.LocatesGrid.Columns["SecId"].Text);
            }

            viewLocates.Cursor = Cursors.Default;
        }

        private void LocatesGridFill(string TradeDateMin, string TradeDateMax, string GroupCode, string SecId)
        {
            viewLocates.ClientComment.Value = "";
            viewLocates.GroupName.Value = "";
            LocatesStatus = string.Format("Please wait... Loading Locates research for Q{0} {1}...",
                                                viewLocates.Quarter.Text, viewLocates.Year.Text);

            viewLocates.Cursor = Cursors.WaitCursor;

            LocateSummaryListFill("");
            Application.DoEvents();

            try
            {
                //DataRow[] rows = mainForm.ShortSaleAgent.LocatesGet(
                //    tradeDateMin, tradeDateMax, groupCode, SecIdTextBox.Text.Trim(), mainForm.UtcOffset).Tables["Locates"].Select();

                DataSet dataLocates = clientLocatesWeb.Locates(UtcOffset, null, TradeDateMin, TradeDateMax, GroupCode, SecId, null);
                DataRow[] rows = dataLocates.Tables["Locates"].Select();

                dataLocates.Tables["Locates"].Rows.Clear();
                dataLocates.Tables["Locates"].BeginLoadData();

                foreach (DataRow row in rows)
                {
                    dataLocates.Tables["Locates"].ImportRow(row);
                }

                dataLocates.Tables["Locates"].EndLoadData();

                string strStatusMsg = string.Format("Loading Locates research for Q{0} {1}... Done!", viewLocates.Quarter.Text, viewLocates.Year.Text);
                LocatesStatus = strStatusMsg;
            }
            catch (Exception Ex)
            {
                LocatesStatus = Ex.Message;
                // Log.Write(Ex.Message + " [ShortSaleLocateForm.LocateGridFill]", Log.Error, 1);
                HandleException(Ex);
            }

            if (viewLocates.LocatesGrid.Splits[0, 0].Rows.Count > 0)
            {
                LocateSummaryListFill(viewLocates.LocatesGrid.Columns["SecId"].Text);
            }

            viewLocates.Cursor = Cursors.Default;
        }

        //-----------------------------------------------------------------------------------------
        /// <summary>
        /// Populate Locate Summary List
        /// </summary>
        /// <param name="secId"></param>
        private void LocateSummaryListFill(string secId)
        {
            try
            {
                long clientQuantity = 0;
                long quantity = 0;

                viewLocates.LocateSummaryList.Caption = "Locate Summary [" + secId + "]";
                locateSummaryDataView.RowFilter = "SecId = '" + secId + "'";

                if (locateSummaryDataView.Count > 1)
                {
                    viewLocates.LocateSummaryList.ColumnFooters = true;

                    foreach (DataRowView row in locateSummaryDataView)
                    {
                        if (!row["ClientQuantity"].ToString().Equals(""))
                        {
                            clientQuantity += (long)row["ClientQuantity"];
                        }
                        if (!row["Quantity"].ToString().Equals(""))
                        {
                            quantity += (long)row["Quantity"];
                        }
                    }

                    viewLocates.LocateSummaryList.Columns["ClientQuantity"].FooterText = clientQuantity.ToString("#,##0");
                    viewLocates.LocateSummaryList.Columns["Quantity"].FooterText = quantity.ToString("#,##0");
                }
                else
                {
                    viewLocates.LocateSummaryList.ColumnFooters = false;
                }
            }
            catch (Exception Ex)
            {
                HandleException(Ex);
            }
        }









        #endregion


        //-----------------------------------------------------------------------------------------
        // Log Settings Are In App Config
        // Right-Click on App.Config choose "Edit Enterprise Library Configuration"
        #region Logging
        private void WriteLogEntry(string Message, int Priority, string Category)
        {
            string[] arrayCategories = { Category };
            WriteLogEntry(Message, Priority, arrayCategories);
        }
        private void WriteLogEntry(string Message, int Priority, string[] Categories)
        {
            LogEntry logEntry = new LogEntry();
            logEntry.Priority = Priority;
            logEntry.Message = Message;
            logEntry.Categories.Clear();
            foreach (string category in Categories) { logEntry.Categories.Add(category); }

            Logger.Write(logEntry);
            Console.WriteLine(Message);
        }
        #endregion


        //-----------------------------------------------------------------------------------------
        // Exception Settings Are Also In App Config
        // Right-Click on App.Config choose "Edit Enterprise Library Configuration"
        #region Exceptions

        //-----------------------------------------------------------------------------------------
        /// <summary>
        /// Handle Exceptions
        /// </summary>
        /// <param name="Ex">Exception to Handle</param>
        /// 
        private void HandleException(Exception Ex)
        {
            ExceptionPolicy.HandleException(Ex, "Exception Policy");
        }











        //private void HandleException(Exception Ex)
        //{
        //    string strExMsg = string.Format("Exception Thrown From: [{0}.{1}] \nMessage:{2} \nStack Trace: {3}",
        //                                        Ex.Source,
        //                                        Ex.TargetSite.Name,
        //                                        Ex.Message,
        //                                        Ex.StackTrace);
        //    Log.Write(strExMsg, Log.Error, 1);
        //    LocatesStatus = strExMsg;

        //    if (Ex.GetType() == typeof(SqlException))
        //    {
        //        SqlException ExSql = (SqlException)Ex;
        //        foreach (SqlError ErrSql in ExSql.Errors)
        //        {
        //            string strErrMsg = string.Format("SQL Error Num:{0}, Occurred On Server:{1}, in Procedure: {2}, On Line Number:{3}, With Message:{4} ",
        //                                                ErrSql.Number,
        //                                                ErrSql.Server,
        //                                                ErrSql.Procedure,
        //                                                ErrSql.LineNumber,
        //                                                ErrSql.Message
        //                                            );
        //            Log.Write(strErrMsg, Log.Error, 1);
        //        }

        //    }


        //    // Trying Out the ExceptionHandler Class
        //    ExceptionPolicy.HandleException(Ex, "Exception Policy");

        //}
        #endregion

    }   // <-- End Class

}   //<-- End Namespace
