<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.C1Preview.2</name>
  </assembly>
  <members>
    <member name="T:C1.C1Preview.Design.FlagsEnumEditor">
      <summary>
            Represents the editor of enum properties with FlagsAttribute attribute.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Design.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.C1Preview.Design.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            The override for <see cref="T:C1.C1Preview.Design.FlagsEnumEditor" /> returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Design.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style 
            indicated by the <see cref="M:C1.C1Preview.Design.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method. 
            </summary>
      <param name="context">
      </param>
      <param name="provider">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.Design.FlagsEnumEditor.IsDropDownResizable">
      <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user. 
            The override for <see cref="T:C1.C1Preview.Design.FlagsEnumEditor" /> returns true;
            </summary>
    </member>
    <member name="T:C1.C1Report.OrientationEnum">
      <summary>
            Specifies the page orientation.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the 
            <see cref="!:Layout.Orientation" /> property in the <see cref="!:Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Auto">
      <summary>
            Set the orientation automatically, based on the current <see cref="!:Layout.PaperSize" /> 
            and report width (<see cref="!:Layout.Width" />).
            </summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Portrait">
      <summary>
            Use Portrait orientation (tall).
            </summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Landscape">
      <summary>
            Use Landscape orientation (wide).
            </summary>
    </member>
    <member name="T:C1.C1Report.HdrFtrEnum">
      <summary>
            Specifies where the Page Footer and Page Header sections are displayed.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Layout.PageFooter" /> and <see cref="!:Layout.PageHeader" /> properties 
            in the <see cref="!:Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.AllPages">
      <summary>
            The page footer and header are printed on all pages of a report. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdr">
      <summary>
            The page header isn't printed on the same page as the report header. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportFtr">
      <summary>
            The page footer isn't printed on the same page as the report footer. 
            </summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdrFtr">
      <summary>
            The page footer and header are not printed on a page that has either a report header or a report footer.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureShowEnum">
      <summary>
            Specifies where the background picture is displayed.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="!:Layout.PictureShow" /> property in the <see cref="!:Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.NoPages">
      <summary>
            Do not show the background picture.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllPages">
      <summary>
            Show the background picture on all pages.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.FirstPage">
      <summary>
            Show the background picture on the first page only.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllButFirstPage">
      <summary>
            Show the background picture on all pages but the first.
            </summary>
    </member>
    <member name="T:C1.C1Report.FieldAlignEnum">
      <summary>
            Specifies the alignment of text within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.Align" /> property in the <see cref="!:Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.General">
      <summary>
            Align numbers to the right, other values to the left.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightTop">
      <summary>
            Align to the right and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustTop">
      <summary>
            Justify and align to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustBottom">
      <summary>
            Justify and align to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustMiddle">
      <summary>
            Justify and align to the middle of the field box.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureAlignEnum">
      <summary>
            Specifies the alignment of images within the field's rectangle.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the 
            <see cref="!:Field.PictureAlign" /> and <see cref="!:Layout.PictureAlign" /> properties 
            in the <see cref="!:Field" /> and <see cref="!:Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightTop">
      <summary>
            Align to the right and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Clip">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Zoom">
      <summary>
            Scale the picture to use as much of the page as possible, 
            while preserving the picture's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Stretch">
      <summary>
            Stretch the picture to fill the page.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Tile">
      <summary>
            Tile the picture to fill the page.
            </summary>
    </member>
    <member name="T:C1.C1Report.PictureScaleEnum">
      <summary>
            Specifies the scaling of images within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="!:Field.PictureScale" /> 
            and <see cref="!:Layout.PictureScale" /> properties in the <see cref="!:Field" /> and <see cref="!:Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Clip">
      <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Stretch">
      <summary>
            Stretch the picture to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Scale">
      <summary>
            Scale the picture to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Tile">
      <summary>
            Tile the picture to fill the display area.
            </summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Hide">
      <summary>
            Hide the picture.
            </summary>
    </member>
    <member name="T:C1.C1Report.CheckBoxEnum">
      <summary>
            Specifies how boolean values are translated into check boxes.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.CheckBox" /> property in the <see cref="!:Field" /> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.NoCheckBox">
      <summary>
            No checkbox (display as text).
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CheckBox">
      <summary>
            Checkbox.
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CrossBox">
      <summary>
            Crossbox.
            </summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.RadioButton">
      <summary>
            Radio button.
            </summary>
    </member>
    <member name="T:C1.C1Report.BorderStyleEnum">
      <summary>
            Specifies the Field’s border style.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.BorderStyle" /> property in the <see cref="!:Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Transparent">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dash">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dot">
      <summary>
            Dotted border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDot">
      <summary>
            Dash-dot border.
            </summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDotDot">
      <summary>
            Dash-dot-dot border.
            </summary>
    </member>
    <member name="T:C1.C1Report.LineSlantEnum">
      <summary>
            Determines whether/how a line should be drawn across the field 
            (as opposed to a box around the field).
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.LineSlant" /> property in the <see cref="!:Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoLine">
      <summary>
            Regular field (not a line).
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoSlant">
      <summary>
            Render field as a vertical line (if Height &gt; Width) 
            or as a horizontal line (if Width &gt; Height).
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Down">
      <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Up">
      <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
    </member>
    <member name="T:C1.C1Report.ForcePageBreakEnum">
      <summary>
            Determines whether page breaks should be inserted before or after a field or section.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="!:Field.ForcePageBreak" /> and 
            <see cref="!:Section.ForcePageBreak" /> properties in the <see cref="!:Field" /> and <see cref="!:Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.None">
      <summary>
            No page breaks.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.Before">
      <summary>
            A page break is inserted before the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.After">
      <summary>
            A page break is inserted after the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.BeforeAndAfter">
      <summary>
            Page breaks are inserted before and after the field or section.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageBefore">
      <summary>
            In multi-column reports, a page break is inserted before the field or section instead of column break.
            </summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageAfter">
      <summary>
            In multi-column reports, a page break is inserted after the field or section instead of column break.
            </summary>
    </member>
    <member name="T:C1.C1Report.TextDirectionEnum">
      <summary>
            Specifies the direction of the text in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.TextDirection" /> property in the <see cref="!:Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Normal">
      <summary>
            Text direction is normal.
            </summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Up">
      <summary>
            Text direction is up.
            </summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Down">
      <summary>
            Text direction is down.
            </summary>
    </member>
    <member name="T:C1.C1Report.BarCodeEnum">
      <summary>
            Determines what type of barcode will be used in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:Field.BarCode" /> property in the <see cref="!:Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.None">
      <summary>
            No barcode.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code39">
      <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code93">
      <summary>
            Alpha-numeric.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code128">
      <summary>
            Alpha-numeric, denser than Code39 and required at least 6 characters.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.CodeI2of5">
      <summary>
            Numeric only.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Codabar">
      <summary>
            Numeric only, slightly denser than Code39.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.PostNet">
      <summary>
            Numeric only, US Postal Service.
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean13">
      <summary>
            EAN-13 barcode. EAN-13 encodes 12-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean8">
      <summary>
            EAN-8 barcode. EAN-8 encodes 7-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UpcA">
      <summary>
            UPC-A barcode. UPC-A encodes 11-digit article codes
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="T:C1.C1Preview.IStyleOwner">
      <summary>
            Defines a class that can have the Style property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetProp(System.Int32)">
      <summary>
            Simple returns value of style property. This method called if value
            does not exist in the style, before resolving ambient/non ambient etc.
            </summary>
      <param name="propKey">Code of property (Style.c_propXXX constant).</param>
      <returns>Value of property.</returns>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.AmbientParent">
      <summary>
            Gets the parent for ambient properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Style">
      <summary>
            Gets the style of this IStyleOwner.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Dictionary">
      <summary>
            Gets the dictionary object used to store images.
            </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.EmbeddedFonts">
      <summary>
            Gets the list of embedded fonts this collection is used to deserialize the fonts.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.IScriptContext.GetActiveDataBinding">
      <summary>
            Gets the current C1DataBinding object, can return null it means that
            the databinding is not defined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Document">
      <summary>
            Gets the C1PrintDocument object containing this context.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.SubstitutePageNumbers">
      <summary>
            Indicates that the page depended values should be substituted with "XXX"
            string in the ScriptEngineBase.Format(...) method.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Page">
      <summary>
            Gets the current Page object, can be null in this case
            the page depended expression can't be calculated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Hyperlink">
      <summary>
            Gets the current hyperlink.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.BaseForm">
      <summary>
            Base class for all custom forms in the C1Preview.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationEnum">
      <summary>
            Determines how item types are serialized
            </summary>
    </member>
    <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.Default">
      <summary>
            Item type is serialized with using of alias.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.FullName">
      <summary>
            Item type is serialized as a fully qualified name
            </summary>
    </member>
    <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.AssemblyQualifiedName">
      <summary>
            Item type is serialized as a fully qualified name and assembly name
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationAttribute">
      <summary>
            Forces the serializer to serialize the type name of a property or field.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1TypeSerializationAttribute.Type">
      <summary>
            Defines how the type name of a property of field will be serialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CollectionSerializationAttribute">
      <summary>
            This attribute defines additional properties for collections properties or fields.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.ItemsAreReferences">
      <summary>
            Collection's items are references.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.ItemsAreReferencesDest">
      <summary>
            Collection's items can be referenced by other properties.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ParentReferenceAttribute">
      <summary>
            Allows to mark field or property as "parent reference".
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ClassSerializationAttribute">
      <summary>
            Allows to define additional properties for class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1ClassSerializationAttribute.DefaultSerializationOff">
      <summary>
            Indicates that by default the public fields or properties are not serialized.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1ClassSerializationAttribute.IgnoreTypeConverter">
      <summary>
            Indicates that the type converter specified for class should be ignored
            and not used during serialization.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1SerializeContentAttribute">
      <summary>
            Indicates that the content of property or field should be serialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CheckSerializableAttribute">
      <summary>
            Indicates that the object should be serialized only if it supports deserialization.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1IgnoreDeserializeErrorAttribute">
      <summary>
            Indicates that the error occurs on deserialization value of this property should be ignored.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1C1dOnlySerializableAttribute">
      <summary>
            Indicates that the property or field is serializable only in C1D format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlOnlySerializableAttribute">
      <summary>
            Indicates that the property or field is serializable only in C1DX format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute">
      <summary>
            Defines options for serialization in Open Xml format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute.PartName">
      <summary>
            Gets the name of part in open xml file.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute.AutoPartName">
      <summary>
            Gets the value indicating that the name of part
            should be autogenerated in the path defined by Path property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute.AutoPartNamePath">
      <summary>
            Gets the path where part name shoulbe auto generated.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.IC1SerializableObject">
      <summary>
            This interface is used to allow objects to receive notifications from
            Serializer.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.C1FormatVersion.Parse(System.String,System.Boolean)">
      <summary>
            Converts a string to the C1FormatVersion object.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to C1FormatVersion.</param>
      <returns>Returns instance of C1FormatVersion object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1FormatVersion.FormatVersion">
      <summary>
            Gets the version of C1D document format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1FormatVersion.AssemblyVersion">
      <summary>
            Gets the AssemblyVersion of C1.C1Preview.2.dll assemly
            that supports this FormatVersion.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TypeConverterBase">
      <summary>
            Base for a simple type converter to/from strings.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.IsTypeAliasValid(System.Type,System.String)">
      <summary>
            Checks the type's alias can be registered the or not.
            </summary>
      <param name="type">Type object.</param>
      <param name="alias">Alias for type.</param>
      <returns>Returns true if alias is valid and can be registered.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.RegisterTypeAlias(System.Type,System.String)">
      <summary>
            Registers new type's alias.
            </summary>
      <param name="type">Type object.</param>
      <param name="alias">Alias for type.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.String,System.Object)">
      <summary>
            Serializes an object to a file, the format (C1D or C1DX)
            is determinated by the file extension. If the file does not have an
            extension or the extension is not C1D/C1DX, the C1D format is used.
            </summary>
      <param name="fileName">The target file name.</param>
      <param name="o">The object to serialize.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Serializes an object to a stream in C1D format.
            </summary>
      <param name="stream">The target stream.</param>
      <param name="o">The object to serialize.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.String,System.Object)">
      <summary>
            Deserializes a file into an object, the format (C1D or C1DX)
            is determinated by the file extension. If the file does not have an
            extension or the extension is not C1D/C1DX, the C1D format is used.
            </summary>
      <param name="fileName">The source file name.</param>
      <param name="o">The object content of which will be deserialized.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.String,System.Type)">
      <summary>
            Deserializes a file into an object graph, the format (C1D or C1DX)
            is determinated by the file extension. If the file does not have an
            extension or the extension is not C1D/C1DX, the C1D format is used.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="type">The type of deserialized object.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.IO.Stream,System.Object)">
      <summary>
            Deserializes a stream into an object, the stream should contain
            data in C1D format.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <param name="o">The object content of which will be deserialized.</param>
      <param name="format">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type)">
      <summary>
            Deserializes a stream into an object graph, the stream should contain
            data in C1D format.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <param name="type">The type of deserialized object.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.String,System.Object,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Serializes an object to a file.
            </summary>
      <param name="fileName">The target file name.</param>
      <param name="o">The object to serialize.</param>
      <param name="format">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Serializes an object to a stream.
            </summary>
      <param name="stream">The target stream.</param>
      <param name="o">The object to serialize.</param>
      <param name="format">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.String,System.Object,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Deserializes a file into an object.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="o">The object content of which will be deserialized.</param>
      <param name="format">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.String,System.Type,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Deserializes a file into an object graph.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="type">The type of deserialized object.</param>
      <param name="format">The document persistence format to use.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.IO.Stream,System.Object,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Deserializes a stream into an object.
            </summary>
      <param name="fileName">The source stream.</param>
      <param name="o">The object content of which will be deserialized.</param>
      <param name="format">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Deserializes a stream into an object graph.
            </summary>
      <param name="fileName">The source stream.</param>
      <param name="type">The type of deserialized object.</param>
      <param name="format">The document persistence format to use.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.String,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
            Serializes the specified Object and writes the XML-document instance to a file. 
            </summary>
      <param name="fileName">Name of destination file.</param>
      <param name="o">The Object to serialize.</param>
      <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
      <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
      <param name="stream">The Stream used to write the XML-document instance</param>
      <param name="o">The Object to serialize</param>
      <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
      <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
      <param name="stream">The Stream used to write the XML-document instance</param>
      <param name="o">The Object to serialize</param>
      <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
      <param name="writer">The XmlWriter used to write the XML-document instance</param>
      <param name="o">The Object to serialize.</param>
      <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
            Serializes the specified object to an XML formatted string.
            </summary>
      <param name="o">The Object to serialize.</param>
      <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
      <returns>String with results of serialization.</returns>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.CreateFormattedSerializer">
      <summary>
            Creates a Serializer class instances that formats the output XML.
            </summary>
      <returns>The created Serializer object.</returns>
    </member>
    <member name="P:C1.C1Preview.Serialization.Serializer.Formatting">
      <summary>
            Sets or returns formatting used by the XML writer.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.Serializer.Indentation">
      <summary>
            Sets or returns indentation used by the XML writer.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CompatibilityOptions">
      <summary>
            Defines the compatibility options for C1PrintDocument.
            Contains properties specifying compatibility with
            previous versions of C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.AssignFrom(C1.C1Preview.CompatibilityOptions)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.Reset">
      <summary>
            Resets properties of this object to default values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.WhiteRtfBackground">
      <summary>
            Gets or sets the value indicating whether RTF fills the background with
            white or uses the specified color. The default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.HeaderFooterWidthAsTotalColumnWidth">
      <summary>
            Gets or sets a value indicating whether the widths of page headers and footers
            should be equal to the sum of the widths of all page columns. The default is false.
            Set this property to true to improve compatibility with C1Report.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerC1ReportPosition">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerPosition">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportProvider">
      <summary>
            Describes the export format.
            Base class for all export providers.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)">
      <summary>
            Returns true if exporter supports export of specified object.
            By default this method returns false for all objects.
            </summary>
      <param name="obj">Object to test.</param>
      <returns>Returns true if corresponding exporter can export the specified object.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
            Returns true if exporter supports export of specified range of document.
            By default this method returns true for DocumentRangeTypeEnum.All.
            </summary>
      <param name="range">Type of range to test.</param>
      <returns>Returns true if corresponding exporter can export the specified output range.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanExportToStream">
      <summary>
            Gets the value indicating whether the exporter can save results to stream.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanShowOptions">
      <summary>
            Gets the value indicating whether the exporter can show the options setup dialog.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass">
      <summary>
            Gets the type of form which is used to edit export options by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.SupportedDocumentInfoFields">
      <summary>
            Gets the info about fields of DocumentInfo class which are supported by underlying exporter.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.Exporter">
      <summary>
            Base class for all exporters.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.String)">
      <summary>
            Performs export.
            </summary>
      <param name="fileName">Name of output file.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)">
      <summary>
            Performs export to stream.
            Not all exporters support export to stream to check this
            use property CanExportToStream of corresponding ExportProvider.
            </summary>
      <param name="stream">Stream object to store results of export.</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ShowOptionsDialog">
      <summary>
            Displays the dialog to edit the export options.
            </summary>
      <returns>True if the dialog was displayed successfully and user pressed OK, false otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputFiles">
      <summary>
            Gets the list of files which were generated during export.
            Typically exporters produce one file (like RtfExporter, XlsExporter etc)
            but some (like HtmlExporter) may generate more than one file, 
            all those files can be accessed through this property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfo">
      <summary>
            Gets or sets the DocumentInfo object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ExportProvider">
      <summary>
            Gets the underlying ExportProvider object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Document">
      <summary>
            Gets or sets the document for export.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Preview">
      <summary>
            Gets or sets the value indicating whether the document should be opened after export.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ShowOptions">
      <summary>
            Gets or sets the value indicating whether the options dialog should be displayed before export.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Range">
      <summary>
            Gets or sets the range of pages that is to be exported.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ReferenceGraphics">
      <summary>
            Specifies the Graphics object used in export, for example
            this object is used to convert EmfPlus metafiles to EmfOnly.
            If this property is null then the screen dc is used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClass">
      <summary>
            Gets or sets the type of form which will be used to edit the options of exporter.
            This form will be displayed if ShowOptions is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfoFormClass">
      <summary>
            Gets or sets the type of form which will be used to edit the fields of DocumentInfo class,
            this form is called from options form.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.RangeFormClass">
      <summary>
            Gets or sets the type of form which will be used to edit the range of document to export,
            this form is called from options form.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Import.C1ReportImporter">
      <summary>
            Defines a class used to import C1Report report definitions into C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Import.C1ReportImporter.Import(System.String,System.String)">
      <summary>
            Imports a C1Report report definition.
            </summary>
      <param name="fileName">
      </param>
      <param name="reportName">
      </param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.Import.C1ReportImporter.Utils.TranslateConnectionString(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.Import.C1ReportImporter.Utils.StartWithWord(System.String,System.String)" -->
    <member name="T:C1.C1Preview.BarDirectionEnum">
      <summary>
            Specifies the direction of the barcode
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Normal">
      <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Up">
      <summary>
            The barcode is rendered from the bottom up.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Down">
      <summary>
            The barcode is rendered from the top down.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCode">
      <summary>
            Represents a barcode.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObject">
      <summary>
            The base class for all render objects.
            </summary>
      <summary>
            Base class for all render objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ICollectionOwner">
      <summary>
            Through this interface the owner object can receive the notifications
            from OwnedCollection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IOwnedCollectionItem">
      <summary>
            Items of the OwnedCollection must implement this interface.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IDocumentLocation">
      <summary>
            Describes location within document. Each location is identified by page
            and rectangle on page. Units or rectangle depend on C1Preview.ResolvedUnit
            property.
            This interface implemented by:
            Page, RenderObject, C1Anchor.
            </summary>
      <summary>
            Describes location within document. Each location is identified by page
            and rectangle on page. Units or rectangle depend on C1Preview.ResolvedUnit
            property.
            This interface implemented by:
            Page, RenderObject, C1Anchor.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean)">
      <summary>
            Copies properties from another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
      <param name="assignChildren">Indicates that the list of children should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Copies properties from another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
      <param name="assignChildren">Indicates that the list of children should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)">
      <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean)">
      <summary>
            Creates the clone of object.
            </summary>
      <param name="assignDataBinding">Indicates the the DataBinding property should be assigned to the newly created object.</param>
      <param name="assignChildren">Indicates the the Children list should be assigned to the newly created object.</param>
      <returns>Returns the newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates the clone of object.
            </summary>
      <param name="assignDataBinding">Indicates the DataBinding property should be assigned to the newly created object.</param>
      <param name="assignChildren">Indicates the Children list should be assigned to the newly created object.</param>
      <param name="assignAnchors">Indicates the Anchors list should be assigned to the newly created object.</param>
      <param name="assignHyperlink">Indicates the Hyperlink should be assigned to the newly created object.</param>
      <param name="assignName">Indicates the Name should be assigned to the newly created object.</param>
      <returns>Returns the newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone">
      <summary>
            Creates the clone of object.
            </summary>
      <returns>Returns the newly created object.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetOwnedObjectCount">
      <summary>
            Calculates the number of objects which are owned by this object.
            </summary>
      <remarks>
        <para>This method takes into account:</para>
        <list type="bullet">
          <item>
            <description>Child objects (and their children)</description>
          </item>
          <item>
            <description>Objects which are specified in page layouts as PageHeader, PageFooter etc.</description>
          </item>
        </list>
      </remarks>
      <returns>The number of owned objects.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetNestedObjectCount">
      <summary>
            Calculates the count of objects which are nested within this object.
            This method takes into account child objects and their children.
            </summary>
      <returns>Returns the count of nested objects.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.IndexOfFragment(C1.C1Preview.RenderFragment)">
      <summary>
            Returns the index of fragment of object.
            </summary>
      <param name="rf">RenderFragment object whose index must be returned.</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CalcSize(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
            Calculates the sizes of object.
            Can be used to determine the auto sizes of object.
            </summary>
      <param name="width">The width of object can be auto or absolute units.</param>
      <param name="height">The height of object can be auto or absolute units.</param>
      <returns>Returns the sizes of object, value returned in C1PrintDocument.ResolvedUnit units.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Clip">
      <summary>
            Gets or sets the value indicating whether the object should be clipped.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Document">
      <summary>
            Gets the C1Preview object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Collection">
      <summary>
            Gets the RenderObjectCollection object containing this object,
            returns null if object has no Owner or its Owner is not RenderObjectCollection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.IndexInOwner">
      <summary>
            Gets the index in owner object, returns the -1 if no owner.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Parent">
      <summary>
            Gets the parent RenderObject object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Name">
      <summary>
            Unique name of object, can be string.Empty or *unique* within of _owner.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.UserData">
      <summary>
            Gets or sets some data associated with object by user.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasChildren">
      <summary>
            Returns true if object has child objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Children">
      <summary>
            Returns collection of child objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitVertBehavior">
      <summary>
            Gets or sets the value determining how the object is treated
            when it is too high to fit in the vertical space available on the current page.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitHorzBehavior">
      <summary>
            Gets or sets the value determining how the object is treated
            when it is too wide to fit in the horizontal space available on the current page.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitHorz">
      <summary>
            Indicates whether the object can be split horizontally if it falls on a page break.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitVert">
      <summary>
            Indicates whether the object can be split vertically if it falls on a page break.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.ZOrder">
      <summary>
            Gets or sets the Z-order of object, the object with smaller ZOrder
            will be displayed other the object with larger ZOrder.
            By default ZOrder of all objects is zero.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.X">
      <summary>
            X coordinate of object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Y">
      <summary>
            Y coordinate of object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Width">
      <summary>
            Width of object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Height">
      <summary>
            Height of object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakBefore">
      <summary>
            Gets or sets the type of break before this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakAfter">
      <summary>
            Gets or sets the type of break after this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeBefore">
      <summary>
            Gets or sets the LayoutChangeBase object
            defining the change of page layout before object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeAfter">
      <summary>
            Gets or sets the LayoutChangeBase object
            defining the change of page layout after object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Style">
      <summary>
            Style of this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.RepeatBordersHorz">
      <summary>
            Indicates whether horizontal borders of object must be repeated when horizontal splitting.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.RepeatBordersVert">
      <summary>
            Indicates whether vertical borders of object must be repeated when vertical splitting.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.PageNumberingChange">
      <summary>
            Gets or sets the PageNumberingChange object describing the
            change of page number.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Hyperlink">
      <summary>
            Gets or sets the hyperlink associated with this render object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Anchors">
      <summary>
            Gets the collection of anchors within this render object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableCell">
      <summary>
            Gets the TableCell object containing this object, this property is 
            null if object not in RenderTable.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.KeepTogether">
      <summary>
            Gets or sets a render object which should be printed on the same page
            as the current object. The specified object must have the same
            <see cref="P:C1.C1Preview.RenderObject.Parent" /> as the current object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Visibility">
      <summary>
            Gets or sets the value indicating the visibility of the object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasFragments">
      <summary>
            Gets the value indicating whether the object contains fragments.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Fragments">
      <summary>
            Returns the collection of the object's fragments.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FirstFragment">
      <summary>
            Gets the first object's fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LastFragment">
      <summary>
            Gets the last object's fragment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBinding">
      <summary>
            Gets the instance of C1DataBinding class representing the 
            data binding properties of this RenderObject object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingMode">
      <summary>
            Gets the data binding mode of the render object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingDefined">
      <summary>
            Gets the value indicating whether this object is data bound.
            Returns true if the object itself is bound via the DataBinding property,
            or if some nested objects are data bound (e.g. the rows of a RenderTable).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Copies">
      <summary>
            Gets the collection of render objects generated as the result of data binding.
            The value of this property is null if the object is not data bound.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Original">
      <summary>
            Gets the original RenderObject object that produced this object
            during processing of data binding, or null if there is no such object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FormatDataBindingInstanceScript">
      <summary>
            Gets or sets the script that is executed each time a new instance of the render object
            is created due to data binding resolving.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarCodeType">
      <summary>
            Gets or sets the type of encoding to use when generating the barcode.
            <para>Note that BarCodeType.None is not a valid value for this property.</para></summary>
      <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property to generate the barcode image 
            displayed in the object.
            </remarks>
      <example>The following sample shows how to use the BarCodeType property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.ShowText">
      <summary>
            Gets or sets a value indicating whether the string represending the <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property
            should be displayed along with the barcode image.
            </summary>
      <remarks>
            By default, the object will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.C1Preview.RenderBarCode.Text" /> property, set this
            property to true.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.Text">
      <summary>
            Gets or sets the value that is encoded as the barcode image.
            </summary>
      <remarks>
        <para>Some encodings support alphanumeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="P:C1.C1Preview.RenderBarCode.BarCodeType" /> enumeration 
            for details.</para>
        <para>If you use characters that are invalid for the current encoding, the
            object will display a blank image.</para>
      </remarks>
      <example>The following sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code></example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarDirection">
      <summary>
            Gets or sets the direction of the barcode.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeFragment">
      <summary>
            Represents a fragment of a RenderBarCode object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderFragment">
      <summary>
            Represents the fragment of RenderObject.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp">
      <summary>
            Represents the unit which holds an expression using the LengthRef or LengthAbs classes like:
            "parent.width + 5mm", "80%parent.width", and so on
            </summary>
      <summary>
            Represents the unit which holds an expression using the LengthRef or LengthAbs classes like:
            "parent.width + 5mm", "80%parent.width", and so on.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthBase">
      <summary>
            Represents a simple coordinate or size of object. This is an abstract class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToUnitType(System.String,C1.C1Preview.UnitTypeEnum@)">
      <summary>
            Converts a string to a UnitTypeEnum value. The string can be one of the following:
            "def", "doc", "in", "mm", "pc", "pix", "pt", "tw", "inhs".
            This method is case-insensitive.
            </summary>
      <param name="s">The string to convert. If it is null or empty, units are set to UnitTypeEnum.Default.</param>
      <param name="units">On exit, contains the UnitTypeEnum value.</param>
      <returns>Returns true if no error occurs, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.UnitTypeToString(C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts a UnitTypeEnum value to the string representation.
            <list type="bullet"><item><description><term>Default</term>Empty string</description></item><item><description><term>Document</term>"doc"</description></item><item><description><term>Inch</term>"in"</description></item><item><description><term>Millimeter</term>"mm"</description></item><item><description><term>Pica</term>"pc"</description></item><item><description><term>Pixel</term>"pix"</description></item><item><description><term>Point</term>"pt"</description></item><item><description><term>Twip</term>"tw"</description></item><item><description><term>InHs</term>"inhs"</description></item></list></summary>
      <param name="units">Value to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToDimension(System.String,C1.C1Preview.DimensionEnum@)">
      <summary>
            Converts a string to DimensionEnum. String can have value from:
            ("left", "top", "right", "bottom", "width", "height", "relleft", "reltop", "relright", "relbottom").
            Method is case insensitive.
            </summary>
      <param name="s">String to convert, if s is null or empty then units will be RefDim.Default.</param>
      <param name="dim">Contains a dimension on exit.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.Parse(System.String,System.Boolean)">
      <summary>
            Analyzes a passed string and creates an instance 
            of the LengthBase class on the basis of this string.
            </summary>
      <param name="s">String to analyze.</param>
      <param name="throwException">Indicates whether an exception must be raised if string has an error and can't be converted to the LengthBase.</param>
      <returns>Returns an instance LengthAbs or LengthRef or LengthExp or LengthAuto class, returns a null value if throwException equals false and s has an error.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsAuto">
      <summary>
            Returns true if coordinate is auto.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsEmpty">
      <summary>
            Returns true if coordinate linked with empty (zero) coordinate.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.Auto">
      <summary>
            Gets instance of the LengthAuto class representing an auto dimension.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Elements">
      <summary>
            Represents an expression, expression may contains:
            LengthBase objects, Numbers (int, double etc) and objects derived from LengthExp.Op class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Operations">
      <summary>
            The array of registered operations.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnaryOperations">
      <summary>
            The array of registered unary operations.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Functions">
      <summary>
            The array of registered functions.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Predefined">
      <summary>
            Holds some predefined LengthExp objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.RightAlign">
      <summary>
            Represents "Parent.Right - Self.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.BottomAlign">
      <summary>
            Represents "Parent.Bottom - Self.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.HorzCenterAlign">
      <summary>
            Represents "(Parent.Width - Self.Width) / 2" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.VertCenterAlign">
      <summary>
            Represents "(Parent.Height - Self.Height) / 2" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.HorzCenter">
      <summary>
            Represents "Self.Width / 2" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Predefined.VertCenter">
      <summary>
            Represents "Self.Height / 2" reference.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DetachFromRenderObject">
      <summary>
            Detach this RenderFragment object from its RenderObject object,
            also all child fragments will be detached.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Clone">
      <summary>
            Creates and returns a copy of render fragment.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
            Copyes all properties from another RenderFragment object, 
            the Children collection is copied also.
            </summary>
      <param name="source">The source RenderFragment object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolvingFinished">
      <summary>
            This method is called by the render engine after
            fully resolving of render fragment.
            Typically this method is used to clear temporary info used during resolving.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Boolean)">
      <summary>
            Paints fragment on specified graphics.
            </summary>
      <param name="graphics">Graphics object on which fragment must be drawn.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
      <summary>
            Calculates the information about specified anchor.
            </summary>
      <param name="anchor">The C1Anchor object from RenderObject.Anchors collection.</param>
      <param name="anchorRect">The bounds of anchor in fragment in resolved units (C1PrintDocument.ResolvedUnitType). This parameter contains valid value only if anchorVisible is true.</param>
      <param name="anchorVisible">The content of RenderObject can be split on some fragments this parameter contains true on exit if anchor is in this fragment.</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches the C1Hyperlink object in the render fragment at specified position.
            </summary>
      <param name="pt">Specifies the point within object relative to top-left corner of fragment.</param>
      <returns>The C1HyperlinkInfo object describing the searched hyperlink or null if not found.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
            Adds the fragment's hyperlinks in the passed collection.
            </summary>
      <param name="hyperlinks">The C1HyperlinkInfoCollection object in which the fragment's hyperlinks will be added.</param>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.PageArea">
      <summary>
            Gets the PageAreaBase object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Bounds">
      <summary>
            Gets the rectangle of object within its parent, if fragment is a top-parent fragment
            then this bounds is the bounds within Page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBounds">
      <summary>
            Gets the rectangle of content area of object, without spacing, border, padding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.BoundsOnPage">
      <summary>
            Gets the bounds of object on page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBoundsOnPage">
      <summary>
            Gets the bounds of inner area of object on page.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Document">
      <summary>
            Gets C1PrintDocument object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.RenderObject">
      <summary>
            Gets the RenderObject object which has produced this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Parent">
      <summary>
            Gets the parent RenderFragment object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TopParent">
      <summary>
            Gets the top-parent RenderFragment object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Visible">
      <summary>
            Indicates whether the fragment is visible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInRenderObject">
      <summary>
            Gets index of fragment in its own RenderObject object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInParent">
      <summary>
            Gets index of fragment in its parent.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Level">
      <summary>
            Gets the level of RenderFragment in its parent, the top most fragment
            (which has no parent) has a 1 level.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.HasChildren">
      <summary>
            Returns true if fragment has child fragments.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Children">
      <summary>
            Gets a collection of child objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ClipParent">
      <summary>
            Gets the value indicating whether the parent object is clipped
            (i.e. its Clip property is true).
            </summary>
    </member>
    <member name="T:C1.C1Preview.AnchorEnum">
      <summary>
            Determines how a <see cref="T:C1.C1Preview.RenderField" />
            is positioned with respect to its containing section 
            when the section grows or shrinks as a result of the section's 
            </summary>
      <remarks>Use members of this enumeration to set the value of the
            <see cref="P:C1.C1Preview.RenderField.Anchor" /> property in the <see cref="T:C1.C1Preview.RenderField" /> class.
            </remarks>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Top">
      <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Bottom">
      <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.TopAndBottom">
      <summary>
            The field grows or shrinks with the section.
            Both the distance from the top of the field to the top of the section,
            and the distance from the bottom of the field to the bottom of the section,
            remain the same.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderField">
      <summary>
            Represents a field of a <see cref="N:C1.C1Report" />.
            Objects of this type are created when a <see cref="N:C1.C1Report" /> is imported into a <see cref="T:C1.C1Preview.C1PrintDocument" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.TabPositions">
      <summary>
            Gets the collection of text tab positions.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.HasTabPositions">
      <summary>
            Gets the value indicating whether the <see cref="P:C1.C1Preview.RenderField.TabPositions" /> collection
            contains at least one element.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Text">
      <summary>
            Gets or sets the text of the current field.
            </summary>
      <remarks>
        <para>This property contains the text that will be rendered on the document.</para>
        <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            script expression, depending on the value of the <see cref="P:C1.C1Preview.RenderField.Calculated" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Picture">
      <summary>
            Gets or sets a picture to display in the current field.
            <para>This property may be set to one of the following three kinds of objects:</para><list type="number"><item>A regular .NET <see cref="T:System.Drawing.Image" /> object.</item><item>A string containing an image file name or URL.</item><item>A string containing the name of an image field in the data source.</item></list><para>The first two options are used to create unbound images, such as logos. These images do not 
            depend on the document data.</para><para>The third option is used to create bound images, such as product or employee pictures. These 
            images are stored with the document data.</para></summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.DetectUrls">
      <summary>
            If the current field's <see cref="P:C1.C1Preview.RenderField.RTF" /> property is true,
            this property gets or sets a value indicating whether
            Uniform Resource Locators (URLs) will be automatically formatted
            when found in the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Calculated">
      <summary>
            Specifies whether the <see cref="P:C1.C1Preview.RenderField.Text" /> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
      <remarks>
        <para>If this property is set to false, the value of the <see cref="P:C1.C1Preview.RenderField.Text" /> property is
            inserted in the document without any further processing.</para>
        <para>If this property is set to true, the value of the <see cref="P:C1.C1Preview.RenderField.Text" /> property is
            evaluated as a script expression and the result of the expression is
            inserted in the document.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.HideDuplicates">
      <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.C1Preview.RenderField.HideDuplicates" /> property to hide a field in a document 
            when its value is the same as in the preceding record.</para>
        <para>For example, in a report listing suppliers and their products, each supplier's name 
            can appear just once for each group of products, rather than repeat for each product.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Format">
      <summary>
            Gets or sets a string used to format the value of the current field.
            </summary>
      <remarks>
        <para>You can use this property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.C1Preview.RenderField.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use this property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
        <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)" /> method.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.LineSlant">
      <summary>
            Gets or sets a value indicating whether a line should be drawn across the current field
            (as opposed to a box around the field).
            </summary>
      <seealso cref="T:C1.C1Report.LineSlantEnum" />
      <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.C1Preview.Style.ShapeLine" /> property.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.CheckBox">
      <summary>
            Gets or sets a value indicating whether the current field should be displayed as a checkbox.
            </summary>
      <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.RTF">
      <summary>
            Gets or sets a value indicating whether <see cref="P:C1.C1Preview.RenderField.Text" /> of the current field
            should be interpreted as RTF.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.BarCodeType">
      <summary>
            Gets or sets a value indicating whether the current field should be rendered as barcode,
            and allows to specifiy the barcode type.
            </summary>
      <seealso cref="T:C1.C1Report.BarCodeEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderField.GeneralTextAlignment">
      <summary>
            Gets or sets a value indicating whether the text alignment in the current field
            should depend on the type of data represented by the field. If this property
            is true, numbers will align to the right while all other data to the left.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.HidePicture">
      <summary>
            Gets or sets a value indicating whether the image should not be displayed,
            works like PictureScaleEnum.Hide.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.SubReport">
      <summary>
            Gets or sets a reference to a <see cref="T:C1.C1Preview.RenderReport" /> object to be rendered within the current field.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.CanGrow">
      <summary>
            Gets or sets a value indicating whether the height of the current field can increase
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.CanShrink">
      <summary>
            Gets or sets a value indicating whether the height of the current field can decrease
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.Anchor">
      <summary>
            Gets or sets the value determining the vertical position of the current field
            relative to the containing <see cref="T:C1.C1Preview.RenderSection" />.
            </summary>
      <remarks>
        <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
        <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
      </remarks>
      <seealso cref="T:C1.C1Preview.AnchorEnum" />
    </member>
    <member name="T:C1.C1Preview.RenderFieldFragment">
      <summary>
            Fragment of RenderField object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FragmentResolvedInfo">
      <summary>
            Represents the temporary info used during resolving,
            instance of this class, created for each object participating in resolving.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftOffset">
      <summary>
            Returns a sum of Padding.Left, Spacing.Left, Borders.Left
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RightOffset">
      <summary>
            Returns a sum of Padding.Right, Spacing.Right, Borders.Right
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.TopOffset">
      <summary>
            Returns a sum of Padding.Top, Spacing.Top, Borders.Top
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.BottomOffset">
      <summary>
            Returns a sum of Padding.Bottom, Spacing.Bottom, Borders.Bottom
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoLeft">
      <summary>
            Indicates that the Left coordinate of object was calculated as auto.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoTop">
      <summary>
            Indicates that the Top coordinate of object was calculated as auto.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoPos">
      <summary>
            Indicates that the Left-top position of object was calculated as auto.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailWidth">
      <summary>
            Returns the distance between Left and LeftTopPageArea.Right.
            </summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailHeight">
      <summary>
            Returns the distance between Top and LeftTopPageArea.Bottom.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitParams">
      <summary>
            The base class for split parameters used when object should be split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitParams">
      <summary>
            OUT (FindSplitPos):
            The collection of SplitParams objects from children.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitPos">
      <summary>
            IN:
            Specifies the requested split position.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMin">
      <summary>
            IN:
            Left / Top spacing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMax">
      <summary>
            IN:
            Right / Bottom spacing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMin">
      <summary>
            IN:
            Left / Top padding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMax">
      <summary>
            IN:
            Right / Bottom padding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMin">
      <summary>
            IN:
            Left / Top border.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMax">
      <summary>
            IN:
            Right / Bottom border.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitDimensionSize">
      <summary>
            IN:
            Size of split dimension, on vertical split - height, on horizontal - width.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NonSplitDimensionContentSize">
      <summary>
            IN:
            The content size of non split dimension, 
            on vertical split: Width - Inner.Left - Inner.Right;
            on horizontal split: Height - Inner.Top - Inner.Bottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.RepeatBorders">
      <summary>
            IN:
            RepeatBordersVert or RepeatBordersHorz.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitVert">
      <summary>
            IN:
            Indicates the type of split: vertical or horizontal.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenAlwaysCanSplit">
      <summary>
            IN:
            ChildrenAlwaysCanSplitVert or ChildrenAlwaysCanSplitHorz, depends on
            type of splitting: vertical or horizontal.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitContext">
      <summary>
            IN:
            Gets SplitContext object containing some global options for splitting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.TopParentHardBreak">
      <summary>
            IN:
            Indicates that the top parent object process the hard break.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NewFragmentSize">
      <summary>
            OUT (FindSplitPos):
            The size of new fragment, which is created at the split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentSplitOffset">
      <summary>
            OUT (FindSplitPos):
            Offsets for split position within content area,
            the content area is split at position: RealSplitPos - ContentSplitOffset.
            ContentSplitOffset calculated on the base 
            of padding / spacing / borders / RepeatBorders.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentRealSplitPos">
      <summary>
            OUT (FindSplitPos):
            The real split position within content area, calculated in the
            FindVertSplitPosContent / FindHorzSplitPosContent.
            ContentRealSplitPos = RealSplitPos - ContentSplitOffset.
            Also see comments to ReprintedFooterSize.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitPosOffset">
      <summary>
            OUT (FindSplitPos):
            Offset of children' splitting position from ContentSplitPos.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintFooterSize">
      <summary>
            OUT (FindSplitPos):
            The size of reprinted footer at the bottom of object,
            filled in the FindXXXContent method, after calling this method
            the ContentRealSplitPos does not include this size, and real
            RealSplitPos is:
            ContentRealSplitPos + ContentSplitOffset + ReprintFooterSize.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintHeaderSize">
      <summary>
            OUT (FindSplitPos):
            The size of reprinted header at the top of object which was split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NeedReresolving">
      <summary>
            OUT (Split):
            Indicates that after splitting the fragment which was split
            must be reresolved. This field filled after RenderFragment.Split method.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.AllChildrenSplitInSamePlace">
      <summary>
            OUT:
            Indicates that all children splits at ONE line.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.Clone">
      <summary>
            Creates and returns a copy of this object, the ChildrenSplitParams
            property is copied by reference.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
            Copies all properties from another SplitParams object, the ChildrenSplitParams
            property is copied by reference.
            </summary>
      <param name="source">Source SplitParams object.</param>
    </member>
    <member name="P:C1.C1Preview.SplitParams.ExistSplittedChildren">
      <summary>
            Indicates that the object has the splitted child objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GrowShrinkModeEnum">
      <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> property in the <see cref="T:C1.C1Preview.RenderReport" /> class.
            </remarks>
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.C1Report">
      <summary>
            Uses the standard C1Report mode, where fields that grow or shrink affect only fields directly below.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.Access">
      <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderReport">
      <summary>
            Represents a sub-report (a C1Report contained within a
            <see cref="T:C1.C1Preview.RenderField" /> and specified by its <see cref="P:C1.C1Preview.RenderField.SubReport" /> property).
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderArea">
      <summary>
            Represents a general-purpose container for render objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderVert">
      <summary>
            Gets or sets a render object that will be repeated on all pages (or columns)
            if the current render area is split vertically when it is too high to fit on
            a single page.
            </summary>
      <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="!:Children" /> collection.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderHorz">
      <summary>
            Gets or sets a render object that will be repeated on all "horizontal" pages
            if the current render area is split horizontally when it is too wide to fit on
            a single page.
            </summary>
      <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="!:Children" /> collection.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderReport.ExposeScriptObjects">
      <summary>
            Gets or sets a value indicating whether script objects should be exposed
            to nested objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingStartingScript">
      <summary>
            Gets or sets a script that is executed when data processing of the current object starts.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingFinishedScript">
      <summary>
            Gets or sets a script that is executed when data processing of the current object has completed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.GrowShrinkMode">
      <summary>
            Gets or sets a value indicating how <see cref="P:C1.C1Preview.RenderField.CanGrow" /> and <see cref="P:C1.C1Preview.RenderField.CanShrink" /> 
            properties are handled.
            </summary>
      <remarks>
        <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />, fields with 
            <see cref="P:C1.C1Preview.RenderField.CanGrow" /> or <see cref="P:C1.C1Preview.RenderField.CanShrink" /> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
        <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior.)</para>
        <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> is set to 
            <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
        <para>If <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" /> is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderSection">
      <summary>
            Represents a section of an imported C1Report.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanGrow">
      <summary>
            Gets or sets a value indicating whether the height of the current section can increase
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanShrink">
      <summary>
            Gets or sets a value indicating whether the height of the current section can decrease
            automatically to fit the field's content.
            </summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnFormatScript">
      <summary>
            Gets or sets a string containig the script to be executed before the current
            section is formatted. This script is executed for each record, and can be used
            to change the content of the section depending on the record data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnPrintScript">
      <summary>
            Gets or sets a string containig the script to be executed before the current
            section is printed (after it has been formatted). This script can be used to
            adjust the visual properties of the section which do not affect the layout
            (e.g. text and background colors).
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderSectionFragment">
      <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderSection" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1">
      <summary>
            Internal use only.
            </summary>
      <typeparam name="TContext">
      </typeparam>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectScript">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.NamedCollection">
      <summary>
            Represents the collection each element of that
            has an unique name.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OwnedCollection">
      <summary>
            Base class for RenderObjectCollection and ParagraphObjectCollection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.IndexOf(System.Object)">
      <summary>
            Searches for the specified Object and returns the zero-based index 
            of the first occurrence within the entire collection.
            </summary>
      <param name="obj">The Object to locate in the collection. The value can be a null reference.</param>
      <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.Exchange(System.Int32,System.Int32)">
      <summary>
            Swap two items in collection.
            </summary>
      <param name="item1">Index of first item.</param>
      <param name="item2">Index of second item.</param>
    </member>
    <member name="P:C1.C1Preview.OwnedCollection.Owner">
      <summary>
            Gets the owner of collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.IndexOfName(System.String)">
      <summary>
            Returns the zero-based index of the NamedCollectionItem object
            with specified name in the NamedCollection.
            </summary>
      <param name="name">The name to locate in the NamedCollection. </param>
      <returns>The zero-based index of name, if name is found in the NamedCollection; otherwise, -1.</returns>
    </member>
    <member name="T:C1.C1Preview.NamedCollectionItem">
      <summary>
            Represents an element of the NamedCollection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties of another object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.Clone">
      <summary>
            Create clone of this object, created object has some name as this object,
            but it does not belong to owner of this object, owner of created object is null.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Owner">
      <summary>
            Gets the NamedCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Name">
      <summary>
            Gets or sets the unique name of the NamedCollectionItem object in its collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.Clear">
      <summary>
            Clears a collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.GetPropIndex(System.Int32)">
      <summary>
            Gets index of property in _keys and _values arrays.
            </summary>
      <param name="propKey">Key of property.</param>
      <returns>Returns index of property value in the Values array it is zero-based.</returns>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.SetPropValue(System.Int32,System.Object)">
      <summary>
            Sets value of property.
            </summary>
      <param name="propKey">Key of property.</param>
      <param name="value">Value of property.</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.DeletePropValue(System.Int32)">
      <summary>
            Deletes tyhe property value from collection.
            </summary>
      <param name="propKey">Key of property.</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.IsEmpty">
      <summary>
            Returns true if collection is empty.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable.IsPropExists(System.Int32)">
      <summary>
            Returns true if value of specified property is defined.
            </summary>
      <param name="propKey">Key of property.</param>
    </member>
    <member name="T:C1.C1Preview.Utils">
      <summary>
            Contains common functions.
            </summary>
      <summary>
            Contains common functions.
            </summary>
      <summary>
            Contains common functions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Utils.FloatFormatInfo">
      <summary>
            The special NumberFormatInfo object used to convert numbers
            in C1PrintDocument, its fields are initialized as:
            NumberDecimalSeparator is "."
            CurrencyDecimalSeparator is "."
            </summary>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(System.Single)">
      <summary>
            Returns the number nearest the specified value.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(System.Double)">
      <summary>
            Returns the number nearest the specified value.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Utils.IndexInArray(System.String[],System.String)">
      <summary>
            Returns the index of string in array of strings.
            Search is case sensitive.
            </summary>
      <param name="a">Array of strings.</param>
      <param name="s">String to search.</param>
      <returns>Index of string in array of -1.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.TryParseInt(System.String,System.Int32@)">
      <summary>
            Converts the string representation of a number to its 32-bit 
            signed integer equivalent. 
            A return value indicates whether the operation succeeded. 
            This functions uses FloatFormatInfo as format provider.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null, is not of the correct format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized. </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.TryParseDouble(System.String,System.Double@)">
      <summary>
            Converts the string representation of a number to its double-precision 
            floating-point number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            This functions uses FloatFormatInfo as format provider.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null, is not in a format compliant with style, represents a number less than MinValue or greater than MaxValue, or if style is not a valid combination of NumberStyles enumerated constants. This parameter is passed uninitialized.</param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ColorArrayToString(System.Drawing.Color[])">
      <summary>
            Converts the array of colors to string.
            </summary>
      <param name="a">Array to convert.</param>
      <returns>Returns the string representing a color array.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ColorArrayFromString(System.String)">
      <summary>
            Converts a string to array of colors.
            </summary>
      <param name="s">String to process.</param>
      <returns>Array of colors or null if s is null.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FloatArrayToString(System.Single[],System.Char)">
      <summary>
            Converts the array of floats to string.
            </summary>
      <param name="a">Array to convert.</param>
      <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
      <returns>Returns the string representing a float array.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FloatArrayFromString(System.String,System.Char)">
      <summary>
            Converts a string to array of floats.
            </summary>
      <param name="s">String to process.</param>
      <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
      <returns>Array of floats or null if s is null.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsArraysEqual(System.Single[],System.Single[])">
      <summary>
            Compares two array of floats.
            </summary>
      <param name="a1">First array of float values.</param>
      <param name="a2">Second array of float values.</param>
      <returns>Returns true if arrays equals.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ColorToString(System.Drawing.Color)">
      <summary>
            Converts color to string, use this method instead of Color.Name.
            </summary>
      <param name="color">Color structure to convert.</param>
      <returns>The string representing a color.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ColorFromString(System.String)">
      <summary>
            Converts string to color, use this method instead of Color.FromName(),
            because the Color.FromName() works incorrectly sometimes.
            </summary>
      <param name="s">String to convert.</param>
      <returns>The color.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ConvertUnits(System.Double,C1.C1Preview.UnitTypeEnum,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
            Converts the value from one measurement's units to other.
            </summary>
      <param name="from">Source measurement's units.</param>
      <param name="to">Destination measurement's units.</param>
      <param name="value">Value to convert.</param>
      <param name="dpi">DPI, used when from or to parameters equal UnitTypeEnum.Pixel.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsUrlString(System.String)">
      <summary>
            Returns true if passed string is an URL.
            </summary>
      <param name="s">String to test.</param>
      <returns>Returns true if string represents an URL.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ObjectIsMetafileList(System.Object,System.Boolean)">
      <summary>
            Tests whether the object is a collection of metafiles.
            </summary>
      <param name="obj">The object to test.</param>
      <param name="strict">True to test all items in the collection
            (may be slow in case of large documents), false to test just the first item.</param>
      <returns>Returns true if object is list of metafiles.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.UnitTypeEnumToGraphicsUnit(C1.C1Preview.UnitTypeEnum)">
      <summary>
            Converts value of UnitTypeEnum type to GraphicsUnit.
            If conversion cannot be made exception will be thrown.
            </summary>
      <param name="units">Source units</param>
      <returns>Returns value of GraphicsUnit type.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.GraphicsUnitToUnitTypeEnum(System.Drawing.GraphicsUnit)">
      <summary>
            Converts value of GraphicsUnit type to UnitTypeEnum.
            If conversion cannot be made exception will be thrown.
            </summary>
      <param name="units">Source units</param>
      <returns>Returns value of UnitTypeEnum type.</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.SortList(System.Collections.ArrayList,System.Collections.IComparer)">
      <summary>
            Sorts the list, as against the "ArrayList.Sort" this function do not exchange the
            identical elements.
            </summary>
      <param name="list">
      </param>
      <param name="comparer">
      </param>
    </member>
    <member name="T:C1.C1Preview.Utils.FC">
      <summary>
            Implements the static methods for comparing the float and double numbers
            with specified precision.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateFuncEnum">
      <summary>
            Defines the set of supported aggregate functions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum">
      <summary>
            Returns the sum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Average">
      <summary>
            Returns the average of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Count">
      <summary>
            Returns the count of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Min">
      <summary>
            Returns the minimum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Max">
      <summary>
            Returns the maximum of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.CountDistinct">
      <summary>
            Returns the count of distinct values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.First">
      <summary>
            Returns the first value of the expression within 
            the scope (after all sorting up through the Scope
            has been applied).
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Last">
      <summary>
            Returns the last value of the expression within
            the scope (after all sorting up through the Scope
            has been applied).
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Var">
      <summary>
            Returns the variance of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.VarP">
      <summary>
            Returns the population variance of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDev">
      <summary>
            Returns the standard deviation of values of the expression within the scope.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDevP">
      <summary>
            Returns the population standard deviation of values of the expression within the scope.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.RunningEnum">
      <summary>
            Defines the scope of an aggregate.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Document">
      <summary>
            The scope is the whole document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Group">
      <summary>
            The scope is the current group.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Aggregate">
      <summary>
            Represents an aggregate value calculated during document generation.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another Aggregate object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Owner">
      <summary>
            Gets the AggregateCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Func">
      <summary>
            Gets or sets the aggregate function to calculate.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.IgnoreNullValues">
      <summary>
            Gets or sets a value which specifies whether null values should be
            ignored when an aggregate is calculated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Expression">
      <summary>
            Gets an expression used to calculate aggregate value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText">
      <summary>
            Gets a text of expression used to calculate aggregate value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.DataBinding">
      <summary>
            Gets or sets the data binding for which the arithmetic function is calculated.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Running">
      <summary>
            Gets or sets the value indicating whether the aggregate should be calculated
            over all records, or separately for each group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Value">
      <summary>
            Gets the value of field.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateCollection">
      <summary>
            Collection of Field objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Owner">
      <summary>
            Gets the C1DataSchema object containing this AggregateCollection object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.Int32)">
      <summary>
            Enumerates aggregates by index.
            </summary>
      <param name="index">Index of aggregate zero-based.</param>
      <returns>Returns the Aggregate object at specified position.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.String)">
      <summary>
            Enumerates aggregates by name.
            </summary>
      <param name="name">Name of aggregate.</param>
      <returns>Returns the Aggregate object with specified name, empty aggregate will be returned if collection has no field with specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.C1DataBinding">
      <summary>
            Defines the data binding properties of an object within a C1PrintDocument.
            (Currently only RenderObject and TableVectorGroup objects have DataBinding property of this type.)
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IFieldCollectionOwner">
      <summary>
            This interface should be implemented by object
            containing FieldCollection object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.AssignFrom(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>
            Copies properties from another object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText">
      <summary>
            Gets or sets the Expression object defining expression used to generate
            the outline captions.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.ParentOutline">
      <summary>
            Gets or sets the parent outline node.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Parent">
      <summary>
            Gets the parent C1DataBinding object.
            The parent is retrieved based on the objects' ownership hierarchy,
            so e.g. for a RenderText inside a RenderArea, the RenderText's DataBinding.Parent
            will return the DataBinding of the area containing the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Mode">
      <summary>
            Gets the data binding mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Defined">
      <summary>
            Gets the value indicating that this C1DataBinding object is not empty
            and is linked to some data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource">
      <summary>Gets or sets the custom data providing object.</summary>
      <remarks>
        <para>Currently objects of the following types can be assigned to this property:</para>
        <list type="bullet">
          <item>
            <description>IEnumerable</description>
          </item>
          <item>
            <description>C1.C1Preview.DataBinding.DataSet</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping">
      <summary>
            Gets the Grouping object that defines how the data is grouped.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting">
      <summary>
            Gets the Sorting object that defines how the data is sorted.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Fields">
      <summary>
            Gets the collection of data fields.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Filters">
      <summary>
            Gets the collection of expressions containing filters applied to the linked data.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Document">
      <summary>
            Gets the C1PrintDocument object containing this C1DataBinding object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber">
      <summary>
            Gets the row number of the current row or group instance.
            This property can be used only when document is generating.
            It returns 0 if document is not in generating state or processing
            of RenderObject containing this C1DataBinding object is not started,
            returns number of row when data is enumerated and number of last row
            when data enumeration finished.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataSchema.Clear">
      <summary>
            Clears the C1DataSchema object, deletes all defined
            DataSets, DataSources and Aggregates.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Owner">
      <summary>
            Gets the C1PrintDocument object containing this data schema.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources">
      <summary>
            Gets the DataSourceCollection object containing information about
            how to connect to the sources of data for the various DataSets.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets">
      <summary>
            Gets the DataSetCollection object, containing information about the
            sets of data retrieved as a part of the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates">
      <summary>
            Gets the AggregateCollection object, containing information about
            aggregate values calculated during document generation.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataProviderEnum">
      <summary>
            The type of the data source.
            This will determine the syntax of the ConnectionProperties.ConnectString and 
            Query.CommandText.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SQL">
      <summary>
            Microsoft SQL Server.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.OLEDB">
      <summary>
            Microsoft OLE DB Provider.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.ODBC">
      <summary>
            Microsoft Open Database Connectivity Driver.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.Oracle">
      <summary>
            Oracle.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.XmlFile">
      <summary>
            The XML file specified as the datasource, in this case
            the ConnectString contains name of file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ConnectionProperties">
      <summary>
            Contains information about how to connect to a data source.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ConnectionProperties.AssignFrom(C1.C1Preview.DataBinding.ConnectionProperties)">
      <summary>
            Copies properties from another ConnectionProperties object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.DataProvider">
      <summary>
            Gets or sets the type of the data source.
            This determines the syntax of the ConnectionProperties.ConnectString and
            Query.CommandText.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.ConnectString">
      <summary>
            Gets or sets the connection string for the data source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.IntegratedSecurity">
      <summary>
            Gets or sets the value indicating whether connection to this data source
            should use integrated security.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSet">
      <summary>
            Contains information about a set of data retrieved as a part of the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.AssignFrom(C1.C1Preview.DataBinding.DataSet)">
      <summary>
            Copies properties from another DataSet object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Owner">
      <summary>
            Gets DataSetCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Query">
      <summary>
            Gets Query object defining information about the data source, including
            connection information, query, etc. required to
            get the data from the data source.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Fields">
      <summary>
            Gets the DataSetFieldCollection object containing the fields in the data set.
            List of fields can be empty in this case all 
            fields retrieved by query will accessible.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Filters">
      <summary>
            Gets the ExpressionCollection collection containing filters 
            applied to the dataset's records.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.RowFilter">
      <summary>
            Gets or sets the expression used to filter which data rows are included
            in the document.
            This property will be assigned to the RowFilter property
            of the underlying DataTable object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.MaxRecords">
      <summary>
            Gets or sets the maximum number of records that will be fetched
            from the data set. The default is -1, which includes all records.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetCollection">
      <summary>
            Collection of DataSet objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.Add(C1.C1Preview.DataBinding.DataSet)">
      <summary>
            Adds DataSet object to the collection.
            </summary>
      <param name="item">The DataSet object to add.</param>
      <returns>Returns index of added object in the collection.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetField">
      <summary>
            Represents the field in the data model.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another DataSetField object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.Expression">
      <summary>
            Gets the Expression object defining the expression used to calculate
            the value of this field. Either Expression or DataField
            (but not both) should be defined for a DataSetField. If both are defined,
            DataField is used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.DataField">
      <summary>
            Gets or sets the name of the field in the query.
            DataField names do not need to be unique.
            Multiple fields can refer to the same data field.
            If DataField is not specified then Expression is used to determine
            the value of the field.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.ExpressionText">
      <summary>
            Gets or sets the text of the expression.
            This field is a shortcut for the Expression.Text property.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetFieldCollection">
      <summary>
            Collection of DataSetField objects.
            All fields in the collection must have unique non-empty names.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Owner">
      <summary>
            Gets the DataSet object containing this DataSetFieldCollection object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.Int32)">
      <summary>
            Enumerates fields by index.
            </summary>
      <param name="index">Index of field zero-based.</param>
      <returns>Returns the Field object at specified position.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.String)">
      <summary>
            Enumerates fields by name.
            </summary>
      <param name="name">Name of field.</param>
      <returns>Returns the DataSetField object with specified name, null will be returned if collection has no field with specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSource">
      <summary>
            Contains information about a data source.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.AssignFrom(C1.C1Preview.DataBinding.DataSource)">
      <summary>
            Copies properties from another DataSource object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Owner">
      <summary>
            Gets DataSourceCollection object containing this DataSource object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.DataSchema">
      <summary>
            Gets C1DataSchema object containing this DataSource object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.ConnectionProperties">
      <summary>
            Contains information about how to connect to the data source: ConnectString, data provider, etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Transaction">
      <summary>
            Indicates the data sets that use this data source should be executed in a single transaction.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSourceCollection">
      <summary>
            Collection of DataSource objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.Add(C1.C1Preview.DataBinding.DataSource)">
      <summary>
            Adds DataSource object to the collection.
            </summary>
      <param name="item">DataSource object to add.</param>
      <returns>Index in collection of added object.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Expression">
      <summary>
            Represents an expression that can be used is grouping, sorting etc.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.AssignFrom(C1.C1Preview.DataBinding.Expression)">
      <summary>
            Copies properties from another object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Expression.Text">
      <summary>
            Gets or sets the text of expression.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ExpressionCollection">
      <summary>
            Collection of Expression objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ExpressionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index within the collection. 
            </summary>
      <param name="index">Index of item zero-based.</param>
      <returns>Returns an item at specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Field">
      <summary>
            Represents the data field.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Owner">
      <summary>
            Gets the FieldCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Value">
      <summary>
            Gets the value of field.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.FieldCollection">
      <summary>
            Collection of Field objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Owner">
      <summary>
            Gets the owner object containing this FieldCollection object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated">
      <summary>
            Gets value indicating that the collection was created automatically and was not changed
            by the user.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.Int32)">
      <summary>
            Enumerates fields by index.
            </summary>
      <param name="index">Index of field zero-based.</param>
      <returns>Returns the Field object at specified position.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.String)">
      <summary>
            Enumerates fields by name.
            </summary>
      <param name="name">Name of field.</param>
      <returns>Returns the Field object with specified name, empty field will be returned if collection has no field with specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Grouping">
      <summary>
            The Grouping class defines expressions by which the data is grouped.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Grouping.AssignFrom(C1.C1Preview.DataBinding.Grouping)">
      <summary>
            Copies properties from another object.
            The Name and Owner properties are not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Defined">
      <summary>
            Gets the value indicating whether any grouping is defined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Owner">
      <summary>
            Gets the C1DataBinding object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Expressions">
      <summary>
            Gets the ExpressionCollection containing the expressions
            to by which to group the data.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.CommandTypeEnum">
      <summary>
            Describes the allowed query types.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.Text">
      <summary>
            CommandText contains the text of the SQL query.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.StoredProcedure">
      <summary>
            CommandText contains the name of a stored procedure that should be executed to retrieve the data.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.TableDirect">
      <summary>
            CommandText contains the name of the data table.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Query">
      <summary>
            Contains the description of the query to execute and retrieve the data for the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Query.AssignFrom(C1.C1Preview.DataBinding.Query)">
      <summary>
            Copies properties from another Query object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.DataSource">
      <summary>
            Gets or sets the DataSource object against which to execute the query.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandType">
      <summary>
            Gets or sets the type of the query contained in the CommandText.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandText">
      <summary>
            Gets or sets the query to execute to obtain the data for the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Timeout">
      <summary>
            Gets or sets the number of seconds to allow the query to run
            before timing out. Must be nonnegative. If
            omitted or zero, the query should not time out.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Parameters">
      <summary>
            Gets the QueryParameterCollection object 
            containing parameters that are passed to the data source as part of the query.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameter">
      <summary>
            Contains information about a parameter that is passed to the data
            source as part of the query.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
            Copies properties from another QueryParameter object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Owner">
      <summary>
            Gets the QueryParameterCollection object containing this query parameter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Value">
      <summary>
            Gets or sets the value of the parameter.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameterCollection">
      <summary>
            Collection of QueryParameter objects.
            All parameters in the collection must have unique non-empty names.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Owner">
      <summary>
            Gets the Query object containing this QueryParameterCollection object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.Int32)">
      <summary>
            Enumerates parameters by index.
            </summary>
      <param name="index">Index of parameter zero-based.</param>
      <returns>Returns the QueryParameter object at specified position.</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.String)">
      <summary>
            Enumerates parameters by name.
            </summary>
      <param name="name">Name of parameter.</param>
      <returns>Returns the QueryParameter object with specified name, null will be returned if collection has no parameter with specified name.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Sorting">
      <summary>
            The Sorting class defines the expressions to sort the data by.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Sorting.AssignFrom(C1.C1Preview.DataBinding.Sorting)">
      <summary>
            Copies properties from another object.
            The Owner property not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Defined">
      <summary>
            Gets value indicating that the sorting is defined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Expressions">
      <summary>
            Gets the collection of sort expressions.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortDirectionEnum">
      <summary>
            Defines the types of sorting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Ascending">
      <summary>
            Sorts in ascending order.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Descending">
      <summary>
            Sorts in descending order.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpression">
      <summary>
            Represents the sorting expression.
            </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.AssignFrom(C1.C1Preview.DataBinding.SortExpression)">
      <summary>
            Copies properties from another object.
            The Owner property not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Expression">
      <summary>
            Gets the Expression object defining the expression.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Direction">
      <summary>
            Gets or sets the direction of sorting.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.ExpressionText">
      <summary>
            Gets or sets the text of sorting expression.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpressionCollection">
      <summary>
            Collection of SortExpression objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpressionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index within the collection. 
            </summary>
      <param name="index">Index of item zero-based.</param>
      <returns>Returns an item at specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.EmfOutlineHeader">
      <summary>
            Contains data describing an outline entry extracted from a metafile
            comment record created by C1Report or compatible (using the "%PDFHdr|" prefix).
            </summary>
    </member>
    <member name="M:C1.C1Preview.EmfOutlineHeader.#ctor(System.Int32,System.Int32,System.String,System.Drawing.RectangleF)">
      <summary>
            Creates a new instance of EmfOutlineHeader class.
            </summary>
      <param name="pageIdx">0-based page index.</param>
      <param name="level">Outline level.</param>
      <param name="text">Entry text.</param>
      <param name="rect">Entry rectangle.</param>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.PageIdx">
      <summary>
            Gets or sets the 0-based page index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Level">
      <summary>
            Gets or sets the entry outline level.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Text">
      <summary>
            Gets or sets the entry text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Rectangle">
      <summary>
            Gets or sets the entry rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentPageLayouts">
      <summary>
            Describes the page layouts used in document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Owner">
      <summary>
            Gets the C1PrintDocument object containing this DocumentPageLayouts object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Item(C1.C1Preview.PageLayoutKindEnum)">
      <summary>
            Enumerates all page layouts by kind,
            can return null if page layout with specified kind does not exist.
            </summary>
      <param name="kind">Kind of page layout object.</param>
      <returns>The page layout object with specified kind.</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.FirstPage">
      <summary>
            Gets or sets the layout for the first page of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.LastPage">
      <summary>
            Gets or sets the layout for the last page of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.EvenPages">
      <summary>
            Gets or sets the layout for even pages of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.OddPages">
      <summary>
            Gets or sets the layout for odd pages of the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Default">
      <summary>
            Gets or sets the default page layout for the current document.
            The effective page layout for each page is determined by merging the default layout
            with all other applicable layouts (and can be accessed via the CurrentPageLayout property
            on the document).
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnFirstPage">
      <summary>
            Gets or sets a value indicating whether the page header should
            print on the first page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnFirstPage">
      <summary>
            Gets or sets a value indicating whether the page footer should
            print on the first page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnLastPage">
      <summary>
            Gets or sets a value indicating whether the page header should
            print on the last page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnLastPage">
      <summary>
            Gets or sets a value indicating whether the page footer should
            print on the last page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.SuppressEmptyLastPage">
      <summary>
            Gets or sets a value indicating whether to suppress adding an empty page
            at the end of the document if the last object in the document contains
            a page break after itself.
            The default value is false.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintController">
      <summary>
            The .NET PreviewPrintController creates metafiles with gdi+ commands.
            This is bad for us because the format of such emf records is not
            documented, and so we can not e.g. search for text. But, if we just
            use .NET PrintController, the page generation process slows down by
            a factor of 2 (at least). The only way to avoid this is to inherit
            from PreviewPrintController but provide our own graphics, based on
            emf-only metafiles. Another caveat is which base methods to call and
            which not. Invoking base.OnStartPrint/base.OnEndPrint is necessary
            because if we do not do that performance is the same as with the
            regular PrintController (i.e. bad). OTOH, invoking base.OnStartPage/
            base.OnEndPage looks like wasting time (as we can not use the provided
            graphics anyway) and what is more, for big documents at some point
            seems to drain resources and causes our creation of metailes to fail.
            So what is below seems to be the only combination that works. Still,
            the whole printing stuff in .NET is a mess. --dima.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FormsStyleEnum">
      <summary>
            Defines the look and feel of RenderInput objects.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.Acrobat">
      <summary>
            RenderInput objects look like in Acrobat reader.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.InfoPath">
      <summary>
            RenderInput objects look like in MS InfoPath.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinXp">
      <summary>
            RenderInput objects look like WinXP controls.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinClassic">
      <summary>
            RenderInput objects look like standard windows controls.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1DocumentFormatEnum">
      <summary>
            Defines the document persistence format.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1d">
      <summary>
            The original C1Preview for .NET 2.0 format.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1dx">
      <summary>
            The new, Open Packaging Conventions compliant, format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintDocument">
      <summary>
            ComponentOne Document.
            </summary>
      <summary>
            Represents a document that can be previewed, printed or exported to an external format.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Clear">
      <summary>
            Clears the document, all its properties will be set to default values
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String)">
      <summary>
            Saves the current document to a disk file. The file format (C1D or C1DX)
            is determined by the specified file extension. The save format defaults
            to C1D if the format cannot be determined from the extension.
            </summary>
      <param name="fileName">The target file name.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Saves the current document to a disk file using the specified format.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)">
      <summary>
            Saves the current document to a stream using the C1D format.
            </summary>
      <param name="stream">The target stream.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Saves the current document to a stream using the specified format.
            </summary>
      <param name="stream">The target stream.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream)">
      <summary>
            Loads the current document from a stream.
            The stream should contain a document in C1D format.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Loads the current document from a stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String)">
      <summary>
            Loads the current document from a file.
            The file format (C1D or C1DX) is determined by the file extension.
            The format defaults to C1D if the format cannot be determined from the extension.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Loads the current document from a file.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Creates a new instance of C1PrintDocument class, and loads the document from the specified file.
            </summary>
      <param name="fileName">The name of the file from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
      <returns>The C1PrintDocument that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String)">
      <summary>
            Creates a new instance of C1PrintDocument class, and loads the document from the specified file.
            The document format (C1D or C1DX) is determinated by the file extension.
            If the format cannot be determined by the extension, the C1D format is used.
            </summary>
      <param name="fileName">The name of the file from which to load the document.</param>
      <returns>The C1PrintDocument that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>
            Creates a new instance of C1PrintDocument class, and loads the document from the specified stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
      <returns>The C1PrintDocument that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream)">
      <summary>
            Creates a new instance of C1PrintDocument class, and loads the document from the specified stream.
            The stream must contain a document saved in C1D format.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <returns>The C1PrintDocument that was created.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.SelectBestMeasurementDevice">
      <summary>
            Selects the optimal device which can be used for MeasurementGraphics,
            it search for printer with "square" dpi (DpiX == DpiY) large or equal than 300,
            if such printer does not exist then screen Graphics is used.
            Parameters of selected device can be read from MeasurementXXX properties.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Converts a value in the "ResolvedUnitType" units to another units of measurement.
            </summary>
      <param name="value">Value in the "ResolvedUnitType" units.</param>
      <param name="destType">Specifies the destination units.</param>
      <param name="destDpi">Specifies the DPI if destType is UnitTypeEnum.Pixel.</param>
      <returns>Returns the converted value.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,System.Single,System.Single,System.Boolean)">
      <summary>
            Converts rectangle in ResolvedUnitType to pixels.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
            Converts a value from specified units of measurement in the "ResolvedUnitType" units.
            </summary>
      <param name="value">The source value.</param>
      <param name="valueType">Specifies the source units.</param>
      <returns>Returns the converted value in "ResolvedUnitType" units.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate">
      <summary>
            Generates a document.
            </summary>
      <returns>Returns true if no warning occurs during generating.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate(C1.C1Preview.RefreshModeEnum)">
      <summary>
            Generates the document. The argument indicates the refresh mode.
            </summary>
      <param name="refreshMode">Indicates that information should be refreshed during generation.</param>
      <returns>Returns true if no warning occurs during generating.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout,C1.C1Preview.PageDirectionEnum)">
      <summary>
            Creates a new page and adds it to the document.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
      <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
      <param name="direction">Indicates which page must be added - vertical or horizontal.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout)">
      <summary>
            Creates a new page and adds it to the document.
            </summary>
      <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage">
      <summary>
            Creates a new page and adds it to the document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewColumn">
      <summary>
            Begins a new column. If the current column is the last on the page then a new page will be started.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewLine">
      <summary>
            Begins a new line in inline flow, can be used only if current stacking is inline flow.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.StartDoc">
      <summary>
            Starts a new document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.EndDoc">
      <summary>
            Finishes generation of a document.
            </summary>
      <returns>Returns true if no warning occurs during generating.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderBlock">
      <summary>
            Indicates whether rendering in the block flow is permitted now.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderDirect">
      <summary>
            Indicates whether direct rendering is permitted now.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.IsInlineStarted">
      <summary>
            Indicates whether the inline rendering started.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)">
      <summary>
            Adds render object to the document and resolves it.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
      <param name="ro">RenderObject object to process.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)">
      <summary>
            Addes render object to the document and resolves it in a specified position.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
      <param name="x">X coordinate of object, can't be auto.</param>
      <param name="y">Y coordinate of object, can't be auto.</param>
      <param name="ro">RenderObject object to render.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)">
      <summary>
            Addes render object to the document and resolves it in a specified position.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
      <param name="x">X coordinate of object, can't be auto.</param>
      <param name="y">Y coordinate of object, can't be auto.</param>
      <param name="ro">RenderObject object to render.</param>
      <param name="width">Width of object, if null then autowidth.</param>
      <param name="height">Height of object, if null then autoheight.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders the RTF text.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <param name="width">If null then parent width will be used.</param>
      <param name="height">If null then autoheight will be used.</param>
      <param name="style">Style of object.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object)">
      <summary>
            Renders the RTF text with autoheight.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <param name="width">If null then parent width will be used.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String)">
      <summary>
            Renders the RTF text with parent width and autoheight.
            </summary>
      <param name="rtf">Text to render, can be plain text.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <param name="width">Width of an image box. If null then autowidth.</param>
      <param name="height">Height of an image box. If null then autoheight.</param>
      <param name="style">Style of the image. If null then the style for an image of document is used.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <param name="width">Width of an image box. If null then autowidth.</param>
      <param name="height">Height of an image box. If null then autoheight.</param>
      <param name="imageAlign">Alignment of an image.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image)">
      <summary>
            Renders the Image.
            </summary>
      <param name="image">Image to render.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)">
      <summary>
            Begins the rendering of paragraph, you can omit this method and call
            RenderInlineTextXXX methods directly(), but this method allows to define
            the style of inline paragraph.
            If inline rendering already started the current paragraph will be closed
            and new will begin.
            </summary>
      <param name="style">Style of beginnig paragraph.</param>
      <param name="width">Width of an image box. If null then autowidth.</param>
      <param name="height">Height of an image box. If null then autoheight.</param>
      <returns>Returns true if no warnings occur during rendering the object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd">
      <summary>
            Finishes the inline rendering.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders a rich text in specified position.
            </summary>
      <param name="x">X coordinate of text area, can't be auto.</param>
      <param name="y">Y coordinate of text area, can't be auto.</param>
      <param name="rtf">Rich text to render.</param>
      <param name="width">Width of text area, can't be null or auto because the RenderRichText does not support autowidth.</param>
      <param name="height">Height of text area, if null then autoheight.</param>
      <param name="style">Style of rich text, can be null.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object)">
      <summary>
            Renders an rich text in specified position, the heigh of text will be calculated
            automatically.
            </summary>
      <param name="x">X coordinate of text area, can't be auto.</param>
      <param name="y">Y coordinate of text area, can't be auto.</param>
      <param name="rtf">Rich text to render.</param>
      <param name="width">Width of rich text, can't be null or auto because the RenderRichText does not support autowidth.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders an image in specified position.
            </summary>
      <param name="x">X coordinate of image, can't be auto.</param>
      <param name="y">Y coordinate of image, can't be auto.</param>
      <param name="image">Image to render.</param>
      <param name="width">Width of image, if null then autowidth.</param>
      <param name="height">Height of image, if null then autoheight.</param>
      <param name="style">Style of image, can be null.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>
            Renders an image in specified position.
            </summary>
      <param name="x">X coordinate of image, can't be auto.</param>
      <param name="y">Y coordinate of image, can't be auto.</param>
      <param name="image">Image to render.</param>
      <param name="width">Width of image, if null then autowidth.</param>
      <param name="height">Height of image, if null then autoheight.</param>
      <param name="imageAlign">Alignment of an image.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image)">
      <summary>
            Renders an image in specified position.
            </summary>
      <param name="x">X coordinate of image, can't be auto.</param>
      <param name="y">Y coordinate of image, can't be auto.</param>
      <param name="image">Image to render.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
            Renders a text in specified position.
            </summary>
      <param name="x">X coordinate of text area, can't be auto.</param>
      <param name="y">Y coordinate of text area, can't be auto.</param>
      <param name="text">Text to render.</param>
      <param name="width">Width of text area, if null then autowidth.</param>
      <param name="height">Height of text area, if null then autoheight.</param>
      <param name="style">Style of text, can be null.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Renders a text in specified position.
            </summary>
      <param name="x">X coordinate of text area, can't be auto.</param>
      <param name="y">Y coordinate of text area, can't be auto.</param>
      <param name="text">Text to render.</param>
      <param name="width">Width of text area, if null then autowidth.</param>
      <param name="font">Font of text.</param>
      <param name="horzAlign">Horizontal alignment of text.</param>
      <param name="textColor">Color of text.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)">
      <summary>
            Imports a C1Report report definition into the current document.
            </summary>
      <param name="fileName">The name of the file containing the report definition.</param>
      <param name="reportName">The name of the report in the file.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a disk file.
            </summary>
      <param name="fileName">The output file name. The file extension determines the export format.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Exports the document to a stream.
            </summary>
      <param name="stream">The destination stream.</param>
      <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="outputRange">The range of pages to export (use null to export all pages).</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindAnchor(System.String)">
      <summary>
            Searches the anchor in document.
            </summary>
      <param name="anchorName">The name of anchor to search.</param>
      <returns>Returns the C1AnchorInfo object about searched anchor or null if not found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindInputFragment(System.Int32,System.Boolean)">
      <summary>
            Searches the first RenderInputFragment.
            </summary>
      <param name="startPageIndex">Index of the first page from which the search begins.</param>
      <param name="toLastPage">If true then the search goes from startPageIndex to last document's page.</param>
      <returns>Returns the searched RenderInputFragment object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MaxPages">
      <summary>
            Gets or sets the value limiting the maximum number of pages
            in the generated document.
            <para>
            The default value is -1, indicating that the number of pages
            in the document is unlimited.
            </para><para>
            This property is only relevant when the document is
            created using the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationMode">
      <summary>
            Gets the mode of document creation.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationDpi">
      <summary>
            Gets the dpi which is used during document creation.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationGraphics">
      <summary>
            Gets or sets the Graphics object used to generate the document.
            This graphics used to calculate text sizes, measuring RTF text etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmfType">
      <summary>
            Gets or sets the type of metafiles created by this document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentInfo">
      <summary>
            Gets or sets common info about document: author, caption, and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ResolvedUnit">
      <summary>
            Gets or sets the units of measurement in which bounds of objects' fragment will
            specified. This property can't be changed when document is in
            generating of its content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayout">
      <summary>
            Gets or sets the default page layout for the document.
            This property is a shortcut for <see cref="!:PageLayouts.Default" />.
            (A page layout includes page settings, page headers and footers, and column definitions.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayouts">
      <summary>
            Gets the page layouts used in the current document.
            In addition to the default layout which is always present, special layouts
            may be defined for first, last, even and odd pages of the document.
            The effective layout for each page is then produced by merging all applicable layouts.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Stacking">
      <summary>
            Gets or sets the stacking rules for the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DefaultUnit">
      <summary>
            Defines the default unit of measurement. When lengths are set without 
            specifying unit of measurement this unit is assumed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Body">
      <summary>
            Gets the object representing the page body.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Tags">
      <summary>
            Gets the collection of document's tags which are defined by user.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts">
      <summary>
            Gets the collection of embedded fonts.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts">
      <summary>
            Gets or sets the value indicating whether the EmbeddedFonts
            collection will be automatically filled during document generation
            with fonts used in the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagEscapeString">
      <summary>
            Gets or sets the string that can be used to escape TagOpenParen and TagCloseParen.
            The default is "\".
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ThrowExceptionOnError">
      <summary>
            Indicates that the exception must be raised when error occurs during generating,
            if this flag is false then Generate method will return false and exception
            not will be raised. This property is false by default.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AllowNonReflowableDocs">
      <summary>
            Gets or sets the value indicating whether methods can be called on the document
            that would result in the document becoming non-reflowable. If false (the default),
            invoking such methods causes an exception to be thrown.
            (If the document is non-reflowable, the document will not automatically reflow
            in the preview when the end user changes page settings.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ClipPage">
      <summary>
            Gets or sets the value indicating whether to clip the content to page margins.
            The default value is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DisableUserReflow">
      <summary>
            Gets or sets the value indicating whether the end user should be allowed
            to reflow the document with different page settings. This value is only a hint
            to the document viewer, it is the viewer's responsibility to respect that hint.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering">
      <summary>
            Gets or sets the value indicating whether all text in the current document
            should be rendered using the GDI+ text API.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DoEvents">
      <summary>
            Specifies whether <see cref="T:C1.C1Preview.C1PrintDocument" /> should handle Windows messages while generating the document.
            </summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while documents are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a
            "Cancel" button to stop the document generation (otherwise the user wouldn't be able to click the
            button until the generation was complete).</para>
        <para>Setting this property to false will cause documents to generate slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Generate" and "Cancel" buttons attached to a <see cref="T:C1.C1Preview.C1PrintDocument" />.</para>
        <para>The "Generate" button checks whether the document is busy before starting to generate it.
            This is necessary because the user could click the "Generate" button several times in a row, before the document got a 
            chance to finish generating. (Calling the <see cref="M:C1.C1Preview.C1PrintDocument.Generate" /> method while the component is busy throws an 
            exception.)</para>
        <para>The "Cancel" button checks whether the document is currently generating, and sets the <see cref="P:C1.C1Preview.C1PrintDocument.Cancel" /> 
            property to true if it is.</para>
        <code>
            _doc.DoEvents = true;
            
            private void Generate_Click(object sender, EventArgs e)
            {
               if (_doc.BusyState != BusyStateEnum.Ready)
                   Console.WriteLine("Cannot generate now, document is busy");
               else 
                   _doc.Generate();
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_doc.BusyState != BusyStateEnum.Ready) 
                   _doc.Cancel = true;
               else 
                   Console.WriteLine("Document is not generating, nothing to cancel");
            }
            </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Style">
      <summary>
            Main style of document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Outlines">
      <summary>
            Gets the document's outlines.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Dictionary">
      <summary>
            Gets the document's dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionTab">
      <summary>
            Gets or sets the action to be performed when the TAB key is pressed 
            in C1PreviewPane control which is connected to this document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionEnter">
      <summary>
            Gets or sets the action to be performed when the ENTER key is pressed
            in C1PreviewPane control which is connected to this document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsStyle">
      <summary>
            Gets or sets the look of RenderInputXXX objects in the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AddWarningsWhenErrorInScript">
      <summary>
            Gets or sets value indicating that the warning should be added
            to the document's warnings collection when a script contains an error.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UsePrinterForDefaultPageSettings">
      <summary>
            Gets or sets the value indicating whether the default page settings are
            retrieved from the default printer (may slow things down if the printer
            is a network one) or calculated based on the current locale.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFormatVersion">
      <summary>
            Gets the version of C1D format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormatVersion">
      <summary>
            Gets the C1FormatVersion object describing the version
            of C1D format supported by this assembly.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDpi">
      <summary>
            Gets the DPI of MeasurementGraphics.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName">
      <summary>
            Gets or sets the printer name providing the Graphics which is used
            for measuring the layout of document.
            This property is used only
            when MeasurementDevice is MeasurementDeviceEnum.Printer.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDevice">
      <summary>
            Gets or sets the type of device providing the Graphics which is used
            for measuring the layout of document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics">
      <summary>
            Gets the Graphics object which is used 
            for measuring the layout of document.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DefaultUnitChanged">
      <summary>
            Occurs when the value of the DefaultUnit was changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.ResolvedUnitChanged">
      <summary>
            Occurs when the value of the ResolvedUnit was changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.LongOperation">
      <summary>
            Indicate the progress of document generation.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BusyStateChanged">
      <summary>
            Occurs when the value of the BusyState was changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.HasGenerateDocumentHandler">
      <summary>
            Gets the value indicating whether a handler is attached to the
            GenerateDocument event of the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageLayout">
      <summary>
            Gets the effective layout for the current page. That layout is automatically
            built on the fly by merging all applicable layouts defined for the document in <see cref="P:C1.C1Preview.C1PrintDocument.PageLayouts" />.
            You may change the properties on CurrentPageLayout programmatically. The changes will be
            effective immediately if they are made in the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event handler,
            otherwise they will take effect for the next added page.
            <para>
            Note that this property is only available during document generation, at other times null is returned.
            </para></summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AcceptButton">
      <summary>
            Gets the RenderInputButton object representing the 
            accept button in document (the first RenderInputButton object with AcceptButton == true).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics">
      <summary>
            Gets the current RenderGraphics object, which was opened with RenderBlockGraphicsBegin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockGraphics">
      <summary>
            Gets the current Graphics object which was opened with RenderBlockGraphicsBegin method.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics">
      <summary>
            Gets the current RenderGraphics object, which was opened with RenderDirectGraphicsBegin.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectGraphics">
      <summary>
            Gets the current Graphics object which was opened with RenderDirectGraphicsBegin method.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsGenerating">
      <summary>
            Indicates whether document is in generating of its content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode">
      <summary>
            Indicates whether document is generating with using of the StartDoc() / EndDoc() methods.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Reflowable">
      <summary>
            Gets value indicating whether the document is reflowable.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Warnings">
      <summary>
            After document generation, contains the collection of warnings for the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorCode">
      <summary>
            Obsolete. Now gets the Code of the first element in the Warnings collection,
            or GenerateErrorEnum.None if there are no warnings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorDesc">
      <summary>
            Obsolete. Now gets the description of the first element in the Warnings collection,
            or an empty string if there are no warnings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Pages">
      <summary>
            Gets the collection of document's pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DataSchema">
      <summary>
            Gets the C1DataSchema object owned by this C1PrintDocument
            object which contains the data schema built-in document.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:C1.C1Preview.C1PrintDocument.Cancel" -->
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPage">
      <summary>
            Gets the current generating page, returns null if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageArea">
      <summary>
            Gets the current generating area of page, returns null if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowHeight">
      <summary>
            An amount of available vertical space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowWidth">
      <summary>
            An amount of available horizontal space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ScriptingOptions">
      <summary>
            Gets the ScriptingOptions object defining the scripting options of this C1PrintDocument object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions">
      <summary>
            Gets the CompatibilityOptions object which determines compatibility
            with the previous versions of C1PrintDocument.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFileName">
      <summary>
            Gets the file name associated with the current document
            (i.e. the document was either loaded from that file, or
            saved to it).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentDirectoryName">
      <summary>
            Gets the directory of the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFileName" />.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript">
      <summary>
            Gets or sets the script that is executed when the current document starts generating.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript">
      <summary>
            Gets or sets the script that is executed when the current document has finished generating.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageConfigureScript">
      <summary>
            Gets or sets the script that is executed when a new page is added to the document.
            This script executes after the page has been added to the <see cref="P:C1.C1Preview.C1PrintDocument.Pages" /> collection
            but before it is resolved (i.e. when the content of the page has not been laid out yet).
            <para>
            This script should be used only to change the page layout. Do not use this script
            to change the page content, as it may cause errors. 
            </para></summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorScript">
      <summary>
            Gets or sets the script that is executed when an error occurs in a script attached to the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.C1PrintDocument" /> also fires the <see cref="!:ScriptError" /> event at this time.
            </para>
        <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
        <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AssemblyVersion">
      <summary>
            Gets the version of C1PrintDocument assembly.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentStarting">
      <summary>
            Occurs when the document building is started.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentEnded">
      <summary>
            Occurs when the document building is ended.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageConfigure">
      <summary>
            Occurs when a new empty page is created and added to the document,
            the page is added to the Pages collection but *not resolved*, 
            use this method only for changing layout of page.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageAdded">
      <summary>
            Occurs only during generating of the document, 
            when generating of page of document is finished, page is added to the Pages collection
            and switch to other page is occured.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageUpdated">
      <summary>
            Occurs when page of document is changed. 
            This event occurs very often while document is generating,
            it is called each time when a fragment of object is 
            added to page or removed from page.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageChanged">
      <summary>
            Occurs only during generating of the document, when page
            of document which was added to document is changed, for example when
            page numbering is changed or PageCount property is updated for page.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageDeleted">
      <summary>
            Occurs when the page is removed from the document (from the Pages collection).
            This event cannot occur during document generation.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PagesClear">
      <summary>
            Occurs when the Pages collection is cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BeforePagesClear">
      <summary>
            Occurs before the Pages collection is cleared.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.GenerateDocument">
      <summary>
            Allows user to build document content in event handler.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.InputValueChanged">
      <summary>
            Occurs when the value of RenderInputBase object within document is changed.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged">
      <summary>
            Occurs when the FormsStyle property value changes. 
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEmpty">
      <summary>
            Represents an empty object.
            Provides a convenient placeholder for things like page breaks and so on where no content needs to be rendered.
            </summary>
      <summary>
            Empty render object with zero heigth and width, this object has no content.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageDirectionEnum">
      <summary>
            Describes the direction in which the new page should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Default">
      <summary>
            Type of page (vertical or horizontal)
            is determinated on the basis of the current stacking rules.
            Vertical page is added if Stacking is StackingRulesEnum.BlockTopToBottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Vertical">
      <summary>
            Vertical page direction - i.e. logically the next page is below the current one.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Horizontal">
      <summary>
            Horizontal page direction - i.e. logically the next page is to the right of the current one.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeBase">
      <summary>
            Represents the base class for actions which can be performed 
            before or after rendering an object.
            Actions like: start new page, column, change columns layout.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewPage">
      <summary>
            Desribes the page break action.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewColumn">
      <summary>
            Describes the column break action.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewLine">
      <summary>
            Describes the line break action on inline flow.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNoBreak">
      <summary>
            Describes the action that does no produce the page break, but changes
            the page layout for next page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IC1Printable">
      <summary>
            If an object implements this interface, it can be seamlessly rendered
            in a <see cref="T:C1.C1Preview.C1PrintDocument" /> via a <see cref="T:C1.C1Preview.RenderC1Printable" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetImage">
      <summary>
            Gets the content of control as Image.
            </summary>
      <returns>The Image object representing a control content.</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetTree">
      <summary>
            Gets the content of control as C1 document
            that is serialized in stream.
            This document can be built with using C1PrintDocumentClient.
            </summary>
      <returns>The stream object containing the document tree.</returns>
    </member>
    <member name="T:C1.C1Preview.Design.C1PageSettingsEditor">
      <summary>
            Represents the design-time editor of for edit the C1PageSettings object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.PageLayoutEditor">
      <summary>
            Represents the design-time editor of for edit the PageLayout object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExportProvider">
      <summary>
            Base class for all export provides working over list of pages, each page
            is represented as metafile.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)">
      <summary>
            Returns true if exporter supports export of specified object.
            </summary>
      <param name="obj">Object to test.</param>
      <returns>Returns true if corresponding exporter can export the specified object.</returns>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExporter">
      <summary>
            Base class for all exporters working over list of pages.
            Derived classes must override ProcessPage method.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument">
      <summary>
            Gets or sets the value indicating whether the document
            should be saved in Office12 format.
            </summary>
      <value>
        <b>true</b> if document should be exported in new Office12 format, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.Paginated">
      <summary>
            Gets or sets the value indicating whether the resulting document
            should preserve the pagination of the original document.
            </summary>
      <value>
        <b>true</b> if page by page export, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.FixedPositioning">
      <summary>
            Gets or sets the value indicating whether the resulting document
            should match closely the exact appearance of the original document.
            This usually is done at the cost of preserving the original
            structure and/or the ease of handling of the resulting document.
            </summary>
      <value>
        <b>true</b> if fixed positioning export, otherwise <b>false</b>.</value>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExportProvider">
      <summary>
            The HTML export provider.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportObject(System.Object)">
      <summary>
            Returns true if exporter supports export of specified object.
            </summary>
      <param name="obj">Object to test.</param>
      <returns>Returns true if corresponding exporter can export the specified object.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter">
      <summary>
            The HTML exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ImageFolder">
      <summary>
            Gets or sets the path to the image folder.
            </summary>
      <value>The folder name (path) for storage of images.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GenerateOutline">
      <summary>
            Gets or sets generate or no contents on outline entries in frame.
            </summary>
      <value>
        <b>true</b> if generate contents on outline entries in frame, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PagePerFile">
      <summary>
            Gets or sets the value indicating whether to export each page
            of the document into a separate file.
            </summary>
      <value>
        <b>true</b> if one file per page, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks">
      <summary>
            Gets or sets the value indicating whether to generate links to individual pages.
            </summary>
      <value>
        <b>true</b> if generate contents on page links, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageSeparators">
      <summary>
            Gets or sets the value indicating whether to separate pages
            of the original document with horizontal lines.
            </summary>
      <value>
        <b>true</b> if generate page separators, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.LinksLocation">
      <summary>
            Gets or sets the location of the generated links (outline entries
            or page numbers).
            </summary>
      <value>The links locations (where contents will be).</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.Scaling">
      <summary>
            Gets or sets the scaling coefficient applied to all elements
            of the resulting document, in percent
            </summary>
      <value>The scaling coefficient value in percents.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar">
      <summary>
            Gets or sets the template used to create the navigation bar with page numbers.
            </summary>
      <value>The template of navigation bar with page numbers.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PreserveExactHeight">
      <summary>
            Gets or sets the value indicating whether the export module should
            try to preserve the exact original height of all elements.
            Generally, setting this property to false makes the resulting
            document more flexible.
            </summary>
      <value>
        <b>true</b> if preserve exact height, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.MaxHorzPageLinks">
      <summary>
            Gets or sets the maximum number of page links in a row.
            </summary>
      <value>The maximum number of page links in a row.</value>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum">
      <summary>
            Defines the links locations.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.None">
      <summary>
            Links are not generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopPage">
      <summary>
            Links are located at the top of the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.LeftFrame">
      <summary>
            Links are located in the left frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.RightFrame">
      <summary>
            Links are located in the right frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopFrame">
      <summary>
            Links are located in the top frame.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.BottomFrame">
      <summary>
            Links are located in the bottom frame.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksModeEnum">
      <summary>
            Defines the links mode.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.None">
      <summary>
            No links are generated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.DocumentOutline">
      <summary>
            The generated links are based on the document outline.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.PageNumbers">
      <summary>
            The generated links point to individual pages.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTarget">
      <summary>
            Determines the target of the hyperlink. This is an abstract class, it cannot be used directly.
            </summary>
      <summary>
            Determines the target of the hyperlink. This is an abstract class, it cannot be used directly.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetPageNoCaption(C1.C1Preview.C1Page,C1.C1Preview.C1PrintDocument)">
      <summary>
            Returns (as a string) the number of the page to which the current C1LinkTarget object points.
            This method may return null if the page number cannot be resolved at this time
            (e.g. if the document has not been generated).
            </summary>
      <param name="currentPage">The page containing this C1LinkTarget object.</param>
      <param name="document">The C1PrintDocument containing this C1LinkTarget object.</param>
      <returns>The page number, converted to a string.</returns>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetAnchor">
      <summary>
            Describes a link target inside the current document.
            </summary>
      <summary>
            Describes a link target inside the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.AnchorName">
      <summary>
            The name of the C1Anchor object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetExternalAnchor">
      <summary>
            Jump to an anchor withtin an external C1Preview document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.DocumentFileName">
      <summary>
            Gets the name of file of external C1Preview document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetFile">
      <summary>
            Describes a link to an external document, file or URL.
            The link is performed using the ShellExecute() API.
            </summary>
      <summary>
            Describes a link to an external document, file or URL.
            The link is performed using the ShellExecute API.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.FileName">
      <summary>
            Specifies the file or object on which to execute the specified verb.
            </summary>
      <remarks>
            To specify a Shell namespace object, pass the fully qualified parse name.
            Note that not all verbs are supported on all objects. 
            For example, not all document types support the "print" verb.
            </remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Command">
      <summary>
            String, referred to in this case as a verb, 
            that specifies the action to be performed.
            </summary>
      <remarks>
        <para>The set of available verbs depends on the particular file or folder. 
            Generally, the actions available from an object's shortcut menu are 
            available verbs.</para>
        <para>For more information about verbs and their availability, see Object Verbs. 
            See Extending Shortcut Menus for further discussion of shortcut menus.</para>
        <para>The following verbs are commonly used.</para>
        <list type="table">
          <item>
            <term>edit</term>
            Launches an editor and opens the document for editing. If FileName is not a document file, the function will fail.
            </item>
          <item>
            <term>explore</term>
            <description>Explores the folder specified by FileName.</description>
          </item>
          <item>
            <term>find</term>
            <description>Initiates a search starting from the specified directory.</description>
          </item>
          <item>
            <term>open</term>
            <description>Opens the file specified by the FileName parameter.
            The file can be an executable file, a document file, or a folder.</description>
          </item>
          <item>
            <term>print</term>
            <description>Prints the document file specified by FileName.
            If FileName is not a document file, the function will fail.</description>
          </item>
          <item>
            <term>Empty string</term>
            <description>For systems prior to Microsoft? Windows? 2000, the default verb is used 
            if it is valid and available in the registry. If not, the "open" verb is used.
            For Windows 2000 and later systems, the default verb is used if available. 
            If not, the "open" verb is used. If neither verb is available, 
            the system uses the first verb listed in the registry.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Parameters">
      <summary>
            If the FileName parameter specifies an executable file, Parameters is a string 
            that specifies the parameters to be passed to the application. 
            The format of this string is determined by the verb that is to be invoked. 
            If FileName specifies a document file, Parameters should be an empty string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Directory">
      <summary>
            String that specifies the default directory.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetPage">
      <summary>
            This class defines a link target to another page in a some document.
            </summary>
      <summary>
            This class defines a link target to another page in a some document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageJumpType">
      <summary>
            Gets the type of jump between pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageNo">
      <summary>
            Specifies the number of page to jump, depending on 
            PageJumpType it specifies the absolute or relative jump.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetDocumentLocation">
      <summary>
            This class defines a link target to object within document
            supporting the IDocumentLocation interface,
            currently this document is supported by the:
            RenderObject, Page.
            </summary>
      <summary>
            This class defines a link target to object within document
            supporting the IDocumentLocation interface,
            currently this document is supported by the:
            RenderObject, Page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetDocumentLocation.DocumentLocation">
      <summary>
            Gets the IDocumentLocation object
            identifying the place within document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTocItem">
      <summary>
            Represents an entry in the table of contents (<see cref="P:C1.C1Preview.RenderTocItem.RenderToc" />).
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderParagraph">
      <summary>
            Represents a paragraph (a run of text fragments in different styles, and inline images).
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextBase">
      <summary>
            The abstract base class for classes representing text and paragraph objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasText">
      <summary>
            Returns true if object has a text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TextLength">
      <summary>
            Returns the length of text. Do not use this property to check exists
            text or not, use HasText instead.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TabPositions">
      <summary>
            Collection of tabs in text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasTabPositions">
      <summary>
            Gets the value indicating whether the TabPositions collection is not empty.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="style">The style to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="font">The font to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="font">The font to use for this RenderParagraph object.</param>
      <param name="textColor">The text color to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="font">The font to use for this RenderParagraph object.</param>
      <param name="textColor">The text color to use for this RenderParagraph object.</param>
      <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="font">The font to use for this RenderParagraph object.</param>
      <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.AlignHorzEnum)">
      <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
      <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,C1.C1Preview.Style)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="font">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="font">
      </param>
      <param name="textColor">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="font">
      </param>
      <param name="textColor">
      </param>
      <param name="horzAlign">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="font">
      </param>
      <param name="horzAlign">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,C1.C1Preview.AlignHorzEnum)">
      <summary>
            For internal use only.
            </summary>
      <param name="document">
      </param>
      <param name="horzAlign">
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Assigns the properties of the current object from the specified RenderParagraph object.
            </summary>
      <param name="source">The object to copy the properties from.</param>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.Content">
      <summary>
            Gets the ParagraphObjectCollection representing the content of this RenderParagraph object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasContent">
      <summary>
            Gets the value indicating whether the current RenderParagraph object has any content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasText">
      <summary>
            Overridden. Gets the value indicating whether the current RenderParagraph object has any content.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.TextLength">
      <summary>
            Gets the length of text in paragraph each non text object has one char length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.TextLength">
      <summary>
            Gets the length of text in paragraph each non text object has one char length.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.Level">
      <summary>
            Gets or sets the level of item in the TOC.
            Level defines the indent of item from the left edge of object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderToc">
      <summary>
            Represents a table of contents.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.ShowPageNumbers">
      <summary>
            Gets or sets the value indicating whether the page numbers should
            be display in TOC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.PageNumbersAtRight">
      <summary>
            Gets or sets the value indicating whether the page numbers should be aligned
            to right edge of TOC.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.FillChar">
      <summary>
            Gets or sets the char used to fill the empty space between
            title and page number.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEmptyFragment">
      <summary>
            Represents a fragment of the RenderEmpty object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderC1Printable">
      <summary>
            Represents an external object that can be seamlessly rendered in a C1PrintDocument.
            (The object must support the <see cref="T:C1.C1Preview.IC1Printable" /> interface.)
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GenerateInnerRenderObjects">
      <summary>
            Forces the generation of inner render object or objects representing the 
            object being printed (assigned to the Object property).
            The generated render objects can be accessed via the Children property.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.ResetInnerRenderObjects">
      <summary>
            Removes the inner render object or objects representing the object being printed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.Object">
      <summary>
            Object to render, it must supports the IC1Printable interface.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.IgnoreObjectPageLayout">
      <summary>
            Gets or sets the value indicating whether the page layout
            defined by the object should be ignored.
            This property is used only when the object returns
            its content as document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderC1PrintableFragment">
      <summary>
            Represents a fragment of the RenderC1Printable object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextFragmentBase">
      <summary>
            Base class for RenderTextFragment and RenderParagraphFragment.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)">
      <summary>
            Gets the area of char with specified index.
            </summary>
      <param name="charIndex">Index of first char of this text's fragment.</param>
      <returns>Returns the RectangleD structure describing the bounds of char relative to the content area of object (without spacing, borders, padding), may be RectangleD.Empty text is rotated use the GetCharPoints method in this case.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharPoints(System.Int32)">
      <summary>
            Gets the array of PointD which define the parallelogramm of char's area.
            </summary>
      <param name="charIndex">Index of first char of this text's fragment.</param>
      <returns>Returns the array of four PointD structures.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRects(System.Int32,System.Int32)">
      <summary>
            Gets an array of rectanges of char range, this function returns an array
            in which each line corresponds to one array's element, like:
                +------------------+
                | rect[0]          |
            +----------------------|
            | rect[1]              |
            | rect[2]              |
            +----------------------+
            | rect[3]       |
            +---------------+
            </summary>
      <param name="startCharIndex">Index of first character of this text's fragment.</param>
      <param name="length">Count of characters.</param>
      <returns>The array of Rectangle structures.</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRegion(System.Int32,System.Int32)">
      <summary>
            Gets the region of char range.
            The region is relative to the top-left corner of inner area of fragment.
            </summary>
      <param name="startCharIndex">Index of first character of this text's fragment.</param>
      <param name="length">Count of characters.</param>
      <returns>The Region object defining the region of char range or null if char range is invalid.</returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptLanguageEnum">
      <summary>
            Enumerates the languages which can be used in <see cref="T:C1.C1Preview.C1PrintDocument" /> scripts.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.VB">
      <summary>
            VB.NET will be used as the scripting language.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.C1Report">
      <summary>
            C1Report scripting language will be used.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptingOptions">
      <summary>
            Defines the scripting options of a C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Reset">
      <summary>
            Resets properties of this Scripting object to their default values.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.AssignFrom(C1.C1Preview.Scripting.ScriptingOptions)">
      <summary>
            Copies properties from another Scripting object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies">
      <summary>
            Gets the list of external assemblies that can be used in the scripts in the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces">
      <summary>
            Gets the list of namespaces that can be used in the scripts in the current document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Language">
      <summary>
            Gets or sets a value indicating which language is used in the scripts attached to the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TagBase.Value">
      <summary>
            Gets or sets value of tag.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Tag">
      <summary>
            Represents the user-defined tag.
            </summary>
      <summary>
            Represents the user-defined tag.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ThreeStateEnum">
      <summary>
            Defines a value which can be in one of three states: undefined, true or false.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.Undefined">
      <summary>
            The value is undefined.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.True">
      <summary>
            The value is true.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.False">
      <summary>
            The value is false.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableSizingModeEnum">
      <summary>
            Defines table sizing modes.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Default">
      <summary>
            At table level, default is Auto for rows, and Fixed for columns;
            at row/column level, default inherits from the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Fixed">
      <summary>
            Size (height for rows, width for columns) should be explicitly
            specified (if omitted, is determined by the available space
            and row/column count).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Auto">
      <summary>
            Size (height for rows, width for columns) is calculated
            automatically based on the content.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CellSplitBehaviorEnum">
      <summary>
            Defines various options for the splitting of content of cells.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Split">
      <summary>
            The content of cell should be split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Copy">
      <summary>
            The content of cell should be copied each time when it splits.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Cut">
      <summary>
            The content of cell should be cut on first time and displayed only once.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageBreakBehaviorEnum">
      <summary>
            Defines various options for the insertion of page breaks.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.Default">
      <summary>
            A page break may be inserted if needed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.MustBreak">
      <summary>
            A page break is always inserted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.PreferredBreak">
      <summary>
            If a page break is needed it should be inserted here.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.NoBreak">
      <summary>
            A page break can not be inserted.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableVector">
      <summary>
            Base class for columns and rows of table.
            One TableVector object can be used in many tables.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVector.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
            Copies properties of anoter TableVector object.
            Number property is not copied.
            </summary>
      <param name="source">The source object properties of which are copied.</param>
    </member>
    <member name="P:C1.C1Preview.TableVector.Owner">
      <summary>
            Gets the TableVectorCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Table">
      <summary>
            Gets the RenderTable object containing this vector.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Ordinal">
      <summary>
            Gets the index of vector, it is zero-based.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Size">
      <summary>
            Gets or sets the size of vector (width for column, height for row).
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.PageBreakBehavior">
      <summary>
            Gets or sets the value determining how page breaks are inserted before this column or row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.CanSplit">
      <summary>
            Gets or sets the value indicating whether the vector (row or column) can split.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Visible">
      <summary>
            Controls the visibility of a table vector. Default value - true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Style">
      <summary>
            Gets the style of vector.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.SizingMode">
      <summary>
            Gets or sets the value determining how the size of the current vector
            is calculated.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StretchRowEnum">
      <summary>
            Defines the modes of stretching of row.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Default">
      <summary>
            The stretching of row depends on RenderTable.StretchRows property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Yes">
      <summary>
            The row will be stretched.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.No">
      <summary>
            The stretching of row is disabled.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.IfLastOnPage">
      <summary>
            The row will be stretched if it is last on page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableRow">
      <summary>
            Represents row of table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Owner">
      <summary>
            Gets the TableRowCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Height">
      <summary>
            Gets or sets the height of the current row.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Stretch">
      <summary>
            Gets or sets the stretching mode of the current row.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StretchColumnEnum">
      <summary>
            Defines the modes of stretching of column.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Default">
      <summary>
            The stretchin of column depends on RenderTable.StretchColumns property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Yes">
      <summary>
            The column will be stretched.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.No">
      <summary>
            The stretching of column is disabled.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.IfLastOnPage">
      <summary>
            The column will be stretched if it is last on page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableCol">
      <summary>
            Represents column of table.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Owner">
      <summary>
            Gets the TableColCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Width">
      <summary>
            Gets or sets the width of the current column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Stretch">
      <summary>
            Gets or sets the stretching mode of the current column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableVectorCollection">
      <summary>
            Collection of TableVector objects.
            This is base class for collections of columns and rows.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FastList">
      <summary>
            Represents the list which provides a fast search of elements in self.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the vectors at specified position.
            </summary>
      <param name="position">Position to insert to.</param>
      <param name="count">Count of vectors to insert.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes vectors at specified position.
            </summary>
      <param name="position">Index of first vector to delete from.</param>
      <param name="count">Count of vectors to delete.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32)">
      <summary>
            Deletes vector at specified position.
            </summary>
      <param name="position">Index of vector to delete.</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32)">
      <summary>
            Inserts vector at specified position.
            </summary>
      <param name="position">Position to insert to.</param>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Owner">
      <summary>
            Gets RenderTable object containing this collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Groups">
      <summary>
            Gets the TableVectorGroupCollection object corresponding this vectors collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Count">
      <summary>
            Gets or sets the "logical" count of vectors.
            If you set this property to -1 then count of vectors (columns or rows)
            will be calculated automatically.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.VectorCount">
      <summary>
            Gets the real count of vectors in collection
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableRowCollection">
      <summary>
            Collection of TableRow objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableRowCollection.FindRow(System.Int32)">
      <summary>
            Searches the row by its index.
            </summary>
      <param name="number">Index of row, zero based.</param>
      <returns>Returns the TableRow object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.TableRowCollection.Item(System.Int32)">
      <summary>
            Gets the TableRow object by its index, if row with specified index is
            not found then new TableRow object will be created.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableColCollection">
      <summary>
            Collection of TableCol objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableColCollection.FindCol(System.Int32)">
      <summary>
            Searches the column by its index.
            </summary>
      <param name="number">Index of column, zero based.</param>
      <returns>Returns the TableCol object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.TableColCollection.Item(System.Int32)">
      <summary>
            Gets the TableCol object by its index, if column with specified number is
            not found then new TableCol object will be created.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableCell">
      <summary>
            Represents cell of table.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableCell.AssignFrom(C1.C1Preview.TableCell)">
      <summary>
            Copies properties of anoter TableVector object.
            Row and Col properties are not copied.
            RenderObject property is copied *not as reference* - the new instance
            of RenderObject is created and assigned to this.RenderObject.
            </summary>
      <param name="source">The source object properties of which are copied.</param>
    </member>
    <member name="M:C1.C1Preview.TableCell.IsVisible">
      <summary>
            Determines is cell visible or not.
            Cell is visible if it has one visible row and one visible column at least.
            Column or row is visible if its Visible property is true.
            </summary>
      <returns>Returns true if cell is visible and false otherwise.</returns>
    </member>
    <member name="P:C1.C1Preview.TableCell.Tag">
      <summary>
            Gets or sets the custom, user-defined data associated with a cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Owner">
      <summary>
            Gets the TableCellCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Row">
      <summary>
            Gets the index of row of cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Col">
      <summary>
            Gets the index of column of cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanCols">
      <summary>
            Count columns in cell span.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanRows">
      <summary>
            Count rows in cell span.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastCol">
      <summary>
            Gets the number of last column in span, if SpanCols is 1 then LastColNo equals ColNo.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastRow">
      <summary>
            Gets the number of last row in span, if SpanRows is 1 then LastRowsNo equals RowNo.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.RenderObject">
      <summary>
            Gets or sets the RenderObject in cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Text">
      <summary>
            Gets or sets the text in cell if cell has not RenderText object then string.Empty returned.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Image">
      <summary>
            Gets or sets the image in cell if cell has not RenderImage object then null returned.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Style">
      <summary>
            Gets the style of cell.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesVert">
      <summary>
            Gets or sets the value indicating whether horizontal gridlines should
            be drawn when the cell is split.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesHorz">
      <summary>
            Gets or sets the value indicating whether vertical gridlines should
            be drawn when the cell is split.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)">
      <summary>
            Searches a cell by row and column indexes.
            </summary>
      <param name="rowNo">Index or row, zero-based.</param>
      <param name="colNo">Index or column, zero-based.</param>
      <returns>Returns the found cell or null.</returns>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.GetRightBottomBounds">
      <summary>
            Gets the bounds of cells area.
            </summary>
      <returns>Size structure, field Width contains index of right-most column +1, field Height contains index of bottom-most row + 1.</returns>
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32)">
      <summary>
            Gets the TableCell object by its index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Owner">
      <summary>
            Gets the RenderTable object containing this cells' collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32,System.Int32)">
      <summary>
            Gets the TableCell object by row and column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableHeaderEnum">
      <summary>
            Defines how the table header is repeated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.None">
      <summary>
            The header is printed once at the top of the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Page">
      <summary>
            The header is repeated at the top of each page. If there are multiple columns
            per page, the header is repeated only at the top of the first column on the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Column">
      <summary>
            The header is repeated only if there are multiple columns per page, at the top
            of each column except the first on the page. If there is only one column,
            the header is not printed at all.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.All">
      <summary>
            The header is repeated at the top of all pages. If there are multiple columns per page,
            the header is repeated at the top of each column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableFooterEnum">
      <summary>
            Defines how the table footer is repeated.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.None">
      <summary>
            The footer is printed once at the end of the table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Page">
      <summary>
            The footer is repeated at the bottom of each page. If there are multiple columns
            per page, the footer is repeated only at the bottom of the last column on the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Column">
      <summary>
            The footer is repeated only if there are multiple columns per page, at the bottom
            of each column except the last on the page. If there is only one column,
            the footer is not printed at all.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.All">
      <summary>
            The footer is repeated at the bottom of all pages. If there are multiple columns per page,
            the footer is repeated at the bottom of each column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Owner">
      <summary>
            Gets the TableVectorGroupCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Table">
      <summary>
            Gets the RenderTable object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Position">
      <summary>
            Gets the index of column or row from which groups begins.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Count">
      <summary>
            Gets count of rows or columns in the group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.LastPosition">
      <summary>
            Gets the number of column or row with which group ends.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.CanSplit">
      <summary>
            Indicates whether the group can be split between pages.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageHeader">
      <summary>
            Indicates whether the group should be reprinted as header on each page where table exists.
            Only one group in the table can has this flag.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageFooter">
      <summary>
            Indicates whether the group should be reprinted as footer on each page where table exists.
            Only one group in the table can has this flag.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnHeader">
      <summary>
            Indicates whether the group should be reprinted as header on each column where table exists.
            Only one group in the table can has this flag.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnFooter">
      <summary>
            Indicates whether the group should be reprinted as footer on each column where table exists.
            Only one group in the table can has this flag.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Style">
      <summary>
            Gets the Style of group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBinding">
      <summary>
            Gets the instance of C1DataBinding class representing the 
            data binding properties of this RenderObject object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingDefined">
      <summary>
            Gets the value indicating that this TableVectorGroup is data bound
            via the DataBinding property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingMode">
      <summary>
            Gets the data binding mode.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetBound">
      <summary>
            Gets the bound of grous area, the number of right-most or bottom-most
            group +1.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroup(System.Int32,System.Int32)">
      <summary>
            Searches the TableVectorGroup object with specified coordinates and returns its index,
            returns -1 if group with specified coordinates does not exist.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroupsAtPos(System.Int32)">
      <summary>
            Searches a groups containing this index of vector.
            Groups are sorted by the Count parameter.
            </summary>
      <param name="number">Index of vector.</param>
      <returns>Returns the list of searched groups.</returns>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.Item(System.Int32,System.Int32)">
      <summary>
            Gets the TableVectorGroup object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingDefined">
      <summary>
            Gets the value indicating whether some group of this collection is data bound.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingMode">
      <summary>
            Gets the data binding mode. For a collection of TableVectorGroup object
            this property returns:
            <list type="bullet"><item><b>None</b> no groups are data bound.</item><item><b>Unsupported</b> at least one group is data bound to an unsupported data source.</item><item><b>List</b> at least one group is data bound, and all data bound groups are bound to supported data sources.</item></list></summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroup">
      <summary>
            Represents the cells group defined by the user.
            Each cell group is defined by the collection of rectangles.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Owner">
      <summary>
            Gets the UserCellGroupCollection object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Table">
      <summary>
            Gets the RenderTable object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Style">
      <summary>
            Gets the style of group of cells.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Ranges">
      <summary>
            Gets the array of rectangles defining the cells in group.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroupCollection">
      <summary>
            Represents the collection of UserCellGroup objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.GetRightBottomBounds">
      <summary>
            Gets the bounds of area of user groups.
            </summary>
      <returns>Size structure, field Width contains number of right-most column +1, field Height contains number of bottom-most row + 1.</returns>
    </member>
    <member name="P:C1.C1Preview.UserCellGroupCollection.Owner">
      <summary>
            Gets the RenderTable object containing this object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StretchTableEnum">
      <summary>
            Defines the modes of stretching the columns of table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.None">
      <summary>
            Columns or rows of table do no stretch.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllVectors">
      <summary>
            All columns or rows of table are stretched to fill the whole page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllColumns">
      <summary>
            All columns of table are stretched to fill the whole page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastVectorOnPage">
      <summary>
            Only last column or row on each page is stretched to fill the whole page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastColumnOnPage">
      <summary>
            Only last column on each page is stretched to fill the whole page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTable">
      <summary>
            Represents a table.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
      <param name="assignChildren">Indicates that the list of children should be copied.</param>
      <param name="assignElements">Indicates that the Rows, Cols, Cells, RowGroups, ColGroups, UserCellGroups properties should be copied.</param>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
      <param name="assignChildren">Indicates that the list of children should be copied.</param>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowSizingMode">
      <summary>
            Gets or sets the value determining how the heights of table rows are
            calculated. Default is Auto.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColumnSizingMode">
      <summary>
            Gets or sets the value determining how the widths of table columns are
            calculated. Default is Fixed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Rows">
      <summary>
            Gets the collection of table's rows.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cols">
      <summary>
            Gets the collection of table's columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowGroups">
      <summary>
            Gets the TableVectorGroupCollection object representing the groups of rows.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColGroups">
      <summary>
            Gets the TableVectorGroupCollection object representing the groups of columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cells">
      <summary>
            Gets the collection of cells.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.UserCellGroups">
      <summary>
            Gets the collection of groups of cells defined by the user.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Stretch">
      <summary>
            Gets or sets the mode of stretching of table columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchColumns">
      <summary>
            Gets or sets the column stretching mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchRows">
      <summary>
            Gets or sets the row stretching mode.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageHeaderOnFirstPage">
      <summary>
            Gets or sets the value indicating whether the vertical
            page header should be printed on the first page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageHeaderOnFirstPage">
      <summary>
            Gets or sets the value indicating whether the horizontal
            page header should be printed on the first page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageFooterOnLastPage">
      <summary>
            Gets or sets the value indicating whether the vertical
            page footer should be printed on the first page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageFooterOnLastPage">
      <summary>
            Gets or sets the value indicating whether the horizontal
            page footer should be printed on the first page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesVert">
      <summary>
            Gets or sets the value indicating whether vertical gridlines should
            be drawn when cells are split.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesHorz">
      <summary>
            Gets or sets the value indicating whether horizontal gridlines should
            be drawn when cells are split.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TabPosition">
      <summary>
            Represents the tab in paragraph of text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Position">
      <summary>
            Gets or sets the position of text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Alignment">
      <summary>
            Gets or sets the alignment of text at this tab.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TabPosition.FillChar">
      <summary>
            Gets or sets the char used to fill the tab space.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TabPositionCollection">
      <summary>
            Collection of the TabPosition objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderText">
      <summary>
            Represents a piece of text rendered using a single style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderText.Text">
      <summary>
            Text to render.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ShapeProps">
      <summary>
            Describes the geometric properties of the shape,
            this is a base class.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderShapeBase">
      <summary>
            The abstract base class for classes representing shapes (lines, polygons and so on).
            </summary>
      <summary>
            Base class for ROs that renders shapes.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LinePropsBase">
      <summary>
            Base class for properties of the RenderLine and RenderPolygon objects.
            </summary>
      <summary>
            Base class for properties of the RenderLine and RenderPolygon objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLineBase">
      <summary>
            The abstract base class for lines and polygons.
            </summary>
      <summary>
            Represents the base class for all line-like shapes
            (RenderLine, RenderPolygon etc).
            </summary>
    </member>
    <member name="T:C1.C1Preview.LineProps">
      <summary>
            Represents the geometric properties of the RenderLine object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLine">
      <summary>
            Represents a line.
            </summary>
      <summary>
            Represents render object that renders a line.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PolygonProps">
      <summary>
            Represents the geometric properties of the RenderPolygon object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Points">
      <summary>
            Points defining a polyline.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Closed">
      <summary>
            Indicates whether a polyline is closed or opened.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderPolygon">
      <summary>
            Represents a closed or open polygon.
            </summary>
      <summary>
            Represents RO that renders polygon, if Closed is true then
            polygon will be filled.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleProps">
      <summary>
            The base class of properties of all rectangle-based shapes like
            rectangle, ellipse, arc, pie.
            </summary>
      <summary>
            The base class of properties of all rectangle-based shapes like
            rectangle, ellipse, arc, pie.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangle">
      <summary>
            Represents a rectangle.
            Also the base for <see cref="T:C1.C1Preview.RenderEllipse" /> and <see cref="T:C1.C1Preview.RenderRoundRectangle" /> classes.
            </summary>
      <summary>
            Represents RO that renders a rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEllipse">
      <summary>
            Represents an ellipse.
            </summary>
      <summary>
            Represents RO that renders ellipse.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EllipsePartProps">
      <summary>
            Represents the properties of shape which is a part of ellipse - arc or pie.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.StartAngle">
      <summary>
            Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. 
            </summary>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.SweepAngle">
      <summary>
            Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderPie">
      <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
      <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderArc">
      <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
      <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RoundRectangleProps">
      <summary>
            Represents properties of the RenderRoundRectanlge object.
            </summary>
      <summary>
            Represents properties of the RenderRoundRectanlge object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangle">
      <summary>
            Represents a rectangle with rounded corners.
            </summary>
      <summary>
            Represents RO that renders a rounded rectangle.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRichText">
      <summary>
            Represents an RTF text.
            </summary>
      <summary>
            Represents RO that renders RTF text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.HasRtf">
      <summary>
            Returns true if object has a RTF text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.Rtf">
      <summary>
            Rtf formatted text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.DetectUrls">
      <summary>
            Gets or sets a value indicating whether or not the RenderRichText 
            will automatically format a Uniform Resource Locator (URL) 
            when it is found into the assigned Rtf text.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphObject">
      <summary>
            Represents a part of a RenderParagraph object - text, hyperlink or inline image.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.#ctor">
      <summary>
            Initializes a new instance of the ParagraphObject class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns the properties of the current object from the specified ParagraphObject.
            </summary>
      <param name="source">The object to copy the properties from.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.Clone">
      <summary>
            Clones the current ParagraphObject.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Hyperlink">
      <summary>
            Gets or sets the hyperlink associated with this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Style">
      <summary>
            Gets the style associated with this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Owner">
      <summary>
            Gets the ParagraphObjectCollection representing the content of the paragraph
            containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.RenderParagraph">
      <summary>
            Gets the RenderParagraph containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Document">
      <summary>
            Gets the C1PrintDocument containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.IndexInOwner">
      <summary>
            Gets the index of this object in the ParagraphObjectCollection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.PositionInText">
      <summary>
            Gets the position of this ParagraphObject in the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.TextLength">
      <summary>
            Gets the length of this ParagraphObject in chars.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.FirstFragment">
      <summary>
            Gets the first fragment of RenderParagraph object where this ParagraphObject exists.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.LastFragment">
      <summary>
            Gets the last fragment of RenderParagraph object where this ParagraphObject exists.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphText">
      <summary>
            Represents a text which is a part of a RenderParagraph.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="style">The style to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="font">The font to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="textColor">The text color to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="textPosition">The text position to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="font">The font to use for this ParagraphText object.</param>
      <param name="textColor">The text color to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="font">The font to use for this ParagraphText object.</param>
      <param name="textPosition">The text position to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="textColor">The text color to use for this ParagraphText object.</param>
      <param name="textPosition">The text position to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
      <param name="text">The text of this ParagraphText object.</param>
      <param name="font">The font to use for this ParagraphText object.</param>
      <param name="textColor">The text color to use for this ParagraphText object.</param>
      <param name="textPosition">The text position to use for this ParagraphText object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns the properties of the current object from the specified ParagraphText object.
            </summary>
      <param name="source">The object to copy the properties from.</param>
    </member>
    <member name="P:C1.C1Preview.ParagraphText.Text">
      <summary>
            Gets or sets the text represented by this ParagraphText.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphImage">
      <summary>
            Represents an inline image which is a part of a RenderParagraph.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor">
      <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
      <param name="image">The image of this ParagraphImage object.</param>
      <param name="style">The style to use for this ParagraphImage object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
      <param name="image">The image of this ParagraphImage object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
      <param name="imageName">The dictionary name of the image of this ParagraphImage object.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>
            Assigns the properties of the current object from the specified ParagraphImage object.
            </summary>
      <param name="source">The object to copy the properties from.</param>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.Image">
      <summary>
            Gets or sets the image represented by this ParagraphImage object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.ImageName">
      <summary>
            Gets or sets the dictionary name of the image represented by this ParagraphImage object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphObjectCollection">
      <summary>
            Represents a collection of ParagraphObject objects,
            which comprise the content of a RenderParagraph objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Add(C1.C1Preview.ParagraphObject)">
      <summary>
            Adds ParagraphObject to this collection.
            </summary>
      <param name="po">The ParagraphObject to add.</param>
      <returns>The index of the newly added object in the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Remove(C1.C1Preview.ParagraphObject)">
      <summary>
            Removes the specified object from the collection.
            </summary>
      <param name="po">The object to remove.</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.Style)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="style">The style to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>
            Adds the specified text string to the current paragraph.
            </summary>
      <param name="text">The string to add.</param>
      <param name="font">The font to use to render the string.</param>
      <param name="textColor">The text color to use to render the string.</param>
      <param name="textPosition">The text position to use to render the string.</param>
      <returns>The ParagraphText object created to represent the specified text string.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String,C1.C1Preview.Style)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
      <param name="style">The style to use to render this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="target">The target of this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget,C1.C1Preview.Style)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="target">The target of this hyperlink.</param>
      <param name="style">The style to use to render this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.RenderObject)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="renderObject">The RenderObject which is the target of this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.ParagraphObject)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="text">The string representing the hyperlink.</param>
      <param name="paragraphObject">The ParagraphObject which is the target of this hyperlink.</param>
      <returns>The ParagraphText object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,System.String)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="image">The image representing the hyperlink.</param>
      <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
      <returns>The ParagraphImage object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.C1LinkTarget)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="image">The image representing the hyperlink.</param>
      <param name="target">The target of this hyperlink.</param>
      <param name="style">The style to use to render this hyperlink.</param>
      <returns>The ParagraphImage object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.RenderObject)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="image">The image representing the hyperlink.</param>
      <param name="renderObject">The RenderObject which is the target of this hyperlink.</param>
      <returns>The ParagraphImage object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.ParagraphObject)">
      <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
      <param name="image">The image representing the hyperlink.</param>
      <param name="paragraphObject">The ParagraphObject which is the target of this hyperlink.</param>
      <returns>The ParagraphImage object created to represent the hyperlink.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image)">
      <summary>
            Adds an inline image to the current paragraph.
            </summary>
      <param name="image">The image to add to the paragraph.</param>
      <returns>The ParagraphImage object created to represent the image.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.String)">
      <summary>
            Adds an inline image to the current paragraph.
            </summary>
      <param name="imageName">The dictionary name of the image to add to the paragraph.</param>
      <returns>The ParagraphImage object created to represent the image.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
            Adds an inline image to the current paragraph.
            </summary>
      <param name="image">The image to add to the paragraph.</param>
      <param name="style">The style to use to render the image.</param>
      <returns>The ParagraphImage object created to represent the image.</returns>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.RenderParagraph">
      <summary>
            Gets the RenderParagraph object containing this ParagraphObject.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.Item(System.Int32)">
      <summary>
            Indicates the ParagraphObject at the specified indexed location in the collection.
            </summary>
      <param name="index">The index of the ParagraphObject to retrieve from the collection.</param>
      <returns>The ParagraphObject located at the specified index location within the collection.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderInputText">
      <summary>
            Represents a textbox control.
            </summary>
      <summary>
            Input render object providing text input.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputBase">
      <summary>
            The abstract base class for all Preview Forms' input controls. 
            Derived types represent active UI elements embedded in the document
            when the document is shown by the preview.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetAutoSize(System.Int32@,System.Int32@)">
      <summary>
            Returns the preffered size of control in pixels.
            </summary>
      <param name="width">OUT: Width of control.</param>
      <param name="height">OUT: Height of control.</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsControlNeededParentForWmPrint">
      <summary>
            This method returns true if underlaying control of RenderInputBase
            object needs the parent to correctly process the WM_PRINT message.
            By default the RenderInputBase object returns true.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsResetSelectionNeeded">
      <summary>
            Returns true if selection within parent control
            should be reset when the underlying control receives 
            an input focus.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.CreateControl">
      <summary>
            Creates the underlying windows control object.
            </summary>
      <returns>Returns the created window control object.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ReadOnly">
      <summary>
            Gets or sets the value indicating whether the control is read-only. 
            For read-only controls, all input actions are still fired, but the control's 
            value cannot be changed. The default is false.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Printable">
      <summary>
            Gets or sets the value indicating whether the control is printed. 
            If true (default), the content of the control is printed normally. 
            Otherwise, it is not printed or exported. This might be used for example 
            to provide help for fields that are to be filled.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.StatusText">
      <summary>
            Gets or sets the text that appears in the status line of the preview when 
            the control has focus.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ToolTip">
      <summary>
            Gets or sets the tooltip associated with the control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Cursor">
      <summary>
            Gets or sets the cursor used when the mouse is over the control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.InputActions">
      <summary>
            Gets the collection of supported user actions and handlers associated with those actions.
            See help on InputActions class for details.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.PasswordChar">
      <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is '\0' (no hiding takes place).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.AcceptsReturn">
      <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputRadioButton">
      <summary>
            Represents a radio button.
            </summary>
      <summary>
            Input render object providing a radio button.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputButtonBase">
      <summary>
            The abstract base class for button-like input controls (button, check box, radio button).
            </summary>
      <summary>
            The abstract base class for the input info classes for all button-like controls 
            (RenderInputButton, RenderInputCheckBox, etc.)
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.Text">
      <summary>
            Gets or sets the text of the button.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.TextAlign">
      <summary>
            Gets or sets the alignment of the button text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.Checked">
      <summary>
            Gets or sets the value indicating whether the check box is checked. 
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.CheckAlign">
      <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.GroupIndex">
      <summary>
            Gets or sets the group index for the radiobutton. 
            Only one button in a group can be checked at any time.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItem">
      <summary>
            Represents the separate item in the combobox collection.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.AssignFrom(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
            Copies the content of another RenderInputComboBoxItem object into the current object.
            </summary>
      <param name="source">The source object, whose properties are to be copied into this object.</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.Text">
      <summary>
            Gets or sets a text that will be displayed in the dropdown list.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.UserData">
      <summary>
            Gets or sets a user's data.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItemCollection">
      <summary>
            Represents the collection of RenderInputComboBoxItem objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBox">
      <summary>
            Represents a combo box (text input control with a dropdown list).
            </summary>
      <summary>
            Input render object providing text input with dropdown list.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.PasswordChar">
      <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is '\0' (no hiding takes place).
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.DropDownStyle">
      <summary>
            Gets or sets a value specifying the style of the combo box.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Items">
      <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.AcceptsReturn">
      <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
    </member>
    <member name="T:C1.C1Preview.CheckMarkStyleEnum">
      <summary>
            Describes the type of mark which is used in the ScalableCheckBox
            and RenderInputCheckBoxOptions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Default">
      <summary>
            The default style, as in Windows.
            </summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Cross">
      <summary>
            Cross, as in MS Word.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputCheckBox">
      <summary>
            Represents a checkbox.
            </summary>
      <summary>
            Input render object providing a checkbox.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.Checked">
      <summary>
            Gets or sets the value indicating whether the check box is checked. 
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckMarkStyle">
      <summary>
            Gets or sets the visual style of the check mark used by the control.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckAlign">
      <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputButton">
      <summary>
            Represents a push button.
            </summary>
      <summary>
            Input render object providing a push button.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputButton.AcceptButton">
      <summary>
            Gets or sets the value indicating whether the button is an "Accept button" and its
            action will be executed when the user presses ENTER in the C1PrintPreview control
            showing the document containing this button.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentActionEnum">
      <summary>
            Defines the actions which can be used in
            ActionHandlerPreviewAction object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.None">
      <summary>
            No associated action.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.FileOpen">
      <summary>
            Open a C1PrintDocument file (.c1d).
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.FileSave">
      <summary>
            Save the current document as a C1PrintDocument file (.c1d).
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.PageSetup">
      <summary>
            Change the current page setup.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.Print">
      <summary>
            Print the current document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.Reflow">
      <summary>
            Reflow the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.PageSingle">
      <summary>
            View one page at a time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.PageContinuous">
      <summary>
            View continuous pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.PageFacing">
      <summary>
            View facing pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.PageFacingContinuous">
      <summary>
            View continuous facing pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.GoFirst">
      <summary>
            Go to the first document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.GoPrev">
      <summary>
            Go to the previous document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.GoNext">
      <summary>
            Go to the next document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.GoLast">
      <summary>
            Go to the last document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.HistoryNext">
      <summary>
            Go to the next position in the history.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentActionEnum.HistoryPrev">
      <summary>
            Go to the previous position in the history.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UserActionEnum">
      <summary>
            Identifies a single end-user input action which can be handled by a 
            C1Preview form control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Click">
      <summary>
            The control is clicked.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseUp">
      <summary>
            The mouse pointer is over the control and a mouse button is released.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseDown">
      <summary>
            The mouse pointer is over the control and a mouse button is pressed.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseEnter">
      <summary>
            The mouse pointer enters the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseLeave">
      <summary>
            The mouse pointer leaves the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Enter">
      <summary>
            The input focus enters the control.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Leave">
      <summary>
            The input focus leaves the control.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionTabEnum">
      <summary>
            Describes the actions to be performed when the TAB key is pressed 
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPage">
      <summary>
            Focus moves to the next control on the page,
            but does not leave the preview nor goes to another page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDoc">
      <summary>
            Focus moves to the next control in the document (including across pages).
            Focus does not leave the preview.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageCycle">
      <summary>
            Focus moves to the next control on the page.
            When the last control is reached focus goes to the first control on the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocCycle">
      <summary>
            Focus moves to the next control in the document.
            When the last control is reached focus goes to the first control in the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageOut">
      <summary>
            Focus moves to the next control on the page.
            When the last control is reached focus goes to the next
            control on the form containing the preview.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocOut">
      <summary>
            Focus moves to the next control in the document.
            When the last control is reached focus goes to the next
            control on the form containing the preview.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionEnterEnum">
      <summary>
            Describes the actions to be performed when the ENTER key is pressed
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.None">
      <summary>
            No action is taken.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.LikeTab">
      <summary>
            The same action as that of the TAB key is taken.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.InvokeAcceptButton">
      <summary>
            The Accept button is invoked.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerBase">
      <summary>
            Describes an action that can be performed in response to a user action in a
            C1Preview form. This is an abstract base class for the specific action 
            handlers.
            </summary>
      <summary>
            Describes an action that can be performed in response to a user action in a
            C1Preview form. This is an abstract base class for the specific action 
            handlers.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerLink">
      <summary>
            Describes an action handler that executes a hyperlink jump.
            </summary>
      <remarks>
        <para>All link types which are supported by the C1Preview hyperlinks are
            also supported by this action handler:</para>
        <list type="bullet">
          <item>
            <description>Jump to an anchor in the existing document.</description>
          </item>
          <item>
            <description>Jump to an anchor in another document.</description>
          </item>
          <item>
            <description>Open an external program or file.</description>
          </item>
          <item>
            <description>Jump to another page of the same document.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerLink.LinkTarget">
      <summary>
            Gets or sets the link target. See C1LinkTarget for details.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFile">
      <summary>
            The base class for action handlers performing an file operation:
            save, open etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerFile.FileName">
      <summary>
            The name of file used in operation
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileSave">
      <summary>
            Describes the action handler that performs the saving of the
            document to file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileOpen">
      <summary>
            Describes the action handler that performs the loading of the
            document from file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageSetup">
      <summary>
            Describes the action handler that displays the page setup
            dialog to change the page properties of document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPrint">
      <summary>
            Describes the action handler that prints the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPrint.PrinterName">
      <summary>
            The name of printer, if empty the dialog will be displayed
            to select a printer.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerReflow">
      <summary>
            Describes the action handler that reflows the document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageView">
      <summary>
            Describes the action handler that changes the view of document
            in the preview window.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryPrev">
      <summary>
            Describes the action handler that goes to previous history entry.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryNext">
      <summary>
            Describes the action handler that goes to next history entry.
            </summary>
    </member>
    <member name="T:C1.C1Preview.InputAction">
      <summary>
            Describes a single input action, and any handling associated with it.
            </summary>
    </member>
    <member name="M:C1.C1Preview.InputAction.AssignFrom(C1.C1Preview.InputAction)">
      <summary>
            Copies the content of another InputAction object into the current object.
            </summary>
      <param name="source">The source object, whose properties are to be copied into this object.</param>
    </member>
    <member name="P:C1.C1Preview.InputAction.UserAction">
      <summary>
            Gets or sets the user action associated with this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.InputAction.ActionHandler">
      <summary>
            Gets or sets the object describing the handling associated with the action.
            </summary>
    </member>
    <member name="T:C1.C1Preview.InputActionCollection">
      <summary>
            Represents the collection of InputAction objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderImage">
      <summary>
            Represents an image.
            </summary>
      <summary>
            Represents RO that renders images.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Image">
      <summary>
            Defines an image to render.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.ImageName">
      <summary>
            Gets or sets the name of image in document's dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Control">
      <summary>
            Control to render.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderGraphics">
      <summary>
            Represents a drawing on the .NET Graphics object.
            </summary>
      <summary>
            Represents RO that render images.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.Clear">
      <summary>
            Clears the current graphics.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.EmfType">
      <summary>
            Gets or sets the type of metafile created by this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.Graphics">
      <summary>
            Graphics object to draw on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.ReferenceGraphics">
      <summary>
            Gets the reference graphics used to create an underlying metafiles.
            This property is shortcut to the Document.CreationGraphics property
            and can return null if this RenderGraphics object is not connected to the
            document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image into a stream.
            This method saves metafiles as metafiles (the standard Metafile.Save method always saves a PNG).
            </summary>
      <param name="image">The image to save.</param>
      <param name="imageFormat">Format in which to save the image (ignored if the image is a metafile).</param>
      <returns>Returns the MemoryStream object containing image data or null if error occurs during saving.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
            Saves image into a stream.
            This method can save metafiles as metafiles (the standard Metafile.Save method always saves a PNG).
            </summary>
      <param name="image">The image to save.</param>
      <param name="imageFormat">Format in which to save the image (ignored if the image is a metafile
            and the keepAsMetafile parameter is true).</param>
      <param name="keepAsMetafile">If true, metafiles are saved as metafiles.</param>
      <returns>Returns the MemoryStream object containing image data, or null if error occurs during saving.</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsColorEmpty(System.Drawing.Color)">
      <summary>
            Returns true if specified color is Empty (Color.Empty) or Transparent (Color.Transparent).
            </summary>
      <param name="color">Color structure to test.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetScreenDpi(System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Returns the logical and physical screen's resolution.
            </summary>
      <param name="logicalDpiX">Contains a logical horizontal resolution on exit.</param>
      <param name="logicalDpiY">Contains a logical vertical resolution on exit.</param>
      <param name="physicalDpiX">Contains a physical horizontal resolution on exit.</param>
      <param name="physicalDpiY">Contains a physical vertical resolution on exit.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiX(System.IntPtr)">
      <summary>
            Returns the horizontal resolution of specified device context.
            </summary>
      <param name="dc">Handle of device context.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiY(System.IntPtr)">
      <summary>
            Returns the vertical resolution of specified device context.
            </summary>
      <param name="dc">Handle of device context.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileInfo(System.Drawing.Imaging.Metafile,C1.C1Preview.MetafileInfo@)">
      <summary>
            Gets the information about metafile.
            </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,C1.C1Preview.IImageAlign,C1.C1Preview.IMetafilePainter,System.Boolean)">
      <summary>
            Draws the specified Image object.
            </summary>
      <param name="graphics">Graphics object.</param>
      <param name="image">Image to draw.</param>
      <param name="alignRect">Alignment rectangle.</param>
      <param name="align">Alignment of image, if null then ImageAlign.Default will be used.</param>
      <param name="metafilePainter">Used if image is a metafile, can be null.</param>
      <param name="clip">Indicates that the alignRect must be used as clipping rectangle, otherwise clipping not will be defined.</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.ConvertToEmf(System.Drawing.Imaging.Metafile,System.Drawing.Graphics)">
      <summary>
            Converts the metafile from EmfPlusOnly or EmfPlusDual to EmfOnly
            </summary>
      <param name="metafile">Metafile to convert</param>
      <param name="referenceGraphics">Graphics object used in converting, can be null in this case the screen dc is used.</param>
      <returns>Returns the converted EmfOnly metafile.</returns>
    </member>
    <member name="T:C1.C1Preview.ReferenceEnum">
      <summary>
            Describes the types of references between objects.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Parent">
      <summary>
            Reference to the parent object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Next">
      <summary>
            Reference to the next object on the same level.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Prev">
      <summary>
            Reference to the previous object on the same level.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Self">
      <summary>
            Reference to the current object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Name">
      <summary>
            Reference to the object by its name.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Page">
      <summary>
            Reference to the page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Column">
      <summary>
            Reference to the column on page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Id">
      <summary>
            Reference to the object by its Id.
            This type of refernce used only for backward compatibility.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.PageIndex">
      <summary>
            Reference to the page by index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DimensionEnum">
      <summary>
            Describes the possible dimensions of object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Default">
      <summary>
            The default dimension.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Left">
      <summary>
            The left side of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Top">
      <summary>
            The top side of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Right">
      <summary>
            The right side of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Bottom">
      <summary>
            The bottom side of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Width">
      <summary>
            The width of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Height">
      <summary>
            The height of an object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnitTypeEnum">
      <summary>
            Specifies the unit of measure for the given data.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Document">
      <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Inch">
      <summary>
            Specifies the inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Mm">
      <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pica">
      <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pixel">
      <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Point">
      <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Twip">
      <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.InHs">
      <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Display">
      <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Cm">
      <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Em">
      <summary>
            Measurement is relative to the height of the element's font. 
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Ex">
      <summary>
            Measurement is relative to the height of the lowercase letter x of the element's font.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.LineSpacing">
      <summary>
            Measurement is relative to the spacing between two lines of element's font.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthAuto">
      <summary>
            Represents the "auto" size or coordinate, only one instance of this class can be created.
            Use property LengthBase.Auto to access to this instance.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthAbs">
      <summary>
            Represents the dimension like: "5mm", "10in", "20", and so on.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.Compare(C1.C1Preview.LengthAbs,C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
      <summary>
            Compares the current LengthAbs object with another LengthAbs object.
            </summary>
      <param name="other">The other LengthAbs object to compare the current one with.</param>
      <returns>0 if lengths are equal,
            -1 if this length is less than the other,
            1 if this length is greater than the other,
            -2 if the length units cannot be compared.</returns>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Units">
      <summary>
            Gets the unit of measure of value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.Empty">
      <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(0, UnitTypeEnum.Mm)) representing an empty dimension.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.LineWidth">
      <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(1f, UnitTypeEnum.Point))
            representing an default width of line (border, grid etc).
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth">
      <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(2f, UnitTypeEnum.Point))
            representing an default width of bold line (border, grid etc).
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef">
      <summary>
            Represents the unit which references to dimension of another object like: 
            "MyObject.Right", "Parent.Width", "Prev.Width" or MyObject.MySubObject.Width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Elements">
      <summary>
            Array of references used in the LengthRef, for example dimension "parent.MyChild.width"
            will be represented by two UnitRefElem objects for "parent" and "MyChild".
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Dimension">
      <summary>
            Dimension of referenced object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef.UnitRefElem">
      <summary>
            Describes one object in reference.
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.Source">
      <summary>
            Specifies the referenced object (page, column, other object).
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceName">
      <summary>
            Specifies the name of object if Source = RefSource.Name
            </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceNo">
      <summary>
            Specifies the number, used if Source = RefSource.Page or RefSource.Column
            </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef.Predefined">
      <summary>
            Holds some predefined LengthRef objects.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentLeft">
      <summary>
            Represents "Parent.Left" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentTop">
      <summary>
            Represents "Parent.Top" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentWidth">
      <summary>
            Represents "Parent.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentHeight">
      <summary>
            Represents "Parent.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevRight">
      <summary>
            Represents "Prev.Right" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevBottom">
      <summary>
            Represents "Prev.Bottom" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevHeight">
      <summary>
            Represents "Prev.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.NextHeight">
      <summary>
            Represents "Next.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Parent">
      <summary>
            Represents "Parent.Default" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Self">
      <summary>
            Represents "Self.Default" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentRight">
      <summary>
            Represents "Parent.Right" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentBottom">
      <summary>
            Represents "Parent.Bottom" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfWidth">
      <summary>
            Represents "Self.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfHeight">
      <summary>
            Represents "Self.Height" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageWidth">
      <summary>
            Represents the "Page.Width" reference.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageHeight">
      <summary>
            Represents the "Page.Height" reference.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Unit">
      <summary>
            Auxiliary class, provides access to LengthBase object as string,
            number or directly LengthBase object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAuto">
      <summary>
            Gets the value indicating whether this Unit is specified as "auto".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAbs">
      <summary>
            Gets the value indicating whether this Unit defines
            an absolute value such as "1mm", "1em" etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentWidth">
      <summary>
            Gets the value indicating whether this Unit is specified as "parent.width".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentHeight">
      <summary>
            Gets the value indicating whether this Unit is specified as "parent.height".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParent">
      <summary>
            Gets the value indicating whether this Unit is specified as "parent".
            </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.AsUnit">
      <summary>
            Gets the LengthBase object representing this unit.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnitPoint">
      <summary>
            Defines a point represented by two Unit structures.
            </summary>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.Parse(System.String,C1.C1Preview.UnitPoint@,System.Boolean)">
      <summary>
            Converts a string to the UnitPoint structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">The UnitPoint structure.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to UnitPoint.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.X">
      <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Y">
      <summary>
            Gets or sets the y-coordinate of this Point.
            </summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Empty">
      <summary>
            Represents a null Point.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitBehaviorEnum">
      <summary>
            Defines the splitting behavior of a render object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.Never">
      <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page).
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded">
      <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge">
      <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitNewPage">
      <summary>
            If the object does not fit on the current page (column),
            a new page (column) is started; if the object does not fit
            on that page (column), it is split as needed after that.
            </summary>
    </member>
    <member name="T:C1.C1Preview.BreakEnum">
      <summary>
            Defines the various breaks which can be forced before or after render object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.None">
      <summary>
            No break.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Page">
      <summary>
            New page should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Column">
      <summary>
            New column should be started.
            </summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Line">
      <summary>
            New line on inline flow should be started.
            </summary>
    </member>
    <member name="T:C1.C1Preview.VisibilityEnum">
      <summary>
            Specifies the visibility of an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Visible">
      <summary>
            Object is visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Hidden">
      <summary>
            Object is not visible, but takes up space and affects the layout of other objects as if it were visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Collapse">
      <summary>
            Object is not visible, its size is zero and it does not affect the layout of other objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObjectCollection">
      <summary>
            Represents the collection of RenderObject objects.
            </summary>
      <summary>
            Represents the collection of RenderObject objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByAnchorName(System.String,C1.C1Preview.C1Anchor@)">
      <summary>
            Searches the render object by name of anchor which it contains.
            </summary>
      <param name="anchorName">The name of anchor to search.</param>
      <param name="anchor">OUT: contains the C1Anchor object with searched name.</param>
      <returns>Returns the found render object or null if not found.</returns>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.String)">
      <summary>
            Returns the RenderObject object by its name.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.Int32)">
      <summary>
            Returns the RenderObject object by its index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChange">
      <summary>
            Describes the changing of the page numbering: to absolute number or increment from current value.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.Parse(System.String,System.Boolean)">
      <summary>
            Converts a string to the PageNumberingChange object.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to PageNumberingChange.</param>
      <returns>The PageNumberingChange object or null if string is invalid and throwException is false.</returns>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Mode">
      <summary>
            Gets or sets value describing how the page number will be changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Value">
      <summary>
            Gets or sets the value used to change current page number,
            using of value depends on Mode property: set for Set, added for Increment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StackingRulesEnum">
      <summary>
            Defines the stacking rules: block flow or inline flow, LeftToRight or TopToBottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom">
      <summary>
            Objects are placed one beneath the other within the container.
            When the bottom edge of the current page is reached, a new page is added.
            This is the default.
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight">
      <summary>
            Objects are placed one next to another, from left to right.
            When the right edge of the current page is reached, a new horizontal page is added
            (a horizontal page logically extends the preceding page to the right;
            C1PreviewPane respects this location by default, showing such pages in a row).
            </summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.InlineLeftToRight">
      <summary>
            Objects are placed inline, one next to another, from left to right.
            When the right edge of the current page is reached, the sequence wraps to the next line.
            A new page is added when the bottom of the current page is reached.
            </summary>
    </member>
    <member name="T:C1.C1Preview.MeasurementDeviceEnum">
      <summary>
            Defines the device (printer or screen) used to measure document elements.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Printer">
      <summary>
            Use printer device to measure document elements.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Screen">
      <summary>
            Use system screen device to measure document elements.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Unknown">
      <summary>
            Document was not generated, so its creation mode is unknown.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Generate">
      <summary>
            Document was created with using Generate() method.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.StartEndDoc">
      <summary>
            Document was created with using StartDoc() / EndDoc() methods.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChangeModeEnum">
      <summary>
            Describes the type of changing of the page numbering.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Set">
      <summary>
            Set page number to absolute value.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Increment">
      <summary>
            Change the page number on specified value.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentBody">
      <summary>
            Represents the body of document, manages the generating of the document.
            </summary>
      <summary>
            Represents the body of document, manages the generating of the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Document">
      <summary>
            Returns the C1Preview object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Stacking">
      <summary>
            Stacking rules.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryItem">
      <summary>
            Base class for all dictionary items.
            </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItem.Name">
      <summary>
            Unique name of item.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Dictionary">
      <summary>
            Represents the C1PrintDocument dictionary,
            can be used to holding the Images, Icons, etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.String)">
      <summary>
            Returns the DictionaryItem object by its name.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.Int32)">
      <summary>
            Returns the DictionaryItem object by its index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryImage">
      <summary>
            Represents an image in dictionary.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryIcon">
      <summary>
            Represents an icon in dictionary.
            </summary>
    </member>
    <member name="T:C1.C1Preview.UnicodeRangeEnum">
      <summary>
            Defines the available unicode ranges.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.AlphabeticPresentationForms">
      <summary>
            Alphabetic Presentation Forms.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsA">
      <summary>
            Arabic Presentation Forms A.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsB">
      <summary>
            Arabic Presentation Forms B.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Armenian">
      <summary>
            Armenian.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Arrows">
      <summary>
            Arrows.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicArabic">
      <summary>
            Arabic.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicGeorgian">
      <summary>
            Georgian.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicGreek">
      <summary>
            Greek.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicHebrew">
      <summary>
            Hebrew.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicLatin">
      <summary>
            Basic Latin.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bengali">
      <summary>
            Bengali.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BlockElements">
      <summary>
            Block Elements.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bopomofo">
      <summary>
            Bopomofo, Chinese.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BoxDrawing">
      <summary>
            Box Drawing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Braille">
      <summary>
            Braille.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CanadianAboriginalSyllabics">
      <summary>
            Canadian Aboriginal Syllabics, Unified.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cherokee">
      <summary>
            Cherokee.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ChineseJapaneseAndKoreanSymbolsAndPunctuation">
      <summary>
            Chinese, Japanese, and Korean Symbols and Punctuation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibility">
      <summary>
            CJK Compatibility.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityForms">
      <summary>
            CJK Compatibility Forms.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityIdeographs">
      <summary>
            CJK Compatibility Ideographs.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKMiscellaneous">
      <summary>
            Miscellaneous CJK.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKRadicalsSupplement">
      <summary>
            CJK Radicals Supplement.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographExtensionA">
      <summary>
            CJK Unified Ideographs Extension A.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographs">
      <summary>
            CJK Unified Ideographs.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarks">
      <summary>
            Combining Diacritical Marks.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksForSymbols">
      <summary>
            Combining Diacritical Marks for Symbols.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningHalfMarks">
      <summary>
            Combining Half Marks.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ControlPictures">
      <summary>
            Control Pictures.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CurrencySymbols">
      <summary>
            Currency Symbols.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cyrillic">
      <summary>
            Cyrillic.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Devanagari">
      <summary>
            Devanagari.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Dingbats">
      <summary>
            Dingbats.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedAlphanumerics">
      <summary>
            Enclosed Alphanumerics.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedCJKLettersAndMonths">
      <summary>
            Enclosed CJK Letters and Months.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ethiopic">
      <summary>
            Ethiopic.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ExtendedBopomofo">
      <summary>
            Chinese Bopomofo, Extended.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeneralPunctuation">
      <summary>
            General Punctuation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeometricShapes">
      <summary>
            Geometric Shapes.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekExtended">
      <summary>
            Greek, Extended.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gujarati">
      <summary>
            Gujarati.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gurmukhi">
      <summary>
            Gurmukhi.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HalfwidthAndFullwidthForms">
      <summary>
            Halfwidth and Fullwidth Forms.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hangul">
      <summary>
            Hangul, Korean.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulCompatibilityJamo">
      <summary>
            Hangul Compatibility Jamo, Korean.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamo">
      <summary>
            Hangul Jamo, Korean.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hiragana">
      <summary>
            Hiragana, Japanese.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IdeographicDescription">
      <summary>
            Ideographic Description Characters.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IPAExtensions">
      <summary>
            IPA Extensions.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KangxiRadicals">
      <summary>
            KangxiRadicals.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Kannada">
      <summary>
            Kannada.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Katakana">
      <summary>
            Katakana, Japanese.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Khmer">
      <summary>
            Khmer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lao">
      <summary>
            Lao.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Latin1Supplement">
      <summary>
            Latin-1 Supplement.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedA">
      <summary>
            Latin Extended-A.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedAdditional">
      <summary>
            Latin Extended Additional.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedB">
      <summary>
            Latin Extended-B.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LetterLikeSymbols">
      <summary>
            Letterlike Symbols.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Malayalam">
      <summary>
            Malayalam.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MathematicalOperators">
      <summary>
            Mathematical Operators.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbols">
      <summary>
            Miscellaneous Symbols.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousTechnical">
      <summary>
            Miscellaneous Technical.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Mongolian">
      <summary>
            Mongolian.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Myanmar">
      <summary>
            Myanmar.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NumberForms">
      <summary>
            Number Forms.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ogham">
      <summary>
            Ogham.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.OpticalCharacterRecognition">
      <summary>
            Optical Character Recognition (OCR).
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Oriya">
      <summary>
            Oriya.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PrivateUseArea">
      <summary>
            Private Use Area.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Runic">
      <summary>
            Runic.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Sinhala">
      <summary>
            Sinhala.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SmallFormVariants">
      <summary>
            Small Form Variants.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SpacingModifierLetters">
      <summary>
            Spacing Modifier Letters.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Specials">
      <summary>
            Specials.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SubscriptsAndSuperscripts">
      <summary>
            Superscripts and Subscripts.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Surrogates">
      <summary>
            Surrogates Area.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Syriac">
      <summary>
            Syriac.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tamil">
      <summary>
            Tamil.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Telugu">
      <summary>
            Telugu.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thaana">
      <summary>
            Thaana.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thai">
      <summary>
            Thai.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tibetan">
      <summary>
            Tibetan.
            </summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Yi">
      <summary>
            Yi.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EmbeddedFont">
      <summary>
            Represents the font embedded in the C1PrintDocument.
            </summary>
      <summary>
            Represents the font embedded in the C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.GetFontFamily">
      <summary>
            Get the FontFamily object for this embedded object.
            </summary>
      <returns>Returns the created FontFamily object.</returns>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.FontName">
      <summary>
            Name of embedded font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Initialized">
      <summary>
            Indicates that this object has produced the FontFamily object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EmbeddedFontCollection">
      <summary>
            Collection of EmbeddedFont objects.
            </summary>
      <summary>
            Collection of EmbeddedFont objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(C1.C1Preview.EmbeddedFont)">
      <summary>
            Adds the specified font to the collection.
            Throws an exception if the font is already present in the collection.
            </summary>
      <param name="embeddedFont">The <see cref="T:C1.C1Preview.EmbeddedFont" /> to add.</param>
      <returns>The index of the newly added font in the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(System.Drawing.Font)">
      <summary>
            Builds an <see cref="T:C1.C1Preview.EmbeddedFont" /> based on the specified font, and adds it to the collection.
            Throws an exception if the font is already present in the collection.
            </summary>
      <param name="font">The font to add.</param>
      <returns>The index of the newly added font in the collection.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Remove(C1.C1Preview.EmbeddedFont)">
      <summary>
            Removes the specified font from the collection.
            </summary>
      <param name="embeddedFont">The font to remove.</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.IndexOf(C1.C1Preview.EmbeddedFont)">
      <summary>
            Returns the index of the specified font in the collection.
            </summary>
      <param name="embeddedFont">The font to search for.</param>
      <returns>The index of the specified font, or -1.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.String,System.Byte,System.Boolean,System.Boolean)">
      <summary>
            Searches for the font with the specified name that exactly matches the bold/italic styles.
            </summary>
      <param name="name">The name of the font to search for.</param>
      <param name="bold">The bold style to search for.</param>
      <param name="italic">The italic style to search for.</param>
      <returns>The matching font, or null if a match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindBestMatch(System.String,System.Int32,System.Drawing.FontStyle)">
      <summary>
            Searches for the font with the specified name that best matches the bold/italic styles.
            </summary>
      <param name="fontName">The name of the font to search for.</param>
      <param name="fontStyle">The style of the font to match.</param>
      <returns>The matching font, or null if a match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.Collections.ICollection,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Searches for the font with the specified name that exactly matches the bold/italic styles.
            </summary>
      <param name="coll">The fonts collection to search.</param>
      <param name="name">The name of the font to search for.</param>
      <param name="charSet">The charset of the font,  if int.MinValue is specified then any charset can be used.</param>
      <param name="bold">The bold style to search for.</param>
      <param name="italic">The italic style to search for.</param>
      <returns>The matching font, or null if a match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindBestMatch(System.Collections.ICollection,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Searches for the font with the specified name that best matches the bold/italic styles.
            Note that exact matching of bold/italic styles is not guaranteed.
            </summary>
      <param name="coll">The fonts collection to search.</param>
      <param name="name">The name of the font to search for.</param>
      <param name="charSet">The charset of font, if int.MinValue is specified then any charset can be used.</param>
      <param name="bold">The bold style to search for.</param>
      <param name="italic">The italic style to search for.</param>
      <returns>The matching font, or null if a match was not found.</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.BuildFont(System.String,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>
            Builds the Font object from string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExportProvider">
      <summary>
            The RTF export provider working over list of pages, each page
            is represented as metafile.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PagesExportProvider">
      <summary>
            Base class for all export provides working over list of pages, each page
            is represented as metafile.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfSecurity">
      <summary>
            Represents the security properties of PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.UserPassword">
      <summary>
            Gets or sets the password required to open the pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.OwnerPassword">
      <summary>
            Gets or sets the password required to change permissions for the pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowPrint">
      <summary>
            Gets or sets whether the user can print the pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowCopyContent">
      <summary>
            Gets or sets whether the user can copy contents from the pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditContent">
      <summary>
            Gets or sets whether the user can edit the contents of the pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditAnnotations">
      <summary>
            Gets or sets whether the user can edit annotations in the pdf document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageLayoutEnum">
      <summary>
            Specifies the page layout to be used when the PDF document is opened.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.ViewerDefault">
      <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageModeEnum">
      <summary>
            Specifies how the PDF document should be displayed when opened.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.Automatic">
      <summary>
            Document outline visible if available.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.FullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfViewerPreferences">
      <summary>
            Represents viewer preferences to be used when displaying the PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageMode">
      <summary>
            Gets or sets how the document should be displayed when opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageLayout">
      <summary>
            Gets or sets the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideToolBar">
      <summary>
            Gets or sets whether to hide the viewer tool bars when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideMenuBar">
      <summary>
            Gets or sets whether to hide the viewer menu bar when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.FitWindow">
      <summary>
            Gets or sets whether to resize the document's window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.CenterWindow">
      <summary>
            Gets or sets whether to position the document's window in the center of the screen.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExporter">
      <summary>
            The PDF exporter.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PagesExporter">
      <summary>
            Base class for all exporters working over list of pages.
            Derived classes must override ProcessPage method.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.UseCompression">
      <summary>
            Gets or sets the value indicating whether the compression must be used when saving the document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.FormFields">
      <summary>
            Gets or sets the value indicating whether to export input fields as
            Acrobat Form fields. The default is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.Security">
      <summary>
            Gets the PdfSecurity object describing the security properties of the generated PDF document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ViewerPreferences">
      <summary>
            Gets the PdfViewerPreferences object describing the viewer preferences to be used
            when the generated PDF document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.PdfViewerPreferencesFormClass">
      <summary>
            Gets or sets the type of form which will be used to edit the fields of PdfViewerPreferences class,
            this form is called from options form.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExportProvider">
      <summary>
            The Excel export provider.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsxExportProvider">
      <summary>
            The Excel export provider to the Office12 format.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsxExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExporter">
      <summary>
            The Excel exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.FontScaling">
      <summary>
            Gets or sets the amount (in points) by which to change font sizes
            (may be used to better fit texts into available space).
            </summary>
      <value>The amount (in points) by which to change font sizes.</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.PagePerSheet">
      <summary>
            Gets or sets the value indicating whether to export each page
            of the document into a separate sheet.
            </summary>
      <value>
        <b>true</b> if one page per Excel sheet, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.BookContent">
      <summary>
            Gets or sets the value indicating Excel book content.
            </summary>
      <value>The Excel book content.</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DetectDataType">
      <summary>
            Gets or sets the value indicating whether the export module should
            try to auto detect the type of data (numeric, date) in the cells.
            </summary>
      <value>
        <b>true</b> if detect data type of the Excel cell, otherwise <b>false</b>.</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.Tolerance">
      <summary>
            Gets or sets the tolerance (in points) when auto-detecting the
            boundaries of rows and columns in the document. The smaller this
            amount, the greater the number of narrow rows and columns created
            for precise positioning of data.
            </summary>
      <value>The tolerance value.</value>
    </member>
    <member name="T:C1.C1Preview.C1Anchor">
      <summary>
            Represents the anchor within document, this anchor can be associated with
            any RenderObject.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Name">
      <summary>
            Gets the name of the anchor (must be unique within the document).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Description">
      <summary>
            Gets the description of the anchor.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.UserData">
      <summary>
            Gets the custom user's data associated with the anchor.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorText">
      <summary>
            Represents the anchor within text object:
            RenderText, RenderParagraph, RenderRichText.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorText.Position">
      <summary>
            Gets the position of anchor withint text, zero based.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorCollection">
      <summary>
            Collection of C1Anchor objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkStateEnum">
      <summary>
            Represents the state of hyperlink.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Normal">
      <summary>
            An unvisited hyperlink.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Visited">
      <summary>
            A hyperlink that has been visited.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Hover">
      <summary>
            A hyperlink under the mouse pointer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Active">
      <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1Hyperlink">
      <summary>
            Represents the hyperlink in document, can be associated with
            RenderObject or ParagraphObject.
            </summary>
      <summary>
            Represents the hyperlink in document, can be associated with
            RenderObject or ParagraphObject.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.StatusText">
      <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is previewed by C1PrintPreview).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.LinkTarget">
      <summary>Determines the target of the hyperlink.</summary>
      <remarks>
        <para>The hyperlink target is described by an instance of a class derived from <see cref="T:C1.C1Preview.C1LinkTarget" />,
            and can be of one of the following types:</para>
        <list type="bullet">
          <item>
            <term>C1LinkTargetAnchor</term>
            <description>An anchor defined within the current document.</description>
          </item>
          <item>
            <term>C1LinkTargetDocumentLocation</term>
            <description>A location within the the current document.</description>
          </item>
          <item>
            <term>C1LinkTargetExternalAnchor</term>
            <description>An anchor defined within a previously saved C1D document.</description>
          </item>
          <item>
            <term>C1LinkTargetFile</term>
            <description>An external document, program or URL. The ShellExecute API is used to invoke the link.</description>
          </item>
          <item>
            <term>C1LinkTargetPage</term>
            <description>A page within the current document.</description>
          </item>
          <item>
            <term>C1LinkTargetUser</term>
            <description>The hyperlink target is determined by a user event handler.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.UserData">
      <summary>
            Arbitrary data associated with the hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.State">
      <summary>
            The hyperlink's status.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.PdfURL">
      <summary>
            Gets the destenation URL of hyperlink in the Adobe PDF format.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo">
      <summary>
            Auxiliary class, contains additional information about hyperlink: list of pages
            where hyperlink exists and area of hyperlink within each page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Hyperlink">
      <summary>
            Gets the C1Hyperlink object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Areas">
      <summary>
            Gets the AreaCollection object containing the hyperlink's areas
            on render fragments.
            Typically this collection contains one element, but if hyperlink
            splits between pages it contains one element for each page.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.Area">
      <summary>
            Describes the position of hyperlink within page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.Region">
      <summary>
            Gets the region of hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.PageIndex">
      <summary>
            Gets the index of page where hyperlink is.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection">
      <summary>
            Collection of Area objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfo">
      <summary>
            Auxiliary class, contains additional information about anchor within document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Anchor">
      <summary>
            Gets the C1Anchor object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.PageIndex">
      <summary>
            Gets the index of page where anchor is.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Point">
      <summary>
            Gets the position of anchor.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfoCollection">
      <summary>
            Collection of the C1HyperlinkInfo objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfoCollection">
      <summary>
            Collection of the C1AnchorInfo objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetUser">
      <summary>
            This class starts a new document when a hyperlink with this type of LinkTarget 
            is clicked. When such a hyperlink is activated (clicked), 
            the UserHyperlinkJump event is fired.
            This class does not have any public properties or methods of its own.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageJumpTypeEnum">
      <summary>
            Describes the supported modes of moving between pages.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.First">
      <summary>
            Move to the first page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Previous">
      <summary>
            Move to the previous page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Next">
      <summary>
            Move to the next page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Last">
      <summary>
            Move to the last page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Absolute">
      <summary>
            Move directly to the specified page.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Relative">
      <summary>
            Move to the page specified relative to the current page.
            </summary>
    </member>
    <member name="M:C1.C1Preview.HyperlinksHelper.ParseCommentRecord(System.IntPtr,System.Int32,System.Drawing.Imaging.EmfPlusRecordType,C1.C1Preview.HyperlinksHelper.CommentRecordTypeEnum@,System.String@,System.Drawing.Rectangle@)">
      <summary>
            Parses the passed metafile comment record (EmfPlusRecordType.Comment or EmfPlusRecordType.EmfGdiComment).
            Function returns true if no errors occur during parsing.
            </summary>
      <param name="data">Data of the metafile's record.</param>
      <param name="dataSize">Size of data.</param>
      <param name="recordType">Type of the metafile's record.</param>
      <param name="commentType">OUT: Type of record, the possible values are defined by the CommentRecordTypeEnum enumeration.</param>
      <param name="tag">Tag field of the record.</param>
      <param name="boundRectangle">Bounding rectangle of the record.</param>
      <returns>Returns true if no errors occur.</returns>
    </member>
    <member name="T:C1.C1Preview.MetafileHyperlinksHelper">
      <summary>
            Provides methods to exatract hyperlinks, anchors and outline entries from metafiles.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Level">
      <summary>
            Gets a level of node, top parent node has level 0.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNodeCollection.Item(System.Int32)">
      <summary>
            Returns the RenderObject object by its index.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintManager">
      <summary>
            Provides printing services.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.LongOperation">
      <summary>
            Occurs periodically when a long operation is in progress.
            </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.Error">
      <summary>
            Occurs when an external exception is thrown (e.g. while printing).
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintOptions">
      <summary>
            Describes the set of options controlling how a document's content
            is to be printed (or previewed).
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSource">
      <summary>
            Gets or sets the value indicating whether the paper source is selected automatically.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PageScaling">
      <summary>
            Gets or sets the value indicating the manner in which pages are scaled during printing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.CenterPage">
      <summary>
            Gets or sets the value indicating whether the page should be centered on paper during printing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoRotate">
      <summary>
            Gets or sets the value indicating whether pages should be auto-rotated to better fit the paper during printing.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfoFields">
      <summary>
            Enumerates fields of DocumentInfo.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.None">
      <summary>
            No fields.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Title">
      <summary>
            The title of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Author">
      <summary>
            The author of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Operator">
      <summary>
            The person who last made changes to the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Manager">
      <summary>
            The manager of the author.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Company">
      <summary>
            The company of the author.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Subject">
      <summary>
            The subject of the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Comment">
      <summary>
            The document comments.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.CreationTime">
      <summary>
            The date and time when the document was created.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.RevisionTime">
      <summary>
            The date and time when the document was last modified.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Creator">
      <summary>
            The application that created the original document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Keywords">
      <summary>
            The keywords for the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Producer">
      <summary>
            The application that created the document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.All">
      <summary>
            All fields.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfo">
      <summary>
            Represents the common information about the C1Preview:
            author, subject, creation time, and so on.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExportProvider">
      <summary>
            Describes the export of document to the metafile files.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExporter">
      <summary>
            Exports the document to a collection of metafiles or to a stream.
            </summary>
      <remarks>
        <para>EmfExporter supports export to a stream in following format:</para>
        <list type="bullet">
          <item>
            <term>int</term>
            <description>The total page count.</description>
          </item>
          <item>
            <term>int</term>
            <description>The length of the first page data (bytes).</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>The first page data.</description>
          </item>
          <item>
            <term>int</term>
            <description>The length of the second page data (bytes).</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>The second page data.</description>
          </item>
          <item>
            <term>...</term>
            <description>and so on...</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly">
      <summary>
            Gets or sets the value indicating whether EmfPlus metafiles
            should be converted to EmfOnly.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportProviders">
      <summary>
            Represents the list of registered export providers.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.Register(C1.C1Preview.Export.ExportProvider)">
      <summary>
            Registers the export provider.
            </summary>
      <param name="exportProvider">ExportProvider object to register.</param>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.Int32)">
      <summary>
            Gets the export provider by its index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.String)">
      <summary>
            Gets the export provider by its default extension.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Count">
      <summary>
            Gets the count of registed export providers.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportUtil">
      <summary>
            Provides static utility methods for export and printing.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageExists(System.Int32,System.Collections.IList,System.Object)">
      <summary>
            Tests whether the page with the specified number exists in the document.
            </summary>
      <param name="pageNo">The 1-based page number.</param>
      <param name="pages">The list of page images or null.</param>
      <param name="document">The document or null.</param>
      <returns>True if the page exists, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Int32,System.Collections.IList,System.Object)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="pageNo">The page number.</param>
      <param name="pages">The pages collection (may be null).</param>
      <param name="document">The document (may be null).</param>
      <returns>The metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.C1PrintDocument,System.Int32)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="document">The C1PrintDocument object.</param>
      <param name="pageIdx">The 0-based page index.</param>
      <returns>The page metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Drawing.Graphics,System.Int32,System.Collections.IList,System.Object)">
      <summary>
            Gets the page metafile for export or printing.
            </summary>
      <param name="refGraphics">The reference graphics for the metafile.</param>
      <param name="pageNo">The page number.</param>
      <param name="pages">The pages collection (may be null).</param>
      <param name="document">The document (may be null).</param>
      <returns>The metafile.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPages(System.Object,System.Int32@)">
      <summary>
            Gets the list of page images representing the document, or null
            if the document is a C1Preview.
            </summary>
      <param name="document">The export document.</param>
      <param name="maxPageNumber">Out: the maximum page number.</param>
      <returns>The list of page metafiles or null.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMinPageNumber(System.Object)">
      <summary>
            Returns the minimum page number for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <returns>The minimum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object,System.Int32)">
      <summary>
            Returns the maximum valid page number for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <param name="pageCount">The page count.</param>
      <returns>The maximum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object)">
      <summary>
            Returns the maximum valid page number for the specified document.
            </summary>
      <param name="document">The target document.</param>
      <returns>The maximum page number valid for this document.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageIndicesToPageNumbers(System.Int32[],System.Object)">
      <summary>
            Converts the list of 0-based physical page indices to the list
            of 1-based logical page numbers.
            </summary>
      <param name="pageIndices">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExportProvider">
      <summary>
            Base abstract class for all image export providers.
            Descendant classes must override GetImageFormat() method.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExporter">
      <summary>
            Exports the document to a collection of metafiles.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.ImageFormat">
      <summary>
            Gets or sets the ImageFormat object indicating the format of
            output image files. The ImageExporter supports formats: Bmp, Gif, Jpeg, Png, Tiff.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.Resolution">
      <summary>
            Gets or sets the resolution of exported image.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExportProvider">
      <summary>
            The RTF export provider.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.DocxExportProvider">
      <summary>
            The Excel export provider to the Office12 format.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportObject(System.Object)">
      <summary>
            Tests whether the specified document can be exported to Open XML Word.
            </summary>
      <param name="obj">The document to test.</param>
      <returns>True if the document can be exported, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.NewExporter">
      <summary>
            Creates a new Exporter object.
            </summary>
      <returns>Returns the created object.</returns>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.FormatName">
      <summary>
            Description of format.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultExtension">
      <summary>
            Default extension for output file.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExporter">
      <summary>
            The RTF exporter.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.UseDrawingCanvas">
      <summary>
            Gets or sets the value indicating whether to create drawing
            canvases in the resulting document.
            </summary>
      <value>
        <b>true</b> if use drawing canvas, otherwise <b>false</b>.</value>
    </member>
    <member name="T:C1.C1Preview.PageLayoutKindEnum">
      <summary>
            Identifies the set of pages to which a page layout is to be applied in a particular document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.None">
      <summary>
            The current page layout is not a member of any document's PageLayouts collection.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.Default">
      <summary>
            The current page layout is the default for a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.FirstPage">
      <summary>
            The current page layout is to be used for the first page of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.LastPage">
      <summary>
            The current page layout is to be used for the last page of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.EvenPages">
      <summary>
            The current page layout is to be used for even pages of a document.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.OddPages">
      <summary>
            The current page layout is to be used for odd pages of a document.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageLayout">
      <summary>
            Represents the page layout of a C1PrintDocument.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout,System.Boolean,System.Boolean)">
      <summary>
            Copies properties from another PageLayout object.
            This method used internally within C1PrintDocument
            during report generation.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.Clone">
      <summary>
            Creates a new PageLayout object that is a copy of the current instance. 
            All nested objects (render objects, page settings) are cloned.
            </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout)">
      <summary>
            Copies properties from another PageLayout object.
            All nested objects (render objects, page settings) are cloned.
            </summary>
      <param name="source">The another PageLayout object.</param>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Document">
      <summary>
            Gets the C1PrintDocument object to which this object is connected.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Kind">
      <summary>
            Gets the kind of page layout in document.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageSettings">
      <summary>
            Gets or sets the page settings associated with this page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageHeader">
      <summary>
            Gets or sets the page header associated with this page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageFooter">
      <summary>
            Gets or sets the page footer associated with this page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Watermark">
      <summary>
            Gets or sets the watermark associated with this page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Overlay">
      <summary>
            Gets or sets the overlay associated with this page layout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.HasColumns">
      <summary>
            Gets the value indicating whether this page layout contains multiple columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Columns">
      <summary>
            Gets the collection of columns defined for this page layout.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageSettings">
      <summary>
            Describes the page's properties of document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings)">
      <summary>
            Compares this C1PageSettings with other C1PageSettings object.
            </summary>
      <param name="other">C1PageSettings object to compare to.</param>
      <returns>Returns true if this C1PageSettings object equals other C1PageSettings object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument,System.Drawing.Printing.PrinterSettings)">
      <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
      <param name="document">The C1PrintDocument object providing the default units
            (if some sizes in this object specified in default units) and DPI
            (if some sizes specified in UnitTypeEnum.Pixel).
            Can be null, but in that case the current object must not contain sizes
            using UnitTypeEnum.Default or UnitTypeEnum.Pixel units.</param>
      <param name="printerSettings">Printer settings for the target page settings.
            Can be null in which case the default printer is used.</param>
      <returns>The newly created PageSettings object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument)">
      <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
      <param name="document">The C1PrintDocument object providing the default units
            (if some sizes in this object specified in default units) and DPI
            (if some sizes specified in UnitTypeEnum.Pixel).
            Can be null, but in that case the current object must not contain sizes
            using UnitTypeEnum.Default or UnitTypeEnum.Pixel units.</param>
      <returns>The newly created PageSettings object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings">
      <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
      <returns>The newly created PageSettings object.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.GetCurrentLocaleDefaultPaperSize(System.Double@,System.Double@,System.Double@,C1.C1Preview.UnitTypeEnum@)">
      <summary>
            Retrieves the default paper size for the current locale.
            </summary>
      <returns>The locale-specific default paper size.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.CreateDefaultPageSettings">
      <summary>
            Creates the C1PageSettings object with default settings, on the
            basis of the current printer or system locale.
            </summary>
      <returns>The created C1PageSettings object.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.UsePrinterPaperSize">
      <summary>
            Gets or sets a value indicating whether to use the printer paper size
            when generating the document.
            This property does not affect the values of 
            <see cref="P:C1.C1Preview.C1PageSettings.Landscape" />,
            <see cref="P:C1.C1Preview.C1PageSettings.Width" />,
            <see cref="P:C1.C1Preview.C1PageSettings.Height" /> and
            <see cref="P:C1.C1Preview.C1PageSettings.PaperKind" /> properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PageLayout">
      <summary>
            Gets the PageLayout object containing this object, can be null if
            this object is not linked with PageLayout.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Landscape">
      <summary>
            Gets or sets a value indicating whether the page is printed in landscape or portrait orientation.
            Changing this property causes swap the height and width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Width">
      <summary>
            Gets or sets the width of the paper.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Height">
      <summary>
            Gets or sets the height of the paper.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperKind">
      <summary>
            Gets the type of paper.
            Changing of this property causes change of Width and Height.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Color">
      <summary>
            Gets or sets a value indicating whether the page should be printed in color.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.LeftMargin">
      <summary>
            Gets or sets the left margin width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.TopMargin">
      <summary>
            Gets or sets the top margin width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.RightMargin">
      <summary>
            Gets or sets the right margin width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.BottomMargin">
      <summary>
            Gets or sets the bottom margin width.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutputRangeTypeEnum">
      <summary>
            Specifies the type of an OutputRange.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.All">
      <summary>
            All pages of the document are in the range.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageList">
      <summary>
            Pages that are in the range are specified as a list.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageRange">
      <summary>
            One or more ranges of pages are specified.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange">
      <summary>
            Describes a part of the document (pages or objects) that is to be
            exported or printed.
            Note: all page numbers are 1-based sequential numbers.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.Dash">
      <summary>
            If included in the page indices list, specifies that all pages
            from preceeding to the next one are to be included in the output.
            </summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.NoPage">
      <summary>
            This value indicates an invalid page number.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor">
      <summary>
            Creates a new instance of the output range that includes all pages in the document.
            Note that enumerating the resulting range must be broken by the client.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the output range that includes all pages in the document.
            </summary>
      <param name="maxPageNumber">The maximum page number (used to prevent infinite enumeration).</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. FromPage may be greater than ToPage, in that case the range is
            inverted.
            </summary>
      <param name="fromPage">The number of the first page to include (1-based).</param>
      <param name="toPage">The number of the last page to include (1-based).</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32[])">
      <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list. The list may include Dash values to
            specify intervals.
            </summary>
      <param name="pageNumbers">The array of page numbers to include.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.String)">
      <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
      <param name="pages">The pages to be included.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.AssignFrom(C1.C1Preview.OutputRange)">
      <summary>
            Copies values from another instance of OutputRange.
            </summary>
      <param name="source">The OutputRange to copy values from.</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Clone">
      <summary>
            Clones the current OutputRange.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.ToString">
      <summary>
            Returns a string that represents the current OutputRange.
            </summary>
      <returns>A string that represents the range.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetFirstPage">
      <summary>
            Returns the first page in the range.
            </summary>
      <returns>The number of the first page.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32)">
      <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
      <param name="pageNumber">The current page number.</param>
      <returns>The next page number or -1 if there's none.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32,System.Int32@)">
      <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
      <param name="pageNumber">The current page number.</param>
      <param name="cookie">A cookie used to avoid infinite loops in cases where the same page number appears in several ranges.
            Set this value to 0 before the first call to this method.</param>
      <returns>The next page number or -1 if there's none.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Contains(System.Int32)">
      <summary>
            Tests whether the specified page is within the range.
            </summary>
      <param name="pageNumber">The page number to test.</param>
      <returns>True if the page is in the range, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetEnumerator">
      <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
      <returns>The new enumerator.</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Inverted">
      <summary>
            Gets or sets the value indicating whether the range should be inverted.
            If the range is inverted, the range's iterator goes from the end of the
            range backwards.
            </summary>
      <value>True if the range is inverted, false otherwise.</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.MaxPageNumber">
      <summary>
            Gets or sets the absolute upper limit for page numbers in the range.
            </summary>
      <value>The upper limit value.</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Type">
      <summary>
            Type of range: all pages, range of pages etc.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageNumbers">
      <summary>
            Gets the list of page numbers.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageCount">
      <summary>
            Gets the total number of pages in the range.
            Note that if the MaxPageNumber has not been set, this
            property will get int.MaxValue.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.FromPage">
      <summary>
            Gets the first page in the range.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.ToPage">
      <summary>
            Gets the last page in the range.
            </summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.All">
      <summary>
            Represents an all-inclusive range.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange.Enumerator">
      <summary>
            Allows to enumerate all pages in the range.
            Note: It is the client reesponsibility to take steps
            to avoid infinite loops if the OutputRange
            was created without specifying a valid MaxPageNumber.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.#ctor(C1.C1Preview.OutputRange)">
      <summary>
            Creates a new instance of the OutputRange enumerator.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.Reset">
      <summary>
            Resets the enumerator.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.MoveNext">
      <summary>
            Moves to the next page number in the range.
            </summary>
      <returns>True if there are more pages in the range.</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Enumerator.Current">
      <summary>
            Gets the current page number.
            </summary>
      <value>The current page number.</value>
    </member>
    <member name="T:C1.C1Preview.PageScalingEnum">
      <summary>
            Specifies the way pages are scaled during printing.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.None">
      <summary>
            Pages are not scaled.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.FitToPaper">
      <summary>
            Pages are enlarged or made smaller if needed to fit paper.
            </summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.ReduceToPaper">
      <summary>
            Pages are made smaller if needed to fit paper.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPrintPage(System.Drawing.SizeF,System.Drawing.RectangleF,System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF,C1.C1Preview.C1PrintOptions,System.Drawing.PointF@,System.Double@,System.Boolean@)">
      <summary>
            Calculates the page zoom factor and the location of the page (top/left)
            inside the printer paper size, according to the specified page scaling
            mode. All sizes should be in the same units.
            </summary>
      <param name="paperSize">Printer paper size.</param>
      <param name="printableArea">Printable area (depends on the printer).</param>
      <param name="landscapeAngle">Landscape angle supported by the printer (90 or 270).</param>
      <param name="pageSize">Document page size.</param>
      <param name="pageContent">Page content rectangle (pageSize sans the margins).</param>
      <param name="printOptions">Print options to use.</param>
      <param name="pageLocation">OUT: Page location relative to the paper top left.</param>
      <param name="pageZoom">OUT: Page zoom factor.</param>
      <param name="rotate">OUT: whether the page should be rotated
            (the angle is opposite to landscapeAngle).</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.SamePaperSizes(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Tests two sizes for equality allowing a small margin for (rounding) errors.
            </summary>
      <param name="size1">The first size to compare.</param>
      <param name="size2">The second size to compare.</param>
      <returns>True if the two sizes are reasonably close, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(C1.C1Preview.ResolvedPage,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
            Layouts the resolved page of a C1PrintDocument.
            </summary>
      <param name="rpage">The page to layout.</param>
      <param name="units">Target units.</param>
      <param name="dpiX">Target X resolution.</param>
      <param name="dpiY">Target Y resolution.</param>
      <param name="pageSize">OUT: Page size.</param>
      <param name="content">OUT: Content rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(System.Drawing.Image,System.Drawing.Printing.PageSettings,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
            Layouts the page represented by an image.
            </summary>
      <param name="rpage">The image of the page to layout.</param>
      <param name="pageSettings">The page settings to use.</param>
      <param name="units">Target units.</param>
      <param name="dpiX">Target X resolution.</param>
      <param name="dpiY">Target Y resolution.</param>
      <param name="pageSize">OUT: Page size.</param>
      <param name="content">OUT: Content rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.ShouldRotate(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Tests whether the page should be rotated to better fit paper.
            </summary>
      <param name="paperSize">The paper size.</param>
      <param name="pageSize">The page size.</param>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.PrintingUtil.RotatePaper(System.Int32,System.Drawing.SizeF@,System.Drawing.RectangleF@)" -->
    <member name="M:C1.C1Preview.PrintingUtil.PaperRotationAngle(System.Int32)">
      <summary>
            Returns the paper rotation angle.
            </summary>
      <param name="pageRotationAngle">The page rotation angle, in degrees.</param>
      <returns>The paper rotation angle, in degrees.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.AdjustPaperSize(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
            If paper kind of the passed page settings is Custom, scans the paper sizes
            available on the printer specified, and if a match is found sets the paper
            size from the printer to the one in page settings.
            </summary>
      <param name="pageSettings">The page settings to adjust.</param>
      <param name="printerSettings">The target printer settings.</param>
      <returns>True if adjustment was made, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.IntPtr,System.Double@,System.Double@)">
      <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
      <param name="hdc">Handle to device context</param>
      <param name="left">Left physical offset</param>
      <param name="top">Top physical offset</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.Drawing.Graphics,System.Double@,System.Double@)">
      <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
      <param name="hdc">Handle to Graphics for the device context</param>
      <param name="left">Left physical offset</param>
      <param name="top">Top physical offset</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LandscapeAngle(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Gets the printer landscape angle.
            If <para>printerSettings</para> is null or invalid, returns 270.
            </summary>
      <param name="printerSettings">The printer settings to get the landscape angle for.</param>
      <returns>The printer landscape angle.</returns>
    </member>
    <member name="T:C1.C1Preview.RenderGraphicsFragment">
      <summary>
            Represents a fragment of the RenderImage object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputFragment">
      <summary>
            Represents a fragment of the RenderInputBase object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderShapeFragment">
      <summary>
            Represents the fragment of RenderShape object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLineFragment">
      <summary>
            Represents the fragment of the RenderLineBase object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangleFragment">
      <summary>
            Represents the fragment of the RenderRectangle object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangleFragment">
      <summary>
            Represents the fragment of the RenderRectangle object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTableFragment">
      <summary>
            Represents the fragment of RenderTable object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TitleResolvedInfo">
      <summary>
            Represents the resolved information about header/footer in table.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Group">
      <summary>
            The TableVectorGroup object representing the title.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Objects">
      <summary>
            RenderFragments in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Ordinals">
      <summary>
            Ordinals of vectors in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Sizes">
      <summary>
            Sizes of vectors in header/footer.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.IsAtEdge">
      <summary>
            Indicates whether the header/footer is at the edge of object (top / left / right / bottom).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Size">
      <summary>
            The size of title, if title is at edge of object then this side
            does not include the additional space for gridline.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesCols">
      <summary>
            If RenderTable.RepeateGridLinesHorz == true then
            this list contains columns for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesHorz == false then
            this list contains columns for which the grid lines ARE REPEATED.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesRows">
      <summary>
            If RenderTable.RepeateGridLinesVert == true then
            this list contains rows for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesVert == false then
            this list contains rows for which the grid lines ARE REPEATED.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.VertHeadersResolved">
      <summary>
            Gets or sets value indicating that the headers of table is resolved and
            VertPageHeade, VertPageFooter properties contains valid values.
            </summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.HorzHeadersResolved">
      <summary>
            Gets or sets value indicating that the headers of table is resolved and
            HorzPageHeader, HorzPageFooter properties contains valid values.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVector">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVector.#ctor(System.Int32,System.Double)">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection.Find(System.Int32)">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitVectorIndex">
      <summary>
            Index of vector in the _colsOrdinals or _rowsOrdinals array.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosWithinVector">
      <summary>
            Split position within vector it is zero if split position
            is between vectors.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Header">
      <summary>
            Resolved info of repeated header.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Footer">
      <summary>
            Resolved info of repeated footer.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RefreshModeEnum">
      <summary>
            Describes the data and expressions refresh mode during document generation.  
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.NoRefresh">
      <summary>
            Neither expressions nor data are refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed and expressions are calculated).
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshDataBinding">
      <summary>
            Data is refreshed, all expressions are recalculated. 
            </summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshCalculatedValues">
      <summary>
            Expressions that do not reference data sources are recalculated,
            but data is not refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed).
            </summary>
    </member>
    <member name="T:C1.C1Preview.GenerateErrorEnum">
      <summary>
            Represents types of errors that can occur during document generation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.None">
      <summary>
            No error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.CyclicReference">
      <summary>
            The document contains a cyclic reference.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ResolvingDimension">
      <summary>
            A dimension of an object cannot be resolved.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoWidthNotSupproted">
      <summary>
            Auto width is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoHeightNotSupproted">
      <summary>
            Auto height is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoSizeNotSupported">
      <summary>
            Auto size is not supported for an object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.LayoutChange">
      <summary>
            Layout cannot be changed at that time.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.DataBinding">
      <summary>
            Error in data binding.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Scripting">
      <summary>
            Scripting error.
            </summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ImportC1Report">
      <summary>
            C1Report import error.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsD">
      <summary>
            Stores a set of four double numbers that represent the
            offsets from edges of rectangular area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.Parse(System.String,C1.C1Preview.OffsetsD@,System.Boolean)">
      <summary>
            Converts a string to the RectangleD structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">The RectangleD structure.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to RectangleD.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Empty">
      <summary>
            Represents an instance of the OffsetsF class with its members uninitialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsI">
      <summary>
            Stores a set of four integer numbers that represent the
            offsets from edges of rectangular area.
            </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.Ceiling(C1.C1Preview.OffsetsD)">
      <summary>
            Converts the specified OffsetsD structure to a OffsetsI structure by 
            rounding the OffsetsD values to the next higher integer values. 
            </summary>
      <param name="value">The OffsetsD structure to be converted.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Empty">
      <summary>
            Represents an instance of the OffsetsF class with its members uninitialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PointD">
      <summary>
            Represents an ordered pair of double x- and y-coordinates that defines a point 
            in a two-dimensional plane.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PointD.ToString">
      <summary>
            Overridden. Converts this PointD to a human readable string. 
            </summary>
      <returns>A string that represents this PointD.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Ceiling">
      <summary>
            Converts this PointD object to a Point object by rounding the 
            values of the PointD object to the next higher integer values. 
            </summary>
      <returns>The Point object this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Truncate">
      <summary>
            Converts this PointD object to a Point object by truncating
            the values of the Point object. 
            </summary>
      <returns>The Point object this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Parse(System.String,C1.C1Preview.PointD@,System.Boolean)">
      <summary>
            Converts a string to the PointD structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">The PointD structure.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to PointD.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="P:C1.C1Preview.PointD.X">
      <summary>
            Gets the x-coordinate of this PointD.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Y">
      <summary>
            Gets the y-coordinate of this PointD.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.IsEmpty">
      <summary>
            Gets a value indicating whether this PointD is empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Empty">
      <summary>
            Represents a new instance of the PointD class with member data left uninitialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SizeD">
      <summary>
            Stores an ordered pair of double numbers, typically the width and height of a rectangle.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SizeD.ToString">
      <summary>
            Overridden. Creates a human-readable string that represents this SizeD. 
            </summary>
      <returns>A string that represents this SizeD.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Ceiling">
      <summary>
            Converts this SizeD object to a Point object by rounding the 
            values of the SizeD object to the next higher integer values. 
            </summary>
      <returns>The Size object this method converts to.</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Truncate">
      <summary>
            Converts this SizeD object to a Size object by truncating
            the values of the Size object. 
            </summary>
      <returns>The Size object this method converts to.</returns>
    </member>
    <member name="P:C1.C1Preview.SizeD.Width">
      <summary>
            Gets or sets the horizontal component of this SizeD.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.Height">
      <summary>
            Gets or sets the vertical component of this SizeD.
            </summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.IsEmpty">
      <summary>
            Gets a value indicating whether this SizeD has zero width and height.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleD">
      <summary>
            Stores a set of four double numbers that represent the location and size of a rectangle.
            </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToString">
      <summary>
            Overridden. Converts the Location and Size 
            of this RectangleD to a human-readable string.
            </summary>
      <returns>A string that contains the position, width, and height of this RectangleD structure, for example, "{X=20, Y=20, Width=100, Height=50}". </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.PointD)">
      <summary>
            Determines if the specified point is contained within this RectangleD structure.
            </summary>
      <param name="pt">The PointD to test.</param>
      <returns>This method returns true if the point represented by the pt parameter is contained within this RectangleD structure; otherwise false.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.RectangleD)">
      <summary>
            Determines if the rectangular region represented by rect is entirely contained within this RectangleD structure.
            </summary>
      <param name="rect">The RectangleD to test.</param>
      <returns>This method returns true if the rectangular region represented by rect is entirely contained within the rectangular region represented by this RectangleD; otherwise false.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(System.Double,System.Double)">
      <summary>
            Determines if the specified point is contained
            within this RectangleD structure.
            </summary>
      <param name="x">The x-coordinate of the point to test.</param>
      <param name="y">The y-coordinate of the point to test.</param>
      <returns>This method returns true if the point defined by x and y is contained within this RectangleD structure; otherwise false.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
      <param name="left">The amount to inflate this RectangleD structure from left.</param>
      <param name="top">The amount to inflate this RectangleD structure from top.</param>
      <param name="right">The amount to inflate this RectangleD structure from right.</param>
      <param name="bottom">The amount to inflate this RectangleD structure from bottom.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.SizeD)">
      <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
      <param name="left">The amount to inflate this rectangle.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double)">
      <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
      <param name="left">The amount to inflate this RectangleD structure horizontally.</param>
      <param name="top">The amount to inflate this RectangleD structure vertically.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD)">
      <summary>
            Replaces this RectangleD structure with the intersection of itself and the specified RectangleD structure.
            </summary>
      <param name="rect">The rectangle to intersect.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.IntersectsWith(C1.C1Preview.RectangleD)">
      <summary>
            Determines if this rectangle intersects with rect.
            </summary>
      <param name="rect">The rectangle to test.</param>
      <returns>This method returns true if there is any intersection.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(System.Double,System.Double)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="x">The amount to offset the location horizontally.</param>
      <param name="y">The amount to offset the location vertically.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(C1.C1Preview.PointD)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="pt">The amount to offset the location.</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Parse(System.String,C1.C1Preview.RectangleD@,System.Boolean)">
      <summary>
            Converts a string to the RectangleD structure.
            </summary>
      <param name="s">The string to convert.</param>
      <param name="result">The RectangleD structure.</param>
      <param name="throwException">Indicates the exception should be thrown if string can not be converted to RectangleD.</param>
      <returns>Returns true if no error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a RectangleD structure with upper-left corner and lower-right corner at the specified locations.
            </summary>
      <param name="left">The x-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="top">The y-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="right">The x-coordinate of the lower-right corner of the rectangular region.</param>
      <param name="bottom">The y-coordinate of the lower-right corner of the rectangular region.</param>
      <returns>The new RectangleD that this method creates.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.RectangleD,System.Double,System.Double)">
      <summary>
            Creates and returns an inflated copy of the specified RectangleD structure.
            The copy is inflated by the specified amount.
            The original rectangle remains unmodified.
            </summary>
      <param name="rect">The RectangleF to be copied. This rectangle is not modified.</param>
      <param name="x">The amount to inflate the copy of the rectangle horizontally.</param>
      <param name="y">The amount to inflate the copy of the rectangle vertically.</param>
      <returns>The inflated RectangleD.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>
            Returns a RectangleD structure that represents the intersection of two rectangles.
            If there is no intersection, and empty RectangleD is returned.
            </summary>
      <param name="a">A rectangle to intersect.</param>
      <param name="b">A rectangle to intersect.</param>
      <returns>A third RectangleD structure the size of which represents the overlapped area of the two specified rectangles.</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Union(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
      <param name="a">A rectangle to union.</param>
      <param name="b">A rectangle to union.</param>
      <returns>A third RectangleD structure that contains both of the two rectangles that form the union.</returns>
    </member>
    <member name="P:C1.C1Preview.RectangleD.X">
      <summary>
            Gets or sets the x-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Y">
      <summary>
            Gets or sets the y-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Width">
      <summary>
            Gets or sets the width of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Height">
      <summary>
            Gets or sets the height of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Left">
      <summary>
            Gets the x-coordinate of the left edge of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Top">
      <summary>
            Gets the y-coordinate of the top edge of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Right">
      <summary>
            Gets the x-coordinate of the right edge of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Bottom">
      <summary>
            Gets the y-coordinate of the bottom edge of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Location">
      <summary>
            Gets or sets the coordinates of the upper-left corner of this RectangleD structure.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Size">
      <summary>
            Gets or sets the size of this RectangleD.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.IsEmpty">
      <summary>
            Tests whether the Width or Height property of this RectangleD has a value of zero.
            </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Empty">
      <summary>
            Represents an instance of the RectangleD class with its members uninitialized.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1Page">
      <summary>
            Represents the generated page of document.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
            Searches a hyperlink on page at specified position.
            </summary>
      <param name="ptPage">Point on page in resolved units.</param>
      <returns>The C1HyperlinkInfo object describing the searchd hyperlink or null if not found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindFragment(C1.C1Preview.PointD)">
      <summary>
            Searches a RenderFragment object on page at specified position.
            </summary>
      <param name="ptPage">Point on page in resolved units.</param>
      <returns>The found RenderFragment object or null if not found.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetHyperlinks">
      <summary>
            Gets the list of all hyperlinks on page.
            </summary>
      <returns>The C1HyperlinkInfoCollection collection containing the page's hyperlinks.</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetInputFragments(System.Boolean)">
      <summary>
            Gets the list of RenderInputFragments objects on this page.
            </summary>
      <returns>Returns the array containing the list of RenderInputFragment objects.</returns>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageNo">
      <summary>
            Gets or sets the number of page, the numbering starts from 1.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Index">
      <summary>
            Gets the index of page in collection.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.IsEmpty">
      <summary>
            Gets the value indicating that the page is empty - 
            it has no fragments from document.Body.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageCollection">
      <summary>
            Represents the list of document's pages.
            </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32,System.Int32)">
      <summary>
            Searches a page with the specified logical coordinates.
            </summary>
      <param name="pageX">Indicates the X logical coordinate of page.</param>
      <param name="pageY">Indicates the Y logical coordinate of page.</param>
      <returns>Returns the found Page object or null.</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32)">
      <summary>
            Searches a page with the specified page number.
            </summary>
      <param name="pageX">Indicates the page number.</param>
      <returns>Returns the found Page object or null.</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Document">
      <summary>
            C1Preview object containing this collection of pages.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageColumnDef">
      <summary>
            Defines parameters of a single page column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Width">
      <summary>
            Width of the column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Spacing">
      <summary>
            Spacing between current column and next column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.PageColumnDefCollection">
      <summary>
            Represents the collection of page columns definitions which are
            items of type PageColumnDef.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add">
      <summary>
            Add column with default parameters, width is auto, spacing - 5mm.
            </summary>
      <returns>Returns the index of added column in collection.</returns>
    </member>
    <member name="T:C1.C1Preview.DataBindingModeEnum">
      <summary>
            Defines the data binding mode.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.None">
      <summary>
            The object is not data bound.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.List">
      <summary>
            The object is bound to a valid data source via its DataBinding property.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.Internal">
      <summary>
            Some internal parts of the object are data bound, for example
            a group of rows within a RenderTable can be data bound.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderFragmentCollection">
      <summary>
            Represents the collection of RenderFragment objects.
            All fragments in this collection sorted by ZOrder
            to perform drawing and search.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObjectList">
      <summary>
            Represents a simple list of RenderObject objects; this list
            is used to store the copies of the object produced by data binding.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ReresolvingModeEnum">
      <summary>
            Enumerates the situations when reresolving can occurs.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReresolvingModeEnum.SplitVert">
      <summary>
            Reresolving occurs on vertical split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ReresolvingModeEnum.SplitHorz">
      <summary>
            Reresolving occurs on horizontal split.
            </summary>
    </member>
    <member name="T:C1.C1Preview.DrawingFlagsEnum">
      <summary>
            Defines flags which can be used by the object to manage its painting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.UseGdiDrawing">
      <summary>
            GDI will be used for drawing. In this case the object must override the method:
            <code>
            protected virtual void InternalDraw(GraphicsUtils.GdiDc dc, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code>
            If this flag is not specified, GDI+ will be used instead and the object must override the method:
            <code>
            protected virtual void InternalDraw(Graphics graphics, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code></summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.SetClipping">
      <summary>
            Clipping will be defined before painting.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.ContentIsEmpty">
      <summary>
            If specified then the object is not painted.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.OwnsChildDrawing">
      <summary>
            The standard painting of child objects is suppressed. The object must paint its children itself.
            </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.BeginHyperlink">
      <summary>
            Special comment fields are added before and after fragment to the metafile,
            specifying that the content is a hyperlink.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitPos">
      <summary>
            Describes the split position.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.Pos">
      <summary>
            Position in object relative to the top / left edge of object.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.SpaceForHardBreak">
      <summary>
            Space *after* Pos available for object if HardBreak is true.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.HardBreak">
      <summary>
            Indicates that the break is a "hard", i.e. the object must split exactly on Pos.
            </summary>
    </member>
    <member name="T:C1.C1Preview.SplitContext">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.ColumnStarted">
      <summary>
            Indicates that the column is started on split.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.IsPageAreaEmpty">
      <summary>
            New page area was started on split and maximum space for object currently available.
            </summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.SaveResolvedInfo">
      <summary>
            Contains saved resolved information for objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitIfLarge">
      <summary>
            Returns true if exists newly added objects with SplitIfLarge option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitNewPage">
      <summary>
            Returns true if exists newly added objects with SplitNewPage option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitIfLarge">
      <summary>
            Marks all objects with SplitIfLarge option as processed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitNewPage">
      <summary>
            Marks all objects with SplitNewPage option as processed.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitVert(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by vertical or not.
            Top defines the top bound for objects, it should be used instead of pageArea.Bounds.Bottom
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitHorz(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by horizontal or not.
            Left defines the left bound for objects, it should be used instead of pageArea.Bounds.Left
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitIfLarge(C1.C1Preview.RenderObject)">
      <summary>
            Returns true if object was newly added and has SplitIfLarge option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitNewPage(C1.C1Preview.RenderObject)">
      <summary>
            Returns true if object was newly added and has SplitNewPage option.
            </summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsProcessed(C1.C1Preview.RenderObject)">
      <summary>
            Returns true if object has SplitIfLarge option and was marked as processed.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TextSplitParams">
      <summary>
            Defines the split parameters for textual objects - RenderText, RenderParagraph and RenderRichText.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RenderImageFragment">
      <summary>
            Represents a fragment of the RenderImage object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Document">
      <summary>
            Gets the C1PrintDocument object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Bounds">
      <summary>
            Gets the bounds of page area within page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.ColumnCount">
      <summary>
            Gets the count of columns in this part of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.Item(System.Int32)">
      <summary>
            Enumerates columns by index.
            </summary>
      <param name="index">Index of column.</param>
      <returns>Returns the PageColumn object representing column with specified index.</returns>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.ResolvedPage">
      <summary>
            Gets the ResolvedPage object containg this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.Parent">
      <summary>
            Gets the parent PageArea object containing this object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ResolvedPage">
      <summary>
            Describes the resolved layout of page.
            Page can be represented as a set of rectangle, each rectangle is a part of page
            (Header, Body or Footer), in turn a body of page consists of set of columns.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Page">
      <summary>
            Gets the Page object containing this object.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.PageSettings">
      <summary>
            Gets the page settings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Header">
      <summary>
            Gets the PageAreaHeader object representing the resolved info about header of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Footer">
      <summary>
            Gets the PageAreaFooter object representing the resolved info about footer of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Body">
      <summary>
            Gets the PageAreaBody object representing the resolved info about body of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullWidth">
      <summary>
            Gets the full width of the page, margins are not taken into account.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullHeight">
      <summary>
            Gets the full height of the page, margins are not taken into account.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.ColumnCount">
      <summary>
            Gets the count of columns in this part of page.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.Item(System.Int32)">
      <summary>
            Enumerates columns by index.
            </summary>
      <param name="index">Index of column.</param>
      <returns>Returns the PageColumn object representing column with specified index.</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumn">
      <summary>
            Represents the column resolved info.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Index">
      <summary>
            Index of column in the page part.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsLast">
      <summary>
            Indicates whether the current column is a last column in its PageArea.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsFirst">
      <summary>
            Indicates whether the current column is a first column in its PageArea.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Next">
      <summary>
            Gets the next column, which goes after this column.
            </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Prev">
      <summary>
            Gets the previous column, which goes prior this column.
            </summary>
    </member>
    <member name="T:C1.C1Preview.FlowAlignEnum">
      <summary>
            Defines modes of alignment on block flow.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Default">
      <summary>
            For child objects, the alignment specified on the parent is used.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Near">
      <summary>
            Objects are aligned left for top to bottom flow, bottom for left to right flow.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Center">
      <summary>
            Objects are centered.
            </summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Far">
      <summary>
            Objects are aligned right for top to bottom flow, top for left to right flow.
            </summary>
    </member>
    <member name="T:C1.C1Preview.AlignHorzEnum">
      <summary>
            Defines modes of horizontal alignment of text.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Left">
      <summary>
            Aligns text to the left.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Center">
      <summary>   
            Center text horizontally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Right">
      <summary>
            Aligns text to the right.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Justify">
      <summary>
            Justifies text horizontally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.JustifyChars">
      <summary>
            Justifies text horizontally, adding white space between all characters.
            </summary>
    </member>
    <member name="T:C1.C1Preview.AlignVertEnum">
      <summary>
            Defines modes of vertical alignment of text.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Top">
      <summary>
            Align text to the top.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Center">
      <summary>
            Center text vertically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Bottom">
      <summary>
            Align text to the bottom.
            </summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Justify">
      <summary>
            Justify text vertically.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignHorzEnum">
      <summary>
            Defines modes of horizontal alignment of image.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Left">
      <summary>
            Align image to the left.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Center">
      <summary>
            Center image horizontally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Right">
      <summary>
            Align image to the right.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignVertEnum">
      <summary>
            Defines modes of vertical alignment of image.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Top">
      <summary>
            Align image to the top.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Center">
      <summary>
            Center image vertically.
            </summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Bottom">
      <summary>
            Align image to the bottom.
            </summary>
    </member>
    <member name="T:C1.C1Preview.TextPositionEnum">
      <summary>
            Defines the text position (normal, subscript or superscript).
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Normal">
      <summary>
            Text is positioned normally.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Subscript">
      <summary>
            Text is positioned as subscript.
            </summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Superscript">
      <summary>
            Text is positioned as superscript.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlign">
      <summary>
            Describes the image alignment.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignHorz">
      <summary>
            Horizontal alignment of an image.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignVert">
      <summary>
            Vertical alignment of an image.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchHorz">
      <summary>
            Gets or sets the value indicating whether an image is stretched 
            horizontally to fit layout rectangle or it has a natural width.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchVert">
      <summary>
            Gets or sets the value indicating whether an image is stretched 
            vertically to fit layout rectangle or it has a natural height.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatio">
      <summary>
            Keeps aspect ratio. Useful when StretchHorz or StretchVert is true.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileHorz">
      <summary>
            The image is tiled horizontally. 
            If StretchHorz is true then this property is ignored.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileVert">
      <summary>
            The image is tiled vertically. 
            If StretchVert is true then this property is ignored.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.BestFit">
      <summary>
            This property is a composition (function) of the StretchHorz, StretchVert and
            KeepAspectRatio properties.
            </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.Default">
      <summary>
            Gets default image alignment.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Offsets">
      <summary>
            Describes Padding and Spacing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.Left">
      <summary>
            Gets or sets left offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.Top">
      <summary>
            Gets or sets top offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.Right">
      <summary>
            Gets or sets right offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.Bottom">
      <summary>
            Gets or sets bottom offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.All">
      <summary>
            Sets the all offsets.
            </summary>
    </member>
    <member name="T:C1.C1Preview.LineDef">
      <summary>
            Defines the line's rendering attributes. This is immutable class.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Color">
      <summary>
            Gets or sets color of line.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Width">
      <summary>
            Gets or sets width of line.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.BackColor">
      <summary>
            Gets the back color of pen - color of spaces between dashes.
            This property does not used if Style is DashStyle.Solid.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashStyle">
      <summary>
            Gets the style used for dashed lines drawn with this LineDef.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashPattern">
      <summary>
            Gets an array of custom dashes and spaces.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Empty">
      <summary>
            Represents the empty line with Color.Empty and Unit.Empty.
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Default">
      <summary>
            Represents the default solid line with Color.Black and "0.5pt".
            </summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DefaultBold">
      <summary>
            Represents the default solid bold line with Color.Black and "2pt".
            </summary>
    </member>
    <member name="T:C1.C1Preview.Borders">
      <summary>
            Describes borders around rectangular area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Left">
      <summary>
            Gets or sets left border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Top">
      <summary>
            Gets or sets top border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Right">
      <summary>
            Gets or sets right border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Bottom">
      <summary>
            Gets or sets bottom border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.All">
      <summary>
            Sets the border for all edges of an object.
            </summary>
    </member>
    <member name="T:C1.C1Preview.GridLines">
      <summary>
            Describes the lines within of table's area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Left">
      <summary>
            Gets or sets left border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Top">
      <summary>
            Gets or sets top border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Right">
      <summary>
            Gets or sets right border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Bottom">
      <summary>
            Gets or sets bottom border.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Vert">
      <summary>
            Gets or sets vertical lines within table's area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Horz">
      <summary>
            Gets or sets horizontal lines within table's area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.All">
      <summary>
            Sets the all lines.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkAttrs">
      <summary>
            The visual style of hyperlink.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkTextAttrs">
      <summary>
            Determines the attributes used to highlight a hyperlink inside a text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor">
      <summary>
            The background color. If the value is Color.Empty or Color.Transparent, 
            the hyperlinks background color is not changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor">
      <summary>
            The foreground (text) color. If the value is Color.Empty or Color.Transparent, 
            the hyperlinks text color is not changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline">
      <summary>
            If the value is true, the hyperlinks text is underlined.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.VisitedDefault">
      <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.NormalDefault">
      <summary>
            Gets the default attributes of "normal" (not visited and not highlighted) hyperlinks.
            </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.HoverDefault">
      <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Style">
      <summary>
            Represents the style of an object.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)">
      <summary>
            Copies all non inherited properties from another Style object,
            also copies Parent, AmbientParent properties.
            </summary>
      <param name="style">Source Style object.</param>
    </member>
    <member name="P:C1.C1Preview.Style.Parent">
      <summary>
            Gets the parent style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Parents">
      <summary>
            Sets both parents (Parent and AmbientParent) to the same value.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Children">
      <summary>
            Gets collection of child styles.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasChildren">
      <summary>
            Indicates that style has child styles.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.AmbientParent">
      <summary>
            Gets the ambient parent style.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImage">
      <summary>
            Gets or sets the background image.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageName">
      <summary>
            Gets or sets the name of background image
            in the document's dictionary.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Brush">
      <summary>
            Gets or sets brush used to fill object.
            If for style both BackColor and Brush are specified then the BackColor will be used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextColor">
      <summary>
            Gets or sets the color of a text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAngle">
      <summary>
            Gets or sets the angle by which to rotate the text, in degrees counterclockwise.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignHorz">
      <summary>
            Gets or sets the horizontal alignment of text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignVert">
      <summary>
            Gets or sets the vertical alignment of text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.LineSpacing">
      <summary>
            Gets or sets the line spacing of a text in %, 100 means default line spacing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrap">
      <summary>
            Indicates whether a render object automatically wraps words to the 
            beginning of the next line when necessary. 
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextPosition">
      <summary>
            Gets or sets the style of text: SuperScript, SubScript, Normal.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HyperlinkAttrs">
      <summary>
            Gets or sets attributes of "normal" (not visited and not highlighted) hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrs">
      <summary>
            Gets or sets attributes of visited hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrs">
      <summary>
            Gets or sets attributes of highlighted hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrs">
      <summary>
            Gets or sets attributes of active hyperlink.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TreatLastLineNotEndOfParagraph">
      <summary>
            Obsolete. Use JustifyLastLine instead.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.EolIsEndOfParagraph">
      <summary>
            Obsolete. Use JustifyEndOfLines instead.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MeasureTrailingSpaces">
      <summary>
            By default the boundary rectangle formed during text rendering
            excludes the space at the end of each line. 
            Set this property to true to include that space in measurement.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Padding">
      <summary>
            Gets or sets padding widths.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Spacing">
      <summary>
            Gets or sets spacing widths.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Borders">
      <summary>
            Gets or sets the border around rendering.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.GridLines">
      <summary>
            Gets or sets the lines in table's area.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ImageAlign">
      <summary>
            Gets or sets the alignment of the picture.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageAlign">
      <summary>
            Gets or sets the alignment of the background picture.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackColor">
      <summary>
            Gets or sets the background color.
            If for style both BackColor and Brush are specified then the BackColor will be used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MinOrphanLines">
      <summary>
            Gets or sets the minimal count of orphan lines in text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ClientAreaOnly">
      <summary>
            Gets or sets the value indicating whether client area or whole area of control will be rendered.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillBrush">
      <summary>
            Gets or sets brush used to fill internal area of shape objects (RenderRectangle, RenderEllipse, etc).
            If for style both ShapeFillColor and ShapeFillBrush are specified then the ShapeFillColor will be used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillColor">
      <summary>
            Gets or sets the color used to fill internal area of shape objects (RenderRectangle, RenderEllipse, etc).
            If for style both ShapeFillColor and ShapeFillBrush are specified then the ShapeFillColor will be used.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeLine">
      <summary>
            Gets or sets the style of lines used to draw shape objects (RenderLine, RenderRectangle etc).
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlign">
      <summary>
            Gets or sets the alignment of the current object within its container's block flow.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignChildren">
      <summary>
            Gets or sets the align of object's children on block flow.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextIndent">
      <summary>
            Gets or sets a value that indicates how far to
            indent the first line of a paragraph of text.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharSpacing">
      <summary>
            Gets or sets the value determining the spacing between text characters.
            The default value is 0.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharWidth">
      <summary>
            Gets or sets the amount (in percent) by which to increase or decrease
            the widths of text characters. The default value is 100.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyLastLine">
      <summary>
            Gets or sets the value indicating whether the last line of text should be justified
            if the current style has TextAlignHorz set to Justify or JustifyChars.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyEndOfLines">
      <summary>
            Gets or sets the value indicating whether lines of text
            ending with a newline character should be justified
            if the current style has TextAlignHorz set to Justify or JustifyChars.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Font">
      <summary>
            Gets or sets font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontName">
      <summary>
            Gets or sets the face name of this font.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontSize">
      <summary>
            Gets or sets the em-size of this font measured in the units specified by the Unit property.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontBold">
      <summary>
            Gets or sets a value that indicates whether this font is bold.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontItalic">
      <summary>
            Gets or sets a value that indicates whether this font is italic.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontUnderline">
      <summary>
            Gets or sets a value that indicates whether this font is underline.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontStrikeout">
      <summary>
            Gets or sets a value that indicates whether this font is strikeout.
            </summary>
    </member>
    <member name="T:C1.C1Preview.StyleCollection">
      <summary>
            Collection of Style objects.
            </summary>
    </member>
    <member name="M:C1.C1Preview.StyleCollection.Add">
      <summary>
            Creates new Style object and adds it to the collection.
            </summary>
      <returns>Created style object.</returns>
    </member>
    <member name="T:C1.C1Preview.TagCollection">
      <summary>
            Collection of the Tag objects.
            </summary>
    </member>
    <member name="T:C1.C1Preview.RefDim">
      <summary>
            Internal, describes the dimensions of object.
            <para>
            Left, Top, Right, Bottom - Absolute coordinates on page.
            </para><para>
            RelLeft, RelTop, RelRight, RelBottom - Relative coordinates in parent.
            </para><para>
            ChildLeft, ChildTop, ChildRight, ChildBottom - Relative coordinates for child objects,
            ChildLeft and ChildTop are always 0,
            ChildRight = Width - SpacingLeft - SpacingRight - PaddingLeft - PaddingRight - BordersLeft - BordersRight
            </para><para>
            Width, Height - sizes of object.
            </para><para>
            ChildWidth, ChildHeight - sizes for child objects, for example, ChildWidth is
            Width - (SpacingLeft + BorderLeft + PaddingLeft) - (SpacingRight + BorderRight + PaddingRight).
            </para></summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfo">
      <summary>
            Contains addititional information about metafile created by the C1Preview.
            This information are stored in the GdiComment record.
            Format of the record describes by the C1.C1Pdf.EMR_C1_METAFILE_INFO structure.
            </summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfoReader">
      <summary>
            Provides a method for reading the C1MetafileInfo from metafile.
            </summary>
    </member>
    <member name="T:C1.C1Preview.ColorUtil">
      <summary>
            Provides a set of helper methods allowing to hide the differences
            between System.Drawing and System.Windows.Media colors in code
            that needs to build both for .NET 2.0 and WPF environments.
            </summary>
    </member>
    <member name="M:C1.C1Preview.ColorUtil.ColorToWinColor(System.Drawing.Color)">
      <summary>
            Converts a color to a System.Drawing.Color.
            This overload simply returns the passed color.
            </summary>
      <param name="c">The System.Drawing.Color color to convert.</param>
      <returns>The converted color.</returns>
    </member>
    <member name="M:C1.C1Preview.ColorUtil.IsColorTransparent(System.Drawing.Color)">
      <summary>
            Tests whether the passed color represents the transparent color.
            </summary>
      <param name="c">The color to test.</param>
      <returns>True if the color is transparent, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.ColorUtil.IsColorBlack(System.Drawing.Color)">
      <summary>
            Tests whether the passed color represents the solid black color.
            </summary>
      <param name="c">The color to test.</param>
      <returns>True if the color is solid black, false otherwise.</returns>
    </member>
    <member name="M:C1.C1Preview.ColorUtil.IsColorWhite(System.Drawing.Color)">
      <summary>
            Tests whether the passed color represents the solid white color.
            </summary>
      <param name="c">The color to test.</param>
      <returns>True if the color is solid white, false otherwise.</returns>
    </member>
    <member name="T:C1.C1Preview.LongOperationEventArgs">
      <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor">
      <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
      <param name="complete">How much is complete (from 0 to 1).</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
      <param name="complete">How much is complete (from 0 to 1).</param>
      <param name="canCancel">Whether the operation can be cancelled.</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
      <param name="canCancel">Whether the operation can be cancelled.</param>
    </member>
    <member name="T:C1.C1Preview.EventCollection">
      <summary>
            Represents a collection that fires events when changing.
            </summary>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changing">
      <summary>
            Occurs before changing of collection.
            </summary>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changed">
      <summary>
            Occurs after changing of collection.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeTypeEnum">
      <summary>
            Defines the types of collection's changing.
            </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventHandler">
      <summary>
            Represents the method that will handler an event occuring when
            collection changing.
            </summary>
      <param name="sender">The source of event.</param>
      <param name="e">The parameters of event.</param>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventArgs">
      <summary>
            Contains the data for events which occurs the EventCollection changed.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.ChangeType">
      <summary>
            Gets the type of collection's changing.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.OldItem">
      <summary>
            Gets the old object at specified index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.NewItem">
      <summary>
            Gets the new object at specified index.
            </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.Index">
      <summary>
            Gets the index within collection where changing occurs.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FontInfo">
      <summary>
            Contains information about a particular True Type font.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(C1.C1Preview.EmbeddedFont)">
      <summary>
            Creates a new instance of FontInfo for the specified <see cref="T:C1.C1Preview.EmbeddedFont" />.
            </summary>
      <param name="ef">The font to get info for.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(System.Drawing.Font)">
      <summary>
            Creates a new instance of FontInfo for the specified <see cref="T:System.Drawing.Font" />.
            </summary>
      <param name="font">The font to get info for.</param>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(C1.Util.Win.Win32.OUTLINETEXTMETRIC)">
      <summary>
            Creates a new instance of FontInfo for the specified OUTLINETEXTMETRIC.
            </summary>
      <param name="otm">The font to get info for.</param>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.EmSize">
      <summary>
            Gets the em size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptSize">
      <summary>
            Gets the subscript size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptSize">
      <summary>
            Gets the superscript size of the font, in font design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptQuotient">
      <summary>
            Gets the subscript size quotient.
            Multiply the size of the font by this value to get the subscript size.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptQuotient">
      <summary>
            Gets the superscript size quotient.
            Multiply the size of the font by this value to get the superscript size.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.StrikeoutPosition">
      <summary>
            Gets the strikeout position, relative to the baseline, in design units.
            Positive values are above the base line and negative values are below.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscorePosition">
      <summary>
            Gets the underscore position, relative to the baseline, in design units.
            Positive values are above the base line and negative values are below.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscoreThickness">
      <summary>
            Gets the underscore line thickness, in design units.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanEmbed">
      <summary>
            Gets the value indicating whether the font licensing allows embedding.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustObfuscate">
      <summary>
            Gets the value indicating whether the font licensing requires obfuscating when embedded in XPS.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.ShouldObfuscate">
      <summary>
            Gets the value indicating whether the font should be obfuscated when embedded in XPS.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanSubset">
      <summary>
            Gets the value indicating whether the font licensing allows subsetting.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustRestrict">
      <summary>
            Gets the value indicating whether the font licensing restricts the font to read-only use.
            </summary>
    </member>
    <member name="T:C1.C1Preview.IMetafilePainter">
      <summary>
            This interface can be implemented by object which need to customize painting
            of metafiles in the GraphicsUtils.DrawImage method.
            </summary>
    </member>
    <member name="M:C1.C1Preview.IMetafilePainter.DrawMetafile(System.Drawing.Graphics,System.Drawing.Imaging.Metafile,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Performs actually drawing of image.
            </summary>
      <param name="graphics">The Graphics to draw on.</param>
      <param name="metafile">Metafile to draw.</param>
      <param name="x">x-coordinate of the upper-left corner of the drawn image.</param>
      <param name="y">y-coordinate of the upper-left corner of the drawn image.</param>
      <param name="width">Width of the drawn image.</param>
      <param name="height">Height of the drawn image.</param>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.IsPrinter">
      <summary>
            Indicates whether a metafile is created from printer DC.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.Creator">
      <summary>
            Gets the creator of the metafile (C1Preview or unknown).
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileDpi">
      <summary>
            Gets the resolution of metafile.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi">
      <summary>
            Gets the dpi of reference graphics, which was used during metafile's creation.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileSizePoints">
      <summary>
            Gets the metafile's size, calculated on the basis of MetafileDpi.
            </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsSizePoints">
      <summary>
            Gets the metafile's size, calculated on the basis of ReferenceGraphicsDpi.
            </summary>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.CreatePrinterIC(System.String)">
      <summary>
            Creates the information context for specified printer,
            this context can be used for measurement operations, NOT FOR DRAWING.
            </summary>
      <param name="printerName">Name of printer.</param>
      <returns>The handle of context or IntPtr.Zero if error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.GetPrinterDpi(System.String)">
      <summary>
            Gets the dpi of specified printer.
            </summary>
      <param name="printerName">Name of printer.</param>
      <returns>The PointF structure, PointF.X is horizontal dpi, PointF.Y is vertical dpi. Returns PointF.Empty if error occurs.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.IsPrinterValid(System.String)">
      <summary>
            Tests is the specified printer name.
            </summary>
      <param name="printerName">Name of printer.</param>
      <returns>Returns the true if printer name is valid.</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)">
      <summary>
            Searches for the printer with specified minimal dpi, the horizontal and
            vertical dpi of printer must be same.
            </summary>
      <param name="minDpi">The minimal possible dpi. If this parameter is zero then the first printer with "square" dpi will be selected.</param>
      <param name="bestPrinterDpi">OUT: The dpi of the searched printer or 0 if printer is not found.</param>
      <returns>The name of searched printer or null if search fails.</returns>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DBrush">
      <summary>
            Serializes the Brush class as XmlElement.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DImageData">
      <summary>
            Class with the only purpose in life - serialize images.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DIconData">
      <summary>
            Class with the only purpose in life - serialize icons.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DData">
      <summary>
            Class with the only purpose in life - serialize images.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Warning">
      <summary>
            Describes the situation that caused the need for conflict resolving.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Code">
      <summary>
            Gets the error's category.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Description">
      <summary>
            Gets a detailed description of the error.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Source">
      <summary>
            Gets the object which triggered the error.
            </summary>
    </member>
    <member name="T:C1.C1Preview.WarningCollection">
      <summary>
            Collection of Warning objects.
            </summary>
    </member>
  </members>
</doc>