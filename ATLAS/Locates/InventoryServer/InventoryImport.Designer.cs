//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace StockLoan.Inventory {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ImportSubscriptionSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ImportSubscriptionSet : global::System.Data.DataSet {
        
        private tbInventorySubscriberDataTable tabletbInventorySubscriber;
        
        private tbKeyValuesDataTable tabletbKeyValues;
        
        private tbInventorySubscriptionTypesDataTable tabletbInventorySubscriptionTypes;
        
        private tbInventoryFilePatternsDataTable tabletbInventoryFilePatterns;
        
        private tbInventoryImportExecutionDataTable tabletbInventoryImportExecution;
        
        private tbDesksDataTable tabletbDesks;
        
        private global::System.Data.DataRelation relationDeskSubscriptions;
        
        private global::System.Data.DataRelation relationSubscriptionMasks;
        
        private global::System.Data.DataRelation relationSubscriptionTypes;
        
        private global::System.Data.DataRelation relationSubscriptionExecutions;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImportSubscriptionSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ImportSubscriptionSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbInventorySubscriber"] != null)) {
                    base.Tables.Add(new tbInventorySubscriberDataTable(ds.Tables["tbInventorySubscriber"]));
                }
                if ((ds.Tables["tbKeyValues"] != null)) {
                    base.Tables.Add(new tbKeyValuesDataTable(ds.Tables["tbKeyValues"]));
                }
                if ((ds.Tables["tbInventorySubscriptionTypes"] != null)) {
                    base.Tables.Add(new tbInventorySubscriptionTypesDataTable(ds.Tables["tbInventorySubscriptionTypes"]));
                }
                if ((ds.Tables["tbInventoryFilePatterns"] != null)) {
                    base.Tables.Add(new tbInventoryFilePatternsDataTable(ds.Tables["tbInventoryFilePatterns"]));
                }
                if ((ds.Tables["tbInventoryImportExecution"] != null)) {
                    base.Tables.Add(new tbInventoryImportExecutionDataTable(ds.Tables["tbInventoryImportExecution"]));
                }
                if ((ds.Tables["tbDesks"] != null)) {
                    base.Tables.Add(new tbDesksDataTable(ds.Tables["tbDesks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbInventorySubscriberDataTable tbInventorySubscriber {
            get {
                return this.tabletbInventorySubscriber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbKeyValuesDataTable tbKeyValues {
            get {
                return this.tabletbKeyValues;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbInventorySubscriptionTypesDataTable tbInventorySubscriptionTypes {
            get {
                return this.tabletbInventorySubscriptionTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbInventoryFilePatternsDataTable tbInventoryFilePatterns {
            get {
                return this.tabletbInventoryFilePatterns;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbInventoryImportExecutionDataTable tbInventoryImportExecution {
            get {
                return this.tabletbInventoryImportExecution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbDesksDataTable tbDesks {
            get {
                return this.tabletbDesks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ImportSubscriptionSet cln = ((ImportSubscriptionSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tbInventorySubscriber"] != null)) {
                    base.Tables.Add(new tbInventorySubscriberDataTable(ds.Tables["tbInventorySubscriber"]));
                }
                if ((ds.Tables["tbKeyValues"] != null)) {
                    base.Tables.Add(new tbKeyValuesDataTable(ds.Tables["tbKeyValues"]));
                }
                if ((ds.Tables["tbInventorySubscriptionTypes"] != null)) {
                    base.Tables.Add(new tbInventorySubscriptionTypesDataTable(ds.Tables["tbInventorySubscriptionTypes"]));
                }
                if ((ds.Tables["tbInventoryFilePatterns"] != null)) {
                    base.Tables.Add(new tbInventoryFilePatternsDataTable(ds.Tables["tbInventoryFilePatterns"]));
                }
                if ((ds.Tables["tbInventoryImportExecution"] != null)) {
                    base.Tables.Add(new tbInventoryImportExecutionDataTable(ds.Tables["tbInventoryImportExecution"]));
                }
                if ((ds.Tables["tbDesks"] != null)) {
                    base.Tables.Add(new tbDesksDataTable(ds.Tables["tbDesks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletbInventorySubscriber = ((tbInventorySubscriberDataTable)(base.Tables["tbInventorySubscriber"]));
            if ((initTable == true)) {
                if ((this.tabletbInventorySubscriber != null)) {
                    this.tabletbInventorySubscriber.InitVars();
                }
            }
            this.tabletbKeyValues = ((tbKeyValuesDataTable)(base.Tables["tbKeyValues"]));
            if ((initTable == true)) {
                if ((this.tabletbKeyValues != null)) {
                    this.tabletbKeyValues.InitVars();
                }
            }
            this.tabletbInventorySubscriptionTypes = ((tbInventorySubscriptionTypesDataTable)(base.Tables["tbInventorySubscriptionTypes"]));
            if ((initTable == true)) {
                if ((this.tabletbInventorySubscriptionTypes != null)) {
                    this.tabletbInventorySubscriptionTypes.InitVars();
                }
            }
            this.tabletbInventoryFilePatterns = ((tbInventoryFilePatternsDataTable)(base.Tables["tbInventoryFilePatterns"]));
            if ((initTable == true)) {
                if ((this.tabletbInventoryFilePatterns != null)) {
                    this.tabletbInventoryFilePatterns.InitVars();
                }
            }
            this.tabletbInventoryImportExecution = ((tbInventoryImportExecutionDataTable)(base.Tables["tbInventoryImportExecution"]));
            if ((initTable == true)) {
                if ((this.tabletbInventoryImportExecution != null)) {
                    this.tabletbInventoryImportExecution.InitVars();
                }
            }
            this.tabletbDesks = ((tbDesksDataTable)(base.Tables["tbDesks"]));
            if ((initTable == true)) {
                if ((this.tabletbDesks != null)) {
                    this.tabletbDesks.InitVars();
                }
            }
            this.relationDeskSubscriptions = this.Relations["DeskSubscriptions"];
            this.relationSubscriptionMasks = this.Relations["SubscriptionMasks"];
            this.relationSubscriptionTypes = this.Relations["SubscriptionTypes"];
            this.relationSubscriptionExecutions = this.Relations["SubscriptionExecutions"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ImportSubscriptionSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletbInventorySubscriber = new tbInventorySubscriberDataTable();
            base.Tables.Add(this.tabletbInventorySubscriber);
            this.tabletbKeyValues = new tbKeyValuesDataTable();
            base.Tables.Add(this.tabletbKeyValues);
            this.tabletbInventorySubscriptionTypes = new tbInventorySubscriptionTypesDataTable();
            base.Tables.Add(this.tabletbInventorySubscriptionTypes);
            this.tabletbInventoryFilePatterns = new tbInventoryFilePatternsDataTable();
            base.Tables.Add(this.tabletbInventoryFilePatterns);
            this.tabletbInventoryImportExecution = new tbInventoryImportExecutionDataTable();
            base.Tables.Add(this.tabletbInventoryImportExecution);
            this.tabletbDesks = new tbDesksDataTable();
            base.Tables.Add(this.tabletbDesks);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("DeskSubscriptions", new global::System.Data.DataColumn[] {
                        this.tabletbDesks.DeskColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.DeskColumn});
            this.tabletbInventorySubscriber.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SubscriptionMasks", new global::System.Data.DataColumn[] {
                        this.tabletbInventoryFilePatterns.InventoryFilePatternIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.InventoryFilePatternIDColumn});
            this.tabletbInventorySubscriber.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SubscriptionTypes", new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.SubscriptionTypeIDColumn});
            this.tabletbInventorySubscriber.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SubscriptionExecutions", new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.InventorySubscriberIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventoryImportExecution.SubscriberIDColumn});
            this.tabletbInventoryImportExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationDeskSubscriptions = new global::System.Data.DataRelation("DeskSubscriptions", new global::System.Data.DataColumn[] {
                        this.tabletbDesks.DeskColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.DeskColumn}, false);
            this.Relations.Add(this.relationDeskSubscriptions);
            this.relationSubscriptionMasks = new global::System.Data.DataRelation("SubscriptionMasks", new global::System.Data.DataColumn[] {
                        this.tabletbInventoryFilePatterns.InventoryFilePatternIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.InventoryFilePatternIDColumn}, false);
            this.Relations.Add(this.relationSubscriptionMasks);
            this.relationSubscriptionTypes = new global::System.Data.DataRelation("SubscriptionTypes", new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.SubscriptionTypeIDColumn}, false);
            this.Relations.Add(this.relationSubscriptionTypes);
            this.relationSubscriptionExecutions = new global::System.Data.DataRelation("SubscriptionExecutions", new global::System.Data.DataColumn[] {
                        this.tabletbInventorySubscriber.InventorySubscriberIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbInventoryImportExecution.SubscriberIDColumn}, false);
            this.Relations.Add(this.relationSubscriptionExecutions);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbInventorySubscriber() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbKeyValues() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbInventorySubscriptionTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbInventoryFilePatterns() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbInventoryImportExecution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbDesks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ImportSubscriptionSet ds = new ImportSubscriptionSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tbInventorySubscriberRowChangeEventHandler(object sender, tbInventorySubscriberRowChangeEvent e);
        
        public delegate void tbKeyValuesRowChangeEventHandler(object sender, tbKeyValuesRowChangeEvent e);
        
        public delegate void tbInventorySubscriptionTypesRowChangeEventHandler(object sender, tbInventorySubscriptionTypesRowChangeEvent e);
        
        public delegate void tbInventoryFilePatternsRowChangeEventHandler(object sender, tbInventoryFilePatternsRowChangeEvent e);
        
        public delegate void tbInventoryImportExecutionRowChangeEventHandler(object sender, tbInventoryImportExecutionRowChangeEvent e);
        
        public delegate void tbDesksRowChangeEventHandler(object sender, tbDesksRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbInventorySubscriberDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInventorySubscriberID;
            
            private global::System.Data.DataColumn columnInventoryFilePatternID;
            
            private global::System.Data.DataColumn columnSubscriptionTypeID;
            
            private global::System.Data.DataColumn columnDesk;
            
            private global::System.Data.DataColumn columnFileHost;
            
            private global::System.Data.DataColumn columnFilePathName;
            
            private global::System.Data.DataColumn columnFileUserName;
            
            private global::System.Data.DataColumn columnFilePassword;
            
            private global::System.Data.DataColumn columnFileCheckTime;
            
            private global::System.Data.DataColumn columnFileTime;
            
            private global::System.Data.DataColumn columnFileStatus;
            
            private global::System.Data.DataColumn columnMailAddress;
            
            private global::System.Data.DataColumn columnMailSubject;
            
            private global::System.Data.DataColumn columnLoadCount;
            
            private global::System.Data.DataColumn columnIsBizDatePrior;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsRunning;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberDataTable() {
                this.TableName = "tbInventorySubscriber";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventorySubscriberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbInventorySubscriberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySubscriberIDColumn {
                get {
                    return this.columnInventorySubscriberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryFilePatternIDColumn {
                get {
                    return this.columnInventoryFilePatternID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionTypeIDColumn {
                get {
                    return this.columnSubscriptionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeskColumn {
                get {
                    return this.columnDesk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileHostColumn {
                get {
                    return this.columnFileHost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathNameColumn {
                get {
                    return this.columnFilePathName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileUserNameColumn {
                get {
                    return this.columnFileUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePasswordColumn {
                get {
                    return this.columnFilePassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileCheckTimeColumn {
                get {
                    return this.columnFileCheckTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTimeColumn {
                get {
                    return this.columnFileTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileStatusColumn {
                get {
                    return this.columnFileStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MailAddressColumn {
                get {
                    return this.columnMailAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MailSubjectColumn {
                get {
                    return this.columnMailSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadCountColumn {
                get {
                    return this.columnLoadCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBizDatePriorColumn {
                get {
                    return this.columnIsBizDatePrior;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRunningColumn {
                get {
                    return this.columnIsRunning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow this[int index] {
                get {
                    return ((tbInventorySubscriberRow)(this.Rows[index]));
                }
            }
            
            public event tbInventorySubscriberRowChangeEventHandler tbInventorySubscriberRowChanging;
            
            public event tbInventorySubscriberRowChangeEventHandler tbInventorySubscriberRowChanged;
            
            public event tbInventorySubscriberRowChangeEventHandler tbInventorySubscriberRowDeleting;
            
            public event tbInventorySubscriberRowChangeEventHandler tbInventorySubscriberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbInventorySubscriberRow(tbInventorySubscriberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow AddtbInventorySubscriberRow(
                        long InventorySubscriberID, 
                        tbInventoryFilePatternsRow parenttbInventoryFilePatternsRowBySubscriptionMasks, 
                        tbInventorySubscriptionTypesRow parenttbInventorySubscriptionTypesRowBySubscriptionTypes, 
                        tbDesksRow parenttbDesksRowByDeskSubscriptions, 
                        string FileHost, 
                        string FilePathName, 
                        string FileUserName, 
                        string FilePassword, 
                        System.DateTime FileCheckTime, 
                        System.DateTime FileTime, 
                        string FileStatus, 
                        string MailAddress, 
                        string MailSubject, 
                        int LoadCount, 
                        bool IsBizDatePrior, 
                        bool IsEnabled, 
                        bool IsRunning) {
                tbInventorySubscriberRow rowtbInventorySubscriberRow = ((tbInventorySubscriberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InventorySubscriberID,
                        null,
                        null,
                        null,
                        FileHost,
                        FilePathName,
                        FileUserName,
                        FilePassword,
                        FileCheckTime,
                        FileTime,
                        FileStatus,
                        MailAddress,
                        MailSubject,
                        LoadCount,
                        IsBizDatePrior,
                        IsEnabled,
                        IsRunning};
                if ((parenttbInventoryFilePatternsRowBySubscriptionMasks != null)) {
                    columnValuesArray[1] = parenttbInventoryFilePatternsRowBySubscriptionMasks[0];
                }
                if ((parenttbInventorySubscriptionTypesRowBySubscriptionTypes != null)) {
                    columnValuesArray[2] = parenttbInventorySubscriptionTypesRowBySubscriptionTypes[0];
                }
                if ((parenttbDesksRowByDeskSubscriptions != null)) {
                    columnValuesArray[3] = parenttbDesksRowByDeskSubscriptions[0];
                }
                rowtbInventorySubscriberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbInventorySubscriberRow);
                return rowtbInventorySubscriberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow FindByInventorySubscriberID(long InventorySubscriberID) {
                return ((tbInventorySubscriberRow)(this.Rows.Find(new object[] {
                            InventorySubscriberID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbInventorySubscriberDataTable cln = ((tbInventorySubscriberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbInventorySubscriberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInventorySubscriberID = base.Columns["InventorySubscriberID"];
                this.columnInventoryFilePatternID = base.Columns["InventoryFilePatternID"];
                this.columnSubscriptionTypeID = base.Columns["SubscriptionTypeID"];
                this.columnDesk = base.Columns["Desk"];
                this.columnFileHost = base.Columns["FileHost"];
                this.columnFilePathName = base.Columns["FilePathName"];
                this.columnFileUserName = base.Columns["FileUserName"];
                this.columnFilePassword = base.Columns["FilePassword"];
                this.columnFileCheckTime = base.Columns["FileCheckTime"];
                this.columnFileTime = base.Columns["FileTime"];
                this.columnFileStatus = base.Columns["FileStatus"];
                this.columnMailAddress = base.Columns["MailAddress"];
                this.columnMailSubject = base.Columns["MailSubject"];
                this.columnLoadCount = base.Columns["LoadCount"];
                this.columnIsBizDatePrior = base.Columns["IsBizDatePrior"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsRunning = base.Columns["IsRunning"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInventorySubscriberID = new global::System.Data.DataColumn("InventorySubscriberID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySubscriberID);
                this.columnInventoryFilePatternID = new global::System.Data.DataColumn("InventoryFilePatternID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryFilePatternID);
                this.columnSubscriptionTypeID = new global::System.Data.DataColumn("SubscriptionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionTypeID);
                this.columnDesk = new global::System.Data.DataColumn("Desk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesk);
                this.columnFileHost = new global::System.Data.DataColumn("FileHost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHost);
                this.columnFilePathName = new global::System.Data.DataColumn("FilePathName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePathName);
                this.columnFileUserName = new global::System.Data.DataColumn("FileUserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileUserName);
                this.columnFilePassword = new global::System.Data.DataColumn("FilePassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePassword);
                this.columnFileCheckTime = new global::System.Data.DataColumn("FileCheckTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileCheckTime);
                this.columnFileTime = new global::System.Data.DataColumn("FileTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTime);
                this.columnFileStatus = new global::System.Data.DataColumn("FileStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileStatus);
                this.columnMailAddress = new global::System.Data.DataColumn("MailAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailAddress);
                this.columnMailSubject = new global::System.Data.DataColumn("MailSubject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailSubject);
                this.columnLoadCount = new global::System.Data.DataColumn("LoadCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadCount);
                this.columnIsBizDatePrior = new global::System.Data.DataColumn("IsBizDatePrior", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBizDatePrior);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsRunning = new global::System.Data.DataColumn("IsRunning", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRunning);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInventorySubscriberID}, true));
                this.columnInventorySubscriberID.AllowDBNull = false;
                this.columnInventorySubscriberID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow NewtbInventorySubscriberRow() {
                return ((tbInventorySubscriberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbInventorySubscriberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbInventorySubscriberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbInventorySubscriberRowChanged != null)) {
                    this.tbInventorySubscriberRowChanged(this, new tbInventorySubscriberRowChangeEvent(((tbInventorySubscriberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbInventorySubscriberRowChanging != null)) {
                    this.tbInventorySubscriberRowChanging(this, new tbInventorySubscriberRowChangeEvent(((tbInventorySubscriberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbInventorySubscriberRowDeleted != null)) {
                    this.tbInventorySubscriberRowDeleted(this, new tbInventorySubscriberRowChangeEvent(((tbInventorySubscriberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbInventorySubscriberRowDeleting != null)) {
                    this.tbInventorySubscriberRowDeleting(this, new tbInventorySubscriberRowChangeEvent(((tbInventorySubscriberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbInventorySubscriberRow(tbInventorySubscriberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbInventorySubscriberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbKeyValuesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnKeyValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesDataTable() {
                this.TableName = "tbKeyValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbKeyValuesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbKeyValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyValueColumn {
                get {
                    return this.columnKeyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesRow this[int index] {
                get {
                    return ((tbKeyValuesRow)(this.Rows[index]));
                }
            }
            
            public event tbKeyValuesRowChangeEventHandler tbKeyValuesRowChanging;
            
            public event tbKeyValuesRowChangeEventHandler tbKeyValuesRowChanged;
            
            public event tbKeyValuesRowChangeEventHandler tbKeyValuesRowDeleting;
            
            public event tbKeyValuesRowChangeEventHandler tbKeyValuesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbKeyValuesRow(tbKeyValuesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesRow AddtbKeyValuesRow(string KeyID, string KeyValue) {
                tbKeyValuesRow rowtbKeyValuesRow = ((tbKeyValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID,
                        KeyValue};
                rowtbKeyValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbKeyValuesRow);
                return rowtbKeyValuesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbKeyValuesDataTable cln = ((tbKeyValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbKeyValuesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
                this.columnKeyValue = base.Columns["KeyValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyValue = new global::System.Data.DataColumn("KeyValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesRow NewtbKeyValuesRow() {
                return ((tbKeyValuesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbKeyValuesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbKeyValuesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbKeyValuesRowChanged != null)) {
                    this.tbKeyValuesRowChanged(this, new tbKeyValuesRowChangeEvent(((tbKeyValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbKeyValuesRowChanging != null)) {
                    this.tbKeyValuesRowChanging(this, new tbKeyValuesRowChangeEvent(((tbKeyValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbKeyValuesRowDeleted != null)) {
                    this.tbKeyValuesRowDeleted(this, new tbKeyValuesRowChangeEvent(((tbKeyValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbKeyValuesRowDeleting != null)) {
                    this.tbKeyValuesRowDeleting(this, new tbKeyValuesRowChangeEvent(((tbKeyValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbKeyValuesRow(tbKeyValuesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbKeyValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbInventorySubscriptionTypesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInventorySubscriptionTypeID;
            
            private global::System.Data.DataColumn columnInventorySubscriptionTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesDataTable() {
                this.TableName = "tbInventorySubscriptionTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventorySubscriptionTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbInventorySubscriptionTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySubscriptionTypeIDColumn {
                get {
                    return this.columnInventorySubscriptionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySubscriptionTypeNameColumn {
                get {
                    return this.columnInventorySubscriptionTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRow this[int index] {
                get {
                    return ((tbInventorySubscriptionTypesRow)(this.Rows[index]));
                }
            }
            
            public event tbInventorySubscriptionTypesRowChangeEventHandler tbInventorySubscriptionTypesRowChanging;
            
            public event tbInventorySubscriptionTypesRowChangeEventHandler tbInventorySubscriptionTypesRowChanged;
            
            public event tbInventorySubscriptionTypesRowChangeEventHandler tbInventorySubscriptionTypesRowDeleting;
            
            public event tbInventorySubscriptionTypesRowChangeEventHandler tbInventorySubscriptionTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbInventorySubscriptionTypesRow(tbInventorySubscriptionTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRow AddtbInventorySubscriptionTypesRow(int InventorySubscriptionTypeID, string InventorySubscriptionTypeName) {
                tbInventorySubscriptionTypesRow rowtbInventorySubscriptionTypesRow = ((tbInventorySubscriptionTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InventorySubscriptionTypeID,
                        InventorySubscriptionTypeName};
                rowtbInventorySubscriptionTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbInventorySubscriptionTypesRow);
                return rowtbInventorySubscriptionTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbInventorySubscriptionTypesDataTable cln = ((tbInventorySubscriptionTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbInventorySubscriptionTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInventorySubscriptionTypeID = base.Columns["InventorySubscriptionTypeID"];
                this.columnInventorySubscriptionTypeName = base.Columns["InventorySubscriptionTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInventorySubscriptionTypeID = new global::System.Data.DataColumn("InventorySubscriptionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySubscriptionTypeID);
                this.columnInventorySubscriptionTypeName = new global::System.Data.DataColumn("InventorySubscriptionTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySubscriptionTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInventorySubscriptionTypeID}, false));
                this.columnInventorySubscriptionTypeID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRow NewtbInventorySubscriptionTypesRow() {
                return ((tbInventorySubscriptionTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbInventorySubscriptionTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbInventorySubscriptionTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbInventorySubscriptionTypesRowChanged != null)) {
                    this.tbInventorySubscriptionTypesRowChanged(this, new tbInventorySubscriptionTypesRowChangeEvent(((tbInventorySubscriptionTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbInventorySubscriptionTypesRowChanging != null)) {
                    this.tbInventorySubscriptionTypesRowChanging(this, new tbInventorySubscriptionTypesRowChangeEvent(((tbInventorySubscriptionTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbInventorySubscriptionTypesRowDeleted != null)) {
                    this.tbInventorySubscriptionTypesRowDeleted(this, new tbInventorySubscriptionTypesRowChangeEvent(((tbInventorySubscriptionTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbInventorySubscriptionTypesRowDeleting != null)) {
                    this.tbInventorySubscriptionTypesRowDeleting(this, new tbInventorySubscriptionTypesRowChangeEvent(((tbInventorySubscriptionTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbInventorySubscriptionTypesRow(tbInventorySubscriptionTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbInventorySubscriptionTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbInventoryFilePatternsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInventoryFilePatternID;
            
            private global::System.Data.DataColumn columnDesk;
            
            private global::System.Data.DataColumn columnHeaderRegEx;
            
            private global::System.Data.DataColumn columnDataRegEx;
            
            private global::System.Data.DataColumn columnTrailerRegEx;
            
            private global::System.Data.DataColumn columnDateRegEx;
            
            private global::System.Data.DataColumn columnAccountRegEx;
            
            private global::System.Data.DataColumn columnRowCountRegEx;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsDataTable() {
                this.TableName = "tbInventoryFilePatterns";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventoryFilePatternsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbInventoryFilePatternsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryFilePatternIDColumn {
                get {
                    return this.columnInventoryFilePatternID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeskColumn {
                get {
                    return this.columnDesk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderRegExColumn {
                get {
                    return this.columnHeaderRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataRegExColumn {
                get {
                    return this.columnDataRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerRegExColumn {
                get {
                    return this.columnTrailerRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRegExColumn {
                get {
                    return this.columnDateRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountRegExColumn {
                get {
                    return this.columnAccountRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowCountRegExColumn {
                get {
                    return this.columnRowCountRegEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow this[int index] {
                get {
                    return ((tbInventoryFilePatternsRow)(this.Rows[index]));
                }
            }
            
            public event tbInventoryFilePatternsRowChangeEventHandler tbInventoryFilePatternsRowChanging;
            
            public event tbInventoryFilePatternsRowChangeEventHandler tbInventoryFilePatternsRowChanged;
            
            public event tbInventoryFilePatternsRowChangeEventHandler tbInventoryFilePatternsRowDeleting;
            
            public event tbInventoryFilePatternsRowChangeEventHandler tbInventoryFilePatternsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbInventoryFilePatternsRow(tbInventoryFilePatternsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow AddtbInventoryFilePatternsRow(long InventoryFilePatternID, string Desk, string HeaderRegEx, string DataRegEx, string TrailerRegEx, string DateRegEx, string AccountRegEx, string RowCountRegEx) {
                tbInventoryFilePatternsRow rowtbInventoryFilePatternsRow = ((tbInventoryFilePatternsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InventoryFilePatternID,
                        Desk,
                        HeaderRegEx,
                        DataRegEx,
                        TrailerRegEx,
                        DateRegEx,
                        AccountRegEx,
                        RowCountRegEx};
                rowtbInventoryFilePatternsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbInventoryFilePatternsRow);
                return rowtbInventoryFilePatternsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow FindByInventoryFilePatternID(long InventoryFilePatternID) {
                return ((tbInventoryFilePatternsRow)(this.Rows.Find(new object[] {
                            InventoryFilePatternID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbInventoryFilePatternsDataTable cln = ((tbInventoryFilePatternsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbInventoryFilePatternsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInventoryFilePatternID = base.Columns["InventoryFilePatternID"];
                this.columnDesk = base.Columns["Desk"];
                this.columnHeaderRegEx = base.Columns["HeaderRegEx"];
                this.columnDataRegEx = base.Columns["DataRegEx"];
                this.columnTrailerRegEx = base.Columns["TrailerRegEx"];
                this.columnDateRegEx = base.Columns["DateRegEx"];
                this.columnAccountRegEx = base.Columns["AccountRegEx"];
                this.columnRowCountRegEx = base.Columns["RowCountRegEx"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInventoryFilePatternID = new global::System.Data.DataColumn("InventoryFilePatternID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryFilePatternID);
                this.columnDesk = new global::System.Data.DataColumn("Desk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesk);
                this.columnHeaderRegEx = new global::System.Data.DataColumn("HeaderRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderRegEx);
                this.columnDataRegEx = new global::System.Data.DataColumn("DataRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataRegEx);
                this.columnTrailerRegEx = new global::System.Data.DataColumn("TrailerRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerRegEx);
                this.columnDateRegEx = new global::System.Data.DataColumn("DateRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRegEx);
                this.columnAccountRegEx = new global::System.Data.DataColumn("AccountRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountRegEx);
                this.columnRowCountRegEx = new global::System.Data.DataColumn("RowCountRegEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowCountRegEx);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInventoryFilePatternID}, true));
                this.columnInventoryFilePatternID.AllowDBNull = false;
                this.columnInventoryFilePatternID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow NewtbInventoryFilePatternsRow() {
                return ((tbInventoryFilePatternsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbInventoryFilePatternsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbInventoryFilePatternsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbInventoryFilePatternsRowChanged != null)) {
                    this.tbInventoryFilePatternsRowChanged(this, new tbInventoryFilePatternsRowChangeEvent(((tbInventoryFilePatternsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbInventoryFilePatternsRowChanging != null)) {
                    this.tbInventoryFilePatternsRowChanging(this, new tbInventoryFilePatternsRowChangeEvent(((tbInventoryFilePatternsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbInventoryFilePatternsRowDeleted != null)) {
                    this.tbInventoryFilePatternsRowDeleted(this, new tbInventoryFilePatternsRowChangeEvent(((tbInventoryFilePatternsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbInventoryFilePatternsRowDeleting != null)) {
                    this.tbInventoryFilePatternsRowDeleting(this, new tbInventoryFilePatternsRowChangeEvent(((tbInventoryFilePatternsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbInventoryFilePatternsRow(tbInventoryFilePatternsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbInventoryFilePatternsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbInventoryImportExecutionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInventoryImportExecutionID;
            
            private global::System.Data.DataColumn columnSubscriberID;
            
            private global::System.Data.DataColumn columnFileTime;
            
            private global::System.Data.DataColumn columnExecutionTime;
            
            private global::System.Data.DataColumn columnExecutionStatus;
            
            private global::System.Data.DataColumn columnExecutionRecordsImported;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionDataTable() {
                this.TableName = "tbInventoryImportExecution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventoryImportExecutionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbInventoryImportExecutionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryImportExecutionIDColumn {
                get {
                    return this.columnInventoryImportExecutionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriberIDColumn {
                get {
                    return this.columnSubscriberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTimeColumn {
                get {
                    return this.columnFileTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionTimeColumn {
                get {
                    return this.columnExecutionTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusColumn {
                get {
                    return this.columnExecutionStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionRecordsImportedColumn {
                get {
                    return this.columnExecutionRecordsImported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow this[int index] {
                get {
                    return ((tbInventoryImportExecutionRow)(this.Rows[index]));
                }
            }
            
            public event tbInventoryImportExecutionRowChangeEventHandler tbInventoryImportExecutionRowChanging;
            
            public event tbInventoryImportExecutionRowChangeEventHandler tbInventoryImportExecutionRowChanged;
            
            public event tbInventoryImportExecutionRowChangeEventHandler tbInventoryImportExecutionRowDeleting;
            
            public event tbInventoryImportExecutionRowChangeEventHandler tbInventoryImportExecutionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbInventoryImportExecutionRow(tbInventoryImportExecutionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow AddtbInventoryImportExecutionRow(long InventoryImportExecutionID, tbInventorySubscriberRow parenttbInventorySubscriberRowBySubscriptionExecutions, System.DateTime FileTime, System.DateTime ExecutionTime, string ExecutionStatus, int ExecutionRecordsImported) {
                tbInventoryImportExecutionRow rowtbInventoryImportExecutionRow = ((tbInventoryImportExecutionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InventoryImportExecutionID,
                        null,
                        FileTime,
                        ExecutionTime,
                        ExecutionStatus,
                        ExecutionRecordsImported};
                if ((parenttbInventorySubscriberRowBySubscriptionExecutions != null)) {
                    columnValuesArray[1] = parenttbInventorySubscriberRowBySubscriptionExecutions[0];
                }
                rowtbInventoryImportExecutionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbInventoryImportExecutionRow);
                return rowtbInventoryImportExecutionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow FindByInventoryImportExecutionID(long InventoryImportExecutionID) {
                return ((tbInventoryImportExecutionRow)(this.Rows.Find(new object[] {
                            InventoryImportExecutionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbInventoryImportExecutionDataTable cln = ((tbInventoryImportExecutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbInventoryImportExecutionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInventoryImportExecutionID = base.Columns["InventoryImportExecutionID"];
                this.columnSubscriberID = base.Columns["SubscriberID"];
                this.columnFileTime = base.Columns["FileTime"];
                this.columnExecutionTime = base.Columns["ExecutionTime"];
                this.columnExecutionStatus = base.Columns["ExecutionStatus"];
                this.columnExecutionRecordsImported = base.Columns["ExecutionRecordsImported"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInventoryImportExecutionID = new global::System.Data.DataColumn("InventoryImportExecutionID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryImportExecutionID);
                this.columnSubscriberID = new global::System.Data.DataColumn("SubscriberID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriberID);
                this.columnFileTime = new global::System.Data.DataColumn("FileTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTime);
                this.columnExecutionTime = new global::System.Data.DataColumn("ExecutionTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionTime);
                this.columnExecutionStatus = new global::System.Data.DataColumn("ExecutionStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatus);
                this.columnExecutionRecordsImported = new global::System.Data.DataColumn("ExecutionRecordsImported", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionRecordsImported);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInventoryImportExecutionID}, true));
                this.columnInventoryImportExecutionID.AllowDBNull = false;
                this.columnInventoryImportExecutionID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow NewtbInventoryImportExecutionRow() {
                return ((tbInventoryImportExecutionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbInventoryImportExecutionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbInventoryImportExecutionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbInventoryImportExecutionRowChanged != null)) {
                    this.tbInventoryImportExecutionRowChanged(this, new tbInventoryImportExecutionRowChangeEvent(((tbInventoryImportExecutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbInventoryImportExecutionRowChanging != null)) {
                    this.tbInventoryImportExecutionRowChanging(this, new tbInventoryImportExecutionRowChangeEvent(((tbInventoryImportExecutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbInventoryImportExecutionRowDeleted != null)) {
                    this.tbInventoryImportExecutionRowDeleted(this, new tbInventoryImportExecutionRowChangeEvent(((tbInventoryImportExecutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbInventoryImportExecutionRowDeleting != null)) {
                    this.tbInventoryImportExecutionRowDeleting(this, new tbInventoryImportExecutionRowChangeEvent(((tbInventoryImportExecutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbInventoryImportExecutionRow(tbInventoryImportExecutionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbInventoryImportExecutionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbDesksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDesk;
            
            private global::System.Data.DataColumn columnFirmCode;
            
            private global::System.Data.DataColumn columnCountryCode;
            
            private global::System.Data.DataColumn columnDeskTypeCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksDataTable() {
                this.TableName = "tbDesks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbDesksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbDesksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeskColumn {
                get {
                    return this.columnDesk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirmCodeColumn {
                get {
                    return this.columnFirmCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryCodeColumn {
                get {
                    return this.columnCountryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeskTypeCodeColumn {
                get {
                    return this.columnDeskTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRow this[int index] {
                get {
                    return ((tbDesksRow)(this.Rows[index]));
                }
            }
            
            public event tbDesksRowChangeEventHandler tbDesksRowChanging;
            
            public event tbDesksRowChangeEventHandler tbDesksRowChanged;
            
            public event tbDesksRowChangeEventHandler tbDesksRowDeleting;
            
            public event tbDesksRowChangeEventHandler tbDesksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbDesksRow(tbDesksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRow AddtbDesksRow(string Desk, string FirmCode, string CountryCode, string DeskTypeCode) {
                tbDesksRow rowtbDesksRow = ((tbDesksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Desk,
                        FirmCode,
                        CountryCode,
                        DeskTypeCode};
                rowtbDesksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbDesksRow);
                return rowtbDesksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbDesksDataTable cln = ((tbDesksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbDesksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDesk = base.Columns["Desk"];
                this.columnFirmCode = base.Columns["FirmCode"];
                this.columnCountryCode = base.Columns["CountryCode"];
                this.columnDeskTypeCode = base.Columns["DeskTypeCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDesk = new global::System.Data.DataColumn("Desk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesk);
                this.columnFirmCode = new global::System.Data.DataColumn("FirmCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirmCode);
                this.columnCountryCode = new global::System.Data.DataColumn("CountryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryCode);
                this.columnDeskTypeCode = new global::System.Data.DataColumn("DeskTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeskTypeCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDesk}, false));
                this.columnDesk.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRow NewtbDesksRow() {
                return ((tbDesksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbDesksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbDesksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbDesksRowChanged != null)) {
                    this.tbDesksRowChanged(this, new tbDesksRowChangeEvent(((tbDesksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbDesksRowChanging != null)) {
                    this.tbDesksRowChanging(this, new tbDesksRowChangeEvent(((tbDesksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbDesksRowDeleted != null)) {
                    this.tbDesksRowDeleted(this, new tbDesksRowChangeEvent(((tbDesksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbDesksRowDeleting != null)) {
                    this.tbDesksRowDeleting(this, new tbDesksRowChangeEvent(((tbDesksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbDesksRow(tbDesksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ImportSubscriptionSet ds = new ImportSubscriptionSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbDesksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbInventorySubscriberRow : global::System.Data.DataRow {
            
            private tbInventorySubscriberDataTable tabletbInventorySubscriber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventorySubscriberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbInventorySubscriber = ((tbInventorySubscriberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InventorySubscriberID {
                get {
                    return ((long)(this[this.tabletbInventorySubscriber.InventorySubscriberIDColumn]));
                }
                set {
                    this[this.tabletbInventorySubscriber.InventorySubscriberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InventoryFilePatternID {
                get {
                    try {
                        return ((long)(this[this.tabletbInventorySubscriber.InventoryFilePatternIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InventoryFilePatternID\' in table \'tbInventorySubscriber\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.InventoryFilePatternIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubscriptionTypeID {
                get {
                    try {
                        return ((int)(this[this.tabletbInventorySubscriber.SubscriptionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubscriptionTypeID\' in table \'tbInventorySubscriber\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.SubscriptionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Desk {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.DeskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Desk\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.DeskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileHost {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.FileHostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileHost\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FileHostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePathName {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.FilePathNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePathName\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FilePathNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileUserName {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.FileUserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileUserName\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FileUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePassword {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.FilePasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePassword\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FilePasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FileCheckTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletbInventorySubscriber.FileCheckTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileCheckTime\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FileCheckTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FileTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletbInventorySubscriber.FileTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileTime\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FileTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileStatus {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.FileStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileStatus\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.FileStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailAddress {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.MailAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MailAddress\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.MailAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailSubject {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriber.MailSubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MailSubject\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.MailSubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoadCount {
                get {
                    try {
                        return ((int)(this[this.tabletbInventorySubscriber.LoadCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadCount\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.LoadCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBizDatePrior {
                get {
                    try {
                        return ((bool)(this[this.tabletbInventorySubscriber.IsBizDatePriorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBizDatePrior\' in table \'tbInventorySubscriber\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.IsBizDatePriorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tabletbInventorySubscriber.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunning {
                get {
                    try {
                        return ((bool)(this[this.tabletbInventorySubscriber.IsRunningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRunning\' in table \'tbInventorySubscriber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriber.IsRunningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRow tbDesksRow {
                get {
                    return ((tbDesksRow)(this.GetParentRow(this.Table.ParentRelations["DeskSubscriptions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DeskSubscriptions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow tbInventoryFilePatternsRow {
                get {
                    return ((tbInventoryFilePatternsRow)(this.GetParentRow(this.Table.ParentRelations["SubscriptionMasks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SubscriptionMasks"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRow tbInventorySubscriptionTypesRow {
                get {
                    return ((tbInventorySubscriptionTypesRow)(this.GetParentRow(this.Table.ParentRelations["SubscriptionTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SubscriptionTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryFilePatternIDNull() {
                return this.IsNull(this.tabletbInventorySubscriber.InventoryFilePatternIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryFilePatternIDNull() {
                this[this.tabletbInventorySubscriber.InventoryFilePatternIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubscriptionTypeIDNull() {
                return this.IsNull(this.tabletbInventorySubscriber.SubscriptionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubscriptionTypeIDNull() {
                this[this.tabletbInventorySubscriber.SubscriptionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeskNull() {
                return this.IsNull(this.tabletbInventorySubscriber.DeskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeskNull() {
                this[this.tabletbInventorySubscriber.DeskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileHostNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FileHostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileHostNull() {
                this[this.tabletbInventorySubscriber.FileHostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNameNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FilePathNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNameNull() {
                this[this.tabletbInventorySubscriber.FilePathNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileUserNameNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FileUserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileUserNameNull() {
                this[this.tabletbInventorySubscriber.FileUserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePasswordNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FilePasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePasswordNull() {
                this[this.tabletbInventorySubscriber.FilePasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileCheckTimeNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FileCheckTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileCheckTimeNull() {
                this[this.tabletbInventorySubscriber.FileCheckTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileTimeNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FileTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileTimeNull() {
                this[this.tabletbInventorySubscriber.FileTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileStatusNull() {
                return this.IsNull(this.tabletbInventorySubscriber.FileStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileStatusNull() {
                this[this.tabletbInventorySubscriber.FileStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailAddressNull() {
                return this.IsNull(this.tabletbInventorySubscriber.MailAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailAddressNull() {
                this[this.tabletbInventorySubscriber.MailAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailSubjectNull() {
                return this.IsNull(this.tabletbInventorySubscriber.MailSubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailSubjectNull() {
                this[this.tabletbInventorySubscriber.MailSubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadCountNull() {
                return this.IsNull(this.tabletbInventorySubscriber.LoadCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadCountNull() {
                this[this.tabletbInventorySubscriber.LoadCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBizDatePriorNull() {
                return this.IsNull(this.tabletbInventorySubscriber.IsBizDatePriorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBizDatePriorNull() {
                this[this.tabletbInventorySubscriber.IsBizDatePriorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tabletbInventorySubscriber.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tabletbInventorySubscriber.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRunningNull() {
                return this.IsNull(this.tabletbInventorySubscriber.IsRunningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRunningNull() {
                this[this.tabletbInventorySubscriber.IsRunningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow[] GettbInventoryImportExecutionRows() {
                if ((this.Table.ChildRelations["SubscriptionExecutions"] == null)) {
                    return new tbInventoryImportExecutionRow[0];
                }
                else {
                    return ((tbInventoryImportExecutionRow[])(base.GetChildRows(this.Table.ChildRelations["SubscriptionExecutions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbKeyValuesRow : global::System.Data.DataRow {
            
            private tbKeyValuesDataTable tabletbKeyValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbKeyValuesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbKeyValues = ((tbKeyValuesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyID {
                get {
                    try {
                        return ((string)(this[this.tabletbKeyValues.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'tbKeyValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbKeyValues.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyValue {
                get {
                    try {
                        return ((string)(this[this.tabletbKeyValues.KeyValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyValue\' in table \'tbKeyValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbKeyValues.KeyValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tabletbKeyValues.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tabletbKeyValues.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyValueNull() {
                return this.IsNull(this.tabletbKeyValues.KeyValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyValueNull() {
                this[this.tabletbKeyValues.KeyValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbInventorySubscriptionTypesRow : global::System.Data.DataRow {
            
            private tbInventorySubscriptionTypesDataTable tabletbInventorySubscriptionTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventorySubscriptionTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbInventorySubscriptionTypes = ((tbInventorySubscriptionTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InventorySubscriptionTypeID {
                get {
                    try {
                        return ((int)(this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InventorySubscriptionTypeID\' in table \'tbInventorySubscript" +
                                "ionTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventorySubscriptionTypeName {
                get {
                    try {
                        return ((string)(this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InventorySubscriptionTypeName\' in table \'tbInventorySubscri" +
                                "ptionTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventorySubscriptionTypeIDNull() {
                return this.IsNull(this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventorySubscriptionTypeIDNull() {
                this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventorySubscriptionTypeNameNull() {
                return this.IsNull(this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventorySubscriptionTypeNameNull() {
                this[this.tabletbInventorySubscriptionTypes.InventorySubscriptionTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow[] GettbInventorySubscriberRows() {
                if ((this.Table.ChildRelations["SubscriptionTypes"] == null)) {
                    return new tbInventorySubscriberRow[0];
                }
                else {
                    return ((tbInventorySubscriberRow[])(base.GetChildRows(this.Table.ChildRelations["SubscriptionTypes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbInventoryFilePatternsRow : global::System.Data.DataRow {
            
            private tbInventoryFilePatternsDataTable tabletbInventoryFilePatterns;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventoryFilePatternsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbInventoryFilePatterns = ((tbInventoryFilePatternsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InventoryFilePatternID {
                get {
                    return ((long)(this[this.tabletbInventoryFilePatterns.InventoryFilePatternIDColumn]));
                }
                set {
                    this[this.tabletbInventoryFilePatterns.InventoryFilePatternIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Desk {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.DeskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Desk\' in table \'tbInventoryFilePatterns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.DeskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.HeaderRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderRegEx\' in table \'tbInventoryFilePatterns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.HeaderRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.DataRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataRegEx\' in table \'tbInventoryFilePatterns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.DataRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.TrailerRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerRegEx\' in table \'tbInventoryFilePatterns\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.TrailerRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.DateRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRegEx\' in table \'tbInventoryFilePatterns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.DateRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.AccountRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountRegEx\' in table \'tbInventoryFilePatterns\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.AccountRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RowCountRegEx {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryFilePatterns.RowCountRegExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowCountRegEx\' in table \'tbInventoryFilePatterns\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletbInventoryFilePatterns.RowCountRegExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeskNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.DeskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeskNull() {
                this[this.tabletbInventoryFilePatterns.DeskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.HeaderRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderRegExNull() {
                this[this.tabletbInventoryFilePatterns.HeaderRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.DataRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataRegExNull() {
                this[this.tabletbInventoryFilePatterns.DataRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.TrailerRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerRegExNull() {
                this[this.tabletbInventoryFilePatterns.TrailerRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.DateRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRegExNull() {
                this[this.tabletbInventoryFilePatterns.DateRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.AccountRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountRegExNull() {
                this[this.tabletbInventoryFilePatterns.AccountRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowCountRegExNull() {
                return this.IsNull(this.tabletbInventoryFilePatterns.RowCountRegExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowCountRegExNull() {
                this[this.tabletbInventoryFilePatterns.RowCountRegExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow[] GettbInventorySubscriberRows() {
                if ((this.Table.ChildRelations["SubscriptionMasks"] == null)) {
                    return new tbInventorySubscriberRow[0];
                }
                else {
                    return ((tbInventorySubscriberRow[])(base.GetChildRows(this.Table.ChildRelations["SubscriptionMasks"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbInventoryImportExecutionRow : global::System.Data.DataRow {
            
            private tbInventoryImportExecutionDataTable tabletbInventoryImportExecution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbInventoryImportExecutionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbInventoryImportExecution = ((tbInventoryImportExecutionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InventoryImportExecutionID {
                get {
                    return ((long)(this[this.tabletbInventoryImportExecution.InventoryImportExecutionIDColumn]));
                }
                set {
                    this[this.tabletbInventoryImportExecution.InventoryImportExecutionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubscriberID {
                get {
                    try {
                        return ((long)(this[this.tabletbInventoryImportExecution.SubscriberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubscriberID\' in table \'tbInventoryImportExecution\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryImportExecution.SubscriberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FileTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletbInventoryImportExecution.FileTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileTime\' in table \'tbInventoryImportExecution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryImportExecution.FileTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExecutionTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletbInventoryImportExecution.ExecutionTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionTime\' in table \'tbInventoryImportExecution\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryImportExecution.ExecutionTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutionStatus {
                get {
                    try {
                        return ((string)(this[this.tabletbInventoryImportExecution.ExecutionStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStatus\' in table \'tbInventoryImportExecution\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryImportExecution.ExecutionStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionRecordsImported {
                get {
                    try {
                        return ((int)(this[this.tabletbInventoryImportExecution.ExecutionRecordsImportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionRecordsImported\' in table \'tbInventoryImportExecut" +
                                "ion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbInventoryImportExecution.ExecutionRecordsImportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow tbInventorySubscriberRow {
                get {
                    return ((tbInventorySubscriberRow)(this.GetParentRow(this.Table.ParentRelations["SubscriptionExecutions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SubscriptionExecutions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubscriberIDNull() {
                return this.IsNull(this.tabletbInventoryImportExecution.SubscriberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubscriberIDNull() {
                this[this.tabletbInventoryImportExecution.SubscriberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileTimeNull() {
                return this.IsNull(this.tabletbInventoryImportExecution.FileTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileTimeNull() {
                this[this.tabletbInventoryImportExecution.FileTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionTimeNull() {
                return this.IsNull(this.tabletbInventoryImportExecution.ExecutionTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionTimeNull() {
                this[this.tabletbInventoryImportExecution.ExecutionTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStatusNull() {
                return this.IsNull(this.tabletbInventoryImportExecution.ExecutionStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStatusNull() {
                this[this.tabletbInventoryImportExecution.ExecutionStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionRecordsImportedNull() {
                return this.IsNull(this.tabletbInventoryImportExecution.ExecutionRecordsImportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionRecordsImportedNull() {
                this[this.tabletbInventoryImportExecution.ExecutionRecordsImportedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbDesksRow : global::System.Data.DataRow {
            
            private tbDesksDataTable tabletbDesks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbDesksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbDesks = ((tbDesksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Desk {
                get {
                    try {
                        return ((string)(this[this.tabletbDesks.DeskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Desk\' in table \'tbDesks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbDesks.DeskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirmCode {
                get {
                    try {
                        return ((string)(this[this.tabletbDesks.FirmCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirmCode\' in table \'tbDesks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbDesks.FirmCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryCode {
                get {
                    try {
                        return ((string)(this[this.tabletbDesks.CountryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryCode\' in table \'tbDesks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbDesks.CountryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeskTypeCode {
                get {
                    try {
                        return ((string)(this[this.tabletbDesks.DeskTypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeskTypeCode\' in table \'tbDesks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbDesks.DeskTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeskNull() {
                return this.IsNull(this.tabletbDesks.DeskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeskNull() {
                this[this.tabletbDesks.DeskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirmCodeNull() {
                return this.IsNull(this.tabletbDesks.FirmCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirmCodeNull() {
                this[this.tabletbDesks.FirmCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryCodeNull() {
                return this.IsNull(this.tabletbDesks.CountryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryCodeNull() {
                this[this.tabletbDesks.CountryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeskTypeCodeNull() {
                return this.IsNull(this.tabletbDesks.DeskTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeskTypeCodeNull() {
                this[this.tabletbDesks.DeskTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow[] GettbInventorySubscriberRows() {
                if ((this.Table.ChildRelations["DeskSubscriptions"] == null)) {
                    return new tbInventorySubscriberRow[0];
                }
                else {
                    return ((tbInventorySubscriberRow[])(base.GetChildRows(this.Table.ChildRelations["DeskSubscriptions"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbInventorySubscriberRowChangeEvent : global::System.EventArgs {
            
            private tbInventorySubscriberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRowChangeEvent(tbInventorySubscriberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbKeyValuesRowChangeEvent : global::System.EventArgs {
            
            private tbKeyValuesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesRowChangeEvent(tbKeyValuesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbKeyValuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbInventorySubscriptionTypesRowChangeEvent : global::System.EventArgs {
            
            private tbInventorySubscriptionTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRowChangeEvent(tbInventorySubscriptionTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventorySubscriptionTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbInventoryFilePatternsRowChangeEvent : global::System.EventArgs {
            
            private tbInventoryFilePatternsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRowChangeEvent(tbInventoryFilePatternsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryFilePatternsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbInventoryImportExecutionRowChangeEvent : global::System.EventArgs {
            
            private tbInventoryImportExecutionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRowChangeEvent(tbInventoryImportExecutionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbInventoryImportExecutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbDesksRowChangeEvent : global::System.EventArgs {
            
            private tbDesksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRowChangeEvent(tbDesksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbDesksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591