//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace StockLoan.Main.serviceGenericTrade {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ITradeGeneric", Namespace="http://tempuri.org/")]
    public partial class TradeGeneric : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TradeNewRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeReturnRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeNewResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeRevaluationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeRevaluationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeSystemsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback TradeCounterPartiesGetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TradeGeneric() {
            this.Url = global::StockLoan.Main.Properties.Settings.Default.StockLoan_MainServer_serviceGenericTrade_TradeGeneric;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TradeNewRequestCompletedEventHandler TradeNewRequestCompleted;
        
        /// <remarks/>
        public event TradeReturnRequestCompletedEventHandler TradeReturnRequestCompleted;
        
        /// <remarks/>
        public event TradeNewResponseCompletedEventHandler TradeNewResponseCompleted;
        
        /// <remarks/>
        public event TradeRevaluationRequestCompletedEventHandler TradeRevaluationRequestCompleted;
        
        /// <remarks/>
        public event TradeRevaluationResponseCompletedEventHandler TradeRevaluationResponseCompleted;
        
        /// <remarks/>
        public event TradeSystemsGetCompletedEventHandler TradeSystemsGetCompleted;
        
        /// <remarks/>
        public event TradeCounterPartiesGetCompletedEventHandler TradeCounterPartiesGetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeNewRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TradeNewRequest(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string correspondentCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string contractId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string system, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isin, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sedol, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string exchangeCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string book, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string counterParty, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string counterPartyCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string buySellCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string quantity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string price, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cancelledFlag, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string capacity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deliveryRisk, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientMarketIndicator, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dealingCurrency, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string countryOfSettlement, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string placeOfSettlement, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string businessReason, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sourceEntity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string marginRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tradeDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fixedInterestRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string collateralised, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clearingSystem) {
            object[] results = this.Invoke("TradeNewRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeNewRequest(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("TradeNewRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTradeNewRequest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TradeNewRequestAsync(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem) {
            this.TradeNewRequestAsync(correspondentCode, contractId, system, isin, sedol, exchangeCode, book, counterParty, counterPartyCode, buySellCode, quantity, price, cancelledFlag, capacity, deliveryRisk, clientMarketIndicator, dealingCurrency, countryOfSettlement, placeOfSettlement, businessReason, sourceEntity, marginRate, startDate, endDate, tradeDate, fixedInterestRate, collateralised, clearingSystem, null);
        }
        
        /// <remarks/>
        public void TradeNewRequestAsync(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem, 
                    object userState) {
            if ((this.TradeNewRequestOperationCompleted == null)) {
                this.TradeNewRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeNewRequestOperationCompleted);
            }
            this.InvokeAsync("TradeNewRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem}, this.TradeNewRequestOperationCompleted, userState);
        }
        
        private void OnTradeNewRequestOperationCompleted(object arg) {
            if ((this.TradeNewRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeNewRequestCompleted(this, new TradeNewRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeReturnRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TradeReturnRequest(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string correspondentCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string contractId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string system, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isin, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sedol, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string exchangeCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string book, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string counterParty, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string counterPartyCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string buySellCode, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string quantity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string price, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cancelledFlag, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string capacity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deliveryRisk, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientMarketIndicator, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dealingCurrency, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string countryOfSettlement, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string placeOfSettlement, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string businessReason, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sourceEntity, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string marginRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tradeDate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fixedInterestRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string collateralised, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clearingSystem) {
            object[] results = this.Invoke("TradeReturnRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeReturnRequest(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("TradeReturnRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTradeReturnRequest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TradeReturnRequestAsync(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem) {
            this.TradeReturnRequestAsync(correspondentCode, contractId, system, isin, sedol, exchangeCode, book, counterParty, counterPartyCode, buySellCode, quantity, price, cancelledFlag, capacity, deliveryRisk, clientMarketIndicator, dealingCurrency, countryOfSettlement, placeOfSettlement, businessReason, sourceEntity, marginRate, startDate, endDate, tradeDate, fixedInterestRate, collateralised, clearingSystem, null);
        }
        
        /// <remarks/>
        public void TradeReturnRequestAsync(
                    string correspondentCode, 
                    string contractId, 
                    string system, 
                    string isin, 
                    string sedol, 
                    string exchangeCode, 
                    string book, 
                    string counterParty, 
                    string counterPartyCode, 
                    string buySellCode, 
                    string quantity, 
                    string price, 
                    string cancelledFlag, 
                    string capacity, 
                    string deliveryRisk, 
                    string clientMarketIndicator, 
                    string dealingCurrency, 
                    string countryOfSettlement, 
                    string placeOfSettlement, 
                    string businessReason, 
                    string sourceEntity, 
                    string marginRate, 
                    string startDate, 
                    string endDate, 
                    string tradeDate, 
                    string fixedInterestRate, 
                    string collateralised, 
                    string clearingSystem, 
                    object userState) {
            if ((this.TradeReturnRequestOperationCompleted == null)) {
                this.TradeReturnRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeReturnRequestOperationCompleted);
            }
            this.InvokeAsync("TradeReturnRequest", new object[] {
                        correspondentCode,
                        contractId,
                        system,
                        isin,
                        sedol,
                        exchangeCode,
                        book,
                        counterParty,
                        counterPartyCode,
                        buySellCode,
                        quantity,
                        price,
                        cancelledFlag,
                        capacity,
                        deliveryRisk,
                        clientMarketIndicator,
                        dealingCurrency,
                        countryOfSettlement,
                        placeOfSettlement,
                        businessReason,
                        sourceEntity,
                        marginRate,
                        startDate,
                        endDate,
                        tradeDate,
                        fixedInterestRate,
                        collateralised,
                        clearingSystem}, this.TradeReturnRequestOperationCompleted, userState);
        }
        
        private void OnTradeReturnRequestOperationCompleted(object arg) {
            if ((this.TradeReturnRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeReturnRequestCompleted(this, new TradeReturnRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeNewResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TradeNewResponse() {
            this.Invoke("TradeNewResponse", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeNewResponse(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TradeNewResponse", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTradeNewResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TradeNewResponseAsync() {
            this.TradeNewResponseAsync(null);
        }
        
        /// <remarks/>
        public void TradeNewResponseAsync(object userState) {
            if ((this.TradeNewResponseOperationCompleted == null)) {
                this.TradeNewResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeNewResponseOperationCompleted);
            }
            this.InvokeAsync("TradeNewResponse", new object[0], this.TradeNewResponseOperationCompleted, userState);
        }
        
        private void OnTradeNewResponseOperationCompleted(object arg) {
            if ((this.TradeNewResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeNewResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeRevaluationRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TradeRevaluationRequest() {
            this.Invoke("TradeRevaluationRequest", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeRevaluationRequest(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TradeRevaluationRequest", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTradeRevaluationRequest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TradeRevaluationRequestAsync() {
            this.TradeRevaluationRequestAsync(null);
        }
        
        /// <remarks/>
        public void TradeRevaluationRequestAsync(object userState) {
            if ((this.TradeRevaluationRequestOperationCompleted == null)) {
                this.TradeRevaluationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeRevaluationRequestOperationCompleted);
            }
            this.InvokeAsync("TradeRevaluationRequest", new object[0], this.TradeRevaluationRequestOperationCompleted, userState);
        }
        
        private void OnTradeRevaluationRequestOperationCompleted(object arg) {
            if ((this.TradeRevaluationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeRevaluationRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeRevaluationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TradeRevaluationResponse() {
            this.Invoke("TradeRevaluationResponse", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeRevaluationResponse(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TradeRevaluationResponse", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTradeRevaluationResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TradeRevaluationResponseAsync() {
            this.TradeRevaluationResponseAsync(null);
        }
        
        /// <remarks/>
        public void TradeRevaluationResponseAsync(object userState) {
            if ((this.TradeRevaluationResponseOperationCompleted == null)) {
                this.TradeRevaluationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeRevaluationResponseOperationCompleted);
            }
            this.InvokeAsync("TradeRevaluationResponse", new object[0], this.TradeRevaluationResponseOperationCompleted, userState);
        }
        
        private void OnTradeRevaluationResponseOperationCompleted(object arg) {
            if ((this.TradeRevaluationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeRevaluationResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeSystemsGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet TradeSystemsGet() {
            object[] results = this.Invoke("TradeSystemsGet", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeSystemsGet(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TradeSystemsGet", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndTradeSystemsGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TradeSystemsGetAsync() {
            this.TradeSystemsGetAsync(null);
        }
        
        /// <remarks/>
        public void TradeSystemsGetAsync(object userState) {
            if ((this.TradeSystemsGetOperationCompleted == null)) {
                this.TradeSystemsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeSystemsGetOperationCompleted);
            }
            this.InvokeAsync("TradeSystemsGet", new object[0], this.TradeSystemsGetOperationCompleted, userState);
        }
        
        private void OnTradeSystemsGetOperationCompleted(object arg) {
            if ((this.TradeSystemsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeSystemsGetCompleted(this, new TradeSystemsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ITradeGeneric/TradeCounterPartiesGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet TradeCounterPartiesGet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string system) {
            object[] results = this.Invoke("TradeCounterPartiesGet", new object[] {
                        system});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTradeCounterPartiesGet(string system, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TradeCounterPartiesGet", new object[] {
                        system}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndTradeCounterPartiesGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TradeCounterPartiesGetAsync(string system) {
            this.TradeCounterPartiesGetAsync(system, null);
        }
        
        /// <remarks/>
        public void TradeCounterPartiesGetAsync(string system, object userState) {
            if ((this.TradeCounterPartiesGetOperationCompleted == null)) {
                this.TradeCounterPartiesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTradeCounterPartiesGetOperationCompleted);
            }
            this.InvokeAsync("TradeCounterPartiesGet", new object[] {
                        system}, this.TradeCounterPartiesGetOperationCompleted, userState);
        }
        
        private void OnTradeCounterPartiesGetOperationCompleted(object arg) {
            if ((this.TradeCounterPartiesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TradeCounterPartiesGetCompleted(this, new TradeCounterPartiesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeNewRequestCompletedEventHandler(object sender, TradeNewRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradeNewRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TradeNewRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeReturnRequestCompletedEventHandler(object sender, TradeReturnRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradeReturnRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TradeReturnRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeNewResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeRevaluationRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeRevaluationResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeSystemsGetCompletedEventHandler(object sender, TradeSystemsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradeSystemsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TradeSystemsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TradeCounterPartiesGetCompletedEventHandler(object sender, TradeCounterPartiesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradeCounterPartiesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TradeCounterPartiesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591