<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.Win.C1Schedule.2</name>
  </assembly>
  <members>
    <member name="T:C1.C1Schedule.C1BindingSource">
      <summary>
            The <see cref="T:C1.C1Schedule.C1BindingSource" /> encapsulates the data source. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource" /> class. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource" /> class
            with the specified data source and data member values.
            </summary>
      <param name="dataSource">The <see cref="T:System.Object" /> object to use as data source.</param>
      <param name="dataMember">The data member name.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Add(System.Object)">
      <summary>
            Adds an existing item to the internal list.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to add.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.AddNew">
      <summary>
            Adds a new item to the underlying list. 
            </summary>
      <returns>The item added to the list.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.FinishAddNew">
      <summary>
            Commits a pending new item to the collection. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.BeginEdit(System.Object)">
      <summary>
            Starts an edit operation on the specified object.
            </summary>
      <param name="item">The object on which to start operation.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.EndEdit(System.Object)">
      <summary>
            Applies pending changes to the underlying data source.
            </summary>
      <param name="item">The object on which to apply pending changes.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Clear">
      <summary>
            Removes all elements from the list. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Contains(System.Object)">
      <summary>
            Determines whether an object is an item in the list. 
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <returns>True if the <see cref="T:System.Object" /> is found in the list; 
            otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the contents of the <see cref="P:C1.C1Schedule.C1BindingSource.List" /> to the specified array, 
            starting at the specified index value. 
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the 
            destination of the elements copied from <see cref="T:System.Collections.ICollection" />. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in the array at which the copying begins.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:C1.C1Schedule.C1BindingSource" />.
            </summary>
      <param name="disposing">True if managed resources should be disposed; 
            otherwise, false.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
            Searches for the index of the item that has the given property descriptor. 
            </summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> 
            to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>The index of the item that has the given 
            <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Find(System.String,System.Object)">
      <summary>
            Returns the index of the item in the list with the specified property name and value. 
            </summary>
      <param name="propertyName">The property name to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>
            The index of the item in the list with the specified property name and value.
            </returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetEnumerator">
      <summary>
            Retrieves an enumerator for the <see cref="P:C1.C1Schedule.C1BindingSource.List" />. 
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object that can 
            be used to iterate through the collection.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Retrieves an array of PropertyDescriptor objects representing 
            the bindable properties of the data source list type.
            </summary>
      <param name="listAccessors">An array of 
            <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects to find in 
            the collection as bindable. This can be null.</param>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 
            that represents the properties on each item used to bind data.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Gets the name of the list supplying data for the binding. 
            </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> 
            objects, the list name for which is returned. This can be null.</param>
      <returns>The name of the list.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.IndexOf(System.Object)">
      <summary>
            Searches for the specified object and returns the index of the first 
            occurrence within the entire list.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to index.</param>
      <returns>The index of <i>value</i> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item into the list at the specified index.
            </summary>
      <param name="index">The zero-based index at which 
            <i>value</i> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnDataMemberChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnDataSourceChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Remove(System.Object)">
      <summary>
            Removes the specified item from the list. 
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index in the list.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.ResetBindings(System.Boolean)">
      <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource" /> to reread 
            all the items in the list and refresh their displayed values. 
            </summary>
      <param name="metadataChanged">The <see cref="T:System.Boolean" /> value specifying
            whether the metadata has been changed.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.ResetItem(System.Int32)">
      <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource" /> to re-read 
            the item at the specified index, and refresh its displayed value. 
            </summary>
      <param name="itemIndex">The zero-based index of item to re-read.</param>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowEdit">
      <summary>
            Gets a value indicating whether items in the underlying list can be edited.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowNew">
      <summary>
            Gets or sets a value indicating whether the <see cref="M:C1.C1Schedule.C1BindingSource.AddNew" /> method 
            can be used to add items to the list. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowRemove">
      <summary>
            Gets a value indicating whether items can be removed from the underlying list. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.Count">
      <summary>
            Gets the total number of items in the underlying list.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.DataMember">
      <summary>
            Gets or sets the specific list in the data source to which 
            the connector currently binds to.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.DataSource">
      <summary>
            Gets or sets the data source that the connector binds to. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsFixedSize">
      <summary>
            Gets a value indicating whether the underlying list has a fixed size. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsReadOnly">
      <summary>
            Gets a value indicating whether the underlying list is read-only.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.Item(System.Int32)">
      <summary>
            Gets or sets the list element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.List">
      <summary>
            Gets the list that the connector is bound to. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SupportsChangeNotification">
      <summary>
            Gets a value indicating whether the data source supports change notification.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SupportsSearching">
      <summary>
            Gets a value indicating whether the data source supports searching with 
            the Find method. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the underlying list. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.AddingNew">
      <summary>
            Occurs before an item is added to the underlying list. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.DataMemberChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataMember" /> property value has changed.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.DataSourceChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataSource" /> property value has changed. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.ListChanged">
      <summary>
            Occurs when the underlying list changes or an item in the list changes.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.NotifyCollectionChangedAction">
      <summary>
            Describes the action that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Add">
      <summary>
            One or more items were added to the collection. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Remove">
      <summary>
            One or more items were removed from the collection. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Replace">
      <summary>
            One or more items were replaced in the collection.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Move">
      <summary>
            One or more items were moved within the collection.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Reset">
      <summary>
            The content of the collection changed dramatically.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.NotifyCollectionChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItems">The <see cref="T:System.Collections.IList" /> list containing
            changed items.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItem">The changed item.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="newItems">The <see cref="T:System.Collections.IList" /> list containing added items.</param>
      <param name="oldItems">The <see cref="T:System.Collections.IList" /> list containing removed items.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItems">The <see cref="T:System.Collections.IList" /> list containing
            changed items.</param>
      <param name="startingIndex">The zero-based starting index.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItem">The changed item.</param>
      <param name="index">The zero-based index of the changed item.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="newItem">The new item.</param>
      <param name="oldItem">The old item.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="newItems">The <see cref="T:System.Collections.IList" /> list containing added items.</param>
      <param name="oldItems">The <see cref="T:System.Collections.IList" /> list containing removed items.</param>
      <param name="startingIndex">The zero-based starting index.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItems">The <see cref="T:System.Collections.IList" /> list containing
            changed items.</param>
      <param name="index">The new index.</param>
      <param name="oldIndex">The old index.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="changedItem">The changed item.</param>
      <param name="index">The new index.</param>
      <param name="oldIndex">The old index.</param>
    </member>
    <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> class.
            </summary>
      <param name="action">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedAction" /> action 
            that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="newItem">The new item.</param>
      <param name="oldItem">The old item.</param>
      <param name="index">The zero-based index of the item.</param>
    </member>
    <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.Action">
      <summary>
            Gets the action that caused the event. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.NewItems">
      <summary>
            Gets the list of new items involved in the change.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>
            Gets the index at which the change occurred.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.OldItems">
      <summary>
            Gets the list of items affected by a Replace, Remove, or Move action.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>
            Gets the index at which a Move, Remove, ore Replace action occurred.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.NotifyCollectionChangedEventHandler">
      <summary>
            The delegate type for the event handlers of the <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged" /> event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.INotifyCollectionChanged">
      <summary>
            Notifies listeners of dynamic changes, such as when items get added 
            and removed or the whole list is refreshed.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged">
      <summary>
            Occurs when the collection changes.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.C1ObservableCollection`1">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> derived collections. Supports notification.
            </summary>
      <typeparam name="T">The type of objects to keep in collection.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> class.
            </summary>
      <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> list that is wrapped 
            by the new collection.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.ClearItems">
      <summary>
      </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.OnCollectionChanged(C1.C1Schedule.NotifyCollectionChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.C1Schedule.C1ObservableKeyedCollection`2">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> derived collections. Supports notification.
            </summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TItem">The type of objects to keep in the collection.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2" /> class.
            </summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.IEqualityComparer" /> generic interface 
            to use when comparing keys, or a null reference (Nothing in Visual Basic) 
            to use the default equality comparer for the type of the key, obtained 
            from EqualityComparer.Default.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>
      </summary>
      <param name="comparer">
      </param>
      <param name="dictionaryCreationThreshold">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.ClearItems">
      <summary>
      </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.RemoveItem(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.OnCollectionChanged(C1.C1Schedule.NotifyCollectionChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentMappingCollection">
      <summary>
            Represents a generic collection of mappings for properties of 
            <see cref="T:C1.C1Schedule.BaseObject" /> derived objects to appropriate data fields. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.MappingCollectionBase`1">
      <summary>
            Represents a collection of mappings for properties of the 
            <see cref="T:C1.C1Schedule.BasePersistableObject" /> object to the appropriate data fields. 
            Names of properties are keys in this collection.
            </summary>
      <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" />class 
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.GetKeyForItem(C1.C1Schedule.MappingInfo)">
      <summary>
            Returns property name as the key for collection.
            </summary>
      <param name="item">The <see cref="T:C1.C1Schedule.MappingInfo" /> object.</param>
      <returns>The property name.</returns>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.InsertItem(System.Int32,C1.C1Schedule.MappingInfo)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Id" /> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Id" /> property  
            to be bound to the appropriate field in the data source. 
            </summary>
      <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject" /> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping" /> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping" />.
            It makes sense in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Index" /> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Index" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
      <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject" /> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping" /> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping" />.
            It makes sense in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Count">
      <summary>
            Gets the number of elements actually contained in 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Comparer">
      <summary>
            Gets the generic equality comparer that is used to determine equality 
            of keys in the collection.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.MappingCollectionBase`1.Disposed">
      <summary>
            Represents the method that handles the Disposed event of a component. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Site">
      <summary>
            Gets or sets the ISite associated with the IComponent. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentMappingCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentMappingCollection" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Body">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Body" /> 
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of the <see cref="P:C1.C1Schedule.AppointmentMappingCollection.Body" /> allow 
            the <see cref="P:C1.C1Schedule.Appointment.Body" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.End">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.End" /> 
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.End" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Location">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Location" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Location" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Start">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Start" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Start" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Subject">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Subject" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Subject" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.AppointmentProperties">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the memory field 
            which is intended to store the other properties of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the other properties of 
            the <see cref="T:C1.C1Schedule.Appointment" /> object to be bound to 
            the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.OwnerIdMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the Appointment.Owner.Id property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Owner" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.OwnerIndexMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the Appointment.Owner.Index property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Owner" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BaseObjectMappingCollection`1">
      <summary>
            Represents a generic collection of mappings for properties 
            of the <see cref="T:C1.C1Schedule.BaseObject" /> derived objects to appropriate data fields. 
            </summary>
      <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BaseObject" /> class 
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseObjectMappingCollection`1" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.TextMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BaseObject.Text" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Text" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.ColorMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BaseObject.Color" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Color" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.CaptionMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for <see cref="P:C1.C1Schedule.BaseObject.MenuCaption" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.MenuCaption" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.MappingInfo">
      <summary>
            This class provides information on the mapping of the single property 
            of the object to the appropriate data field. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.DataType">
      <summary>
            Gets the <see cref="T:System.Type" /> value determining the type of the data field 
            or property which can be bound to this object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.MappingName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the name of the data field 
            or property to be bound to the object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.IsMapped">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if this objects is mapped 
            to the data field or property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.Required">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if mapping for this property is required or optional.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.PropertyName">
      <summary>
            Gets the <see cref="T:System.String" /> value determining the name of the property 
            which should be mapped.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.AppointmentStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentStorage" /> is the storage 
            for <see cref="T:C1.C1Schedule.Appointment" /> objects. It allows binding to the data source 
            and mapping data source fields to the appointment properties.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BaseStorage`2">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseStorage`2" /> is the base generic component 
            for all storages in C1Schedule object model.
            Represents a storage of objects derived from <see cref="T:C1.C1Schedule.BasePersistableObject" />.
            This component implements methods of operations over the collections of objects. 
            It allows the collection to be populated programmatically 
            or automatically by retrieving data from the data source which 
            is specified by the DataSource and DataMember properties. 
            It allows mapping of data source fields to the object properties.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the storage.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class
            and have the default parameter-less constructor.</typeparam>
      <typeparam name="TMappingCollection">The type of the collection which
            will be used for mapping. It should be derived from 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> class
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.RefreshData">
      <summary>
            Call this method each time after changing your data source 
            if it doesn't implement IBindingList interface.
            Or use BaseStorage{T, TMappingCollection}.Add 
            and BaseStorage{T, TMappingCollection}.Remove 
            instead of corresponding methods of your data source class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.ShouldSerializeMappings">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Translates changes in the internal list to the Objects collection.
            </summary>
      <param name="e">A System.ComponentModel.ListChangedEventArgs object that contains the event data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.Remove(System.Object)">
      <summary>
            Removes object from the Objects collection.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.OnDataSourceItemSynchronized(C1.C1Schedule.ItemSynchronizedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Schedule.BaseStorage`2.DataSourceItemSynchronized" /> event.
            </summary>
      <param name="e">The <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.IsSynchronizable(C1.C1Schedule.BasePersistableObject)">
      <summary>
            Indicates whether the specified collection item should be synchronized.
            </summary>
      <param name="collectionItem">The <see cref="T:C1.C1Schedule.BasePersistableObject" /> object.</param>
      <returns>True if item should be synchronized; false, otherwise.</returns>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.BoundMode">
      <summary>
            Gets a value indicating if the collection is bound to data. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.Mappings">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> derived object 
            that allows the properties of objects maintained by the current collection 
            to be bound to the appropriate fields in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.ScheduleStorage">
      <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentStorage.Appointments">
      <summary>
            Gets an <see cref="T:C1.C1Schedule.AppointmentCollection" /> object that contains appointment related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.SynchronizationActionEnum">
      <summary>
            Describes the version of data in a data storage. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Added">
      <summary>
            A new item.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Deleted">
      <summary>
            A deleted item.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Changed">
      <summary>
            A changed item.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ItemSynchronizedEventArgs">
      <summary>
            Provides data for the DataSourceItemSynchronized event.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ItemSynchronizedEventArgs.#ctor(C1.C1Schedule.C1BindingSource,C1.C1Schedule.BasePersistableObject,System.Object,C1.C1Schedule.SynchronizationActionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> class.
            </summary>
      <param name="storage">Reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource" /> object.</param>
      <param name="collectionItem">Reference to the <see cref="T:C1.C1Schedule.BasePersistableObject" /> derived object.</param>
      <param name="dataSourceItem">Reference to the corresponding item in the data source.</param>
      <param name="action">The <see cref="T:C1.C1Schedule.SynchronizationActionEnum" /> value.</param>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Storage">
      <summary>
            Gets the reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.DataSourceItem">
      <summary>
            Gets the reference to the data source item.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.CollectionItem">
      <summary>
            Gets the reference to the <see cref="T:C1.C1Schedule.BasePersistableObject" /> derived object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Action">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.SynchronizationActionEnum" /> value.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.DataSourceItemSynchronizedEventHandler">
      <summary>
            The delegate type for the event handlers of the DataSourceItemSynchronized event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.C1ScheduleStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component handles all data 
            operations for the scheduler control and contains specific data storages 
            for appointments, resources, contacts, owners, labels and statuses, 
            which are used for binding different collections to the data.
            The <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component also handles data 
            importing and exporting to other scheduling formats such as binary, iCal, and XML.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Clear">
      <summary>
            Clears all unbound storages. Loads default sets if any for unbound storages. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the scheduler's data to a file in the specified format. 
            </summary>
      <param name="path">A <see cref="T:System.String" /> containing the full path 
            (including the file name and extension) to export the scheduler's data to. </param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the scheduler's data to a stream in the specified format. 
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream into which the scheduler's data will be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the appointments' data to a file in the specified format. 
            </summary>
      <param name="path">A <see cref="T:System.String" /> containing the full path 
            (including the file name and extension) to export. </param>
      <param name="appointments">
        <see cref="T:System.Collections.Generic.IList`1" /> to be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the appointments' data to a stream in the specified format. 
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream into which the appointments's data will be exported.</param>
      <param name="appointments">
        <see cref="T:System.Collections.Generic.IList`1" /> to be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Imports data into the scheduler from a file of the specified format.
            </summary>
      <param name="path">A <see cref="T:System.String" /> value containing the full path 
            (including the file name and extension) to a file which contains 
            the data to be imported into the scheduler.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Imports the scheduler's data from a stream whose data is in the specified format.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.OwnerStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage" /> object used to keep contacts which might be used as appointment owners. 
            </summary>
      <remarks>
        <see cref="P:C1.C1Schedule.Appointment.Owner" /> property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in this storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.Reminders">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ReminderCollection" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.Actions">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ActionCollection" /> object. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CategoryStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryStorage" /> is the storage for <see cref="T:C1.C1Schedule.Category" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the category properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CategoryStorage.Categories">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryCollection" /> object that contains 
            category related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ContactStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactStorage" /> is the storage for <see cref="T:C1.C1Schedule.Contact" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the contact properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ContactStorage.Contacts">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactCollection" /> object that contains 
            contact related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.LabelStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelStorage" /> is the storage for <see cref="T:C1.C1Schedule.Label" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the label properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.LabelStorage.Labels">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.LabelCollection" /> object 
            that contains label related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ResourceStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceStorage" /> is the storage for <see cref="T:C1.C1Schedule.Resource" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the resource properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ResourceStorage.Resources">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceCollection" /> object 
            that contains resource related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusStorage" /> is the storage for <see cref="T:C1.C1Schedule.Status" /> objects.
            It allows binding to the data source and mapping data sources fields 
            to the status properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.StatusStorage.Statuses">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusCollection" /> object 
            that contains status related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.FileFormatEnum">
      <summary>
            Specifies the format of the exported or imported file.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.XML">
      <summary>
            XML format (ComponentOne's own format).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.iCal">
      <summary>
            iCal format according to RFC 2445.
            Format specification could be found here:
            http://tools.ietf.org/rfc/rfc2445.txt
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.Binary">
      <summary>
            Binary format.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.TimeZoneInfo">
      <summary>
            The <see cref="T:C1.C1Schedule.TimeZoneInfo" /> class determines time zone properties.
            It can be used for conversion to/from utc times and local times and respect DST.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToString">
      <summary>
            Gets display name of this time zone instance.
            </summary>
      <returns>Time zone standard name.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.GetTimeZone(System.String)">
      <summary>
            Returns a TimeZoneInfo instance for the time zone with supplied name.
            </summary>
      <remarks>This method searches by standard, daylight and display names.</remarks>
      <param name="name">A name of the time zone to search for.</param>
      <returns>TimeZoneInfo instance if any; null otherwise.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToLocalTime(System.DateTime)">
      <summary>
            Converts the value of the utc time to a local time in this time zone.
            </summary>
      <param name="utc">The UTC time to convert.</param>
      <returns>The local time.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToUniversalTime(System.DateTime)">
      <summary>
            Converts the value of the local time to UTC time.
            Note that there may be different possible interpretations at the daylight time boundaries.
            </summary>
      <param name="local">The local time to convert.</param>
      <returns>The UTC DateTime.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if the method failed due to missing platform support.</exception>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.CopyFrom(C1.C1Schedule.TimeZoneInfo)">
      <summary>
            Copies a time zone info form the specified <see cref="T:C1.C1Schedule.TimeZoneInfo" /> object into the current instance.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.TimeZones">
      <summary>
            Gets a list of all time zones defined in the local system.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.TimeZoneNames">
      <summary>
            Gets a string array of display time zone names supported in the local system.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.CurrentTimeZone">
      <summary>
            Gets the current time zone information.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardName">
      <summary>
            The time zone's name during 'standard' time (i.e. not daylight savings).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightName">
      <summary>
            The time zone's name during daylight savings time (DST).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DisplayName">
      <summary>
            The time zone's display name (e.g. '(GMT-05:00) Eastern Time (US and Canada)').
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardOffset">
      <summary>
            Gets the standard offset from UTC as a TimeSpan.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightOffset">
      <summary>
            Gets the daylight offset from UTC as a TimeSpan.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardBias">
      <summary>
            Gets the difference, in minutes, between UTC and local time.
            UTC = local time + bias.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightBias">
      <summary>
            Gets the difference, in minutes, between UTC and local time (in daylight savings time).
            UTC = local time + bias.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ActionTypeEnum">
      <summary>
        <see cref="T:C1.C1Schedule.ActionTypeEnum" /> determines the type of action. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ActionTypeEnum.ExecuteApplication">
      <summary>
            Execute local application with specified parameters.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ActionTypeEnum.NavigateToUrl">
      <summary>
            Open specified target in default browser.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Action">
      <summary>
            Represents an action to take when the current system time reaches 
            the start of the associated <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="P:C1.C1Schedule.Action.ParentAppointment">
      <summary>
            Gets or sets the owning <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Command">
      <summary>
            Gets or sets the command string for the action.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Parameters">
      <summary>
            Gets or sets parameters used when the action is invoked.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Enabled">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating 
            whether the action is enabled. Default value is True.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Type">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ActionTypeEnum" /> value determining 
            the type of action that will occur. Default value is ActionTypeEnum.ExecuteApplication.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ActionCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ActionCollection" /> is a collection of all <see cref="T:C1.C1Schedule.Action" /> objects 
            that represents the reminders for all pending items.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.InsertItem(System.Int32,C1.C1Schedule.Action)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Action" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.ClearItems">
      <summary>
            Overrides default behavior.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrenceStateEnum">
      <summary>
            Determines the type of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring">
      <summary>
            Represents a standard (non-recurring) appointment. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Master">
      <summary>
            Represents the appointment which serves as the pattern 
            for the other recurring appointments. 
            The pattern for recurring appointments is specified via 
            the Appointment.Recurrence property.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Occurrence">
      <summary>
            Represents one of recurring appointments whose pattern appointment 
            is specified via the Appointment.Recurrence property.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Exception">
      <summary>
            Represents a recurring appointment, which was changed 
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Removed">
      <summary>
            Represents a recurring appointment, which was deleted
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ImportanceEnum">
      <summary>
            Determines the importance of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.Low">
      <summary>
            Low
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.Normal">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.High">
      <summary>
            High
            </summary>
    </member>
    <member name="T:C1.C1Schedule.SensitivityEnum">
      <summary>
            Determines the sensitivity of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Confidential">
      <summary>
            Confidential
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Normal">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Personal">
      <summary>
            Personal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Private">
      <summary>
            Private
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Appointment">
      <summary>
            The <see cref="T:C1.C1Schedule.Appointment" /> object is a meeting, a one-time appointment, 
            or a recurring appointment or meeting in the C1Schedule. 
            The <see cref="T:C1.C1Schedule.Appointment" /> class includes properties 
            that specify meeting details such as the location and time.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BasePersistableObject">
      <summary>
            The <see cref="T:C1.C1Schedule.BasePersistableObject" /> is a base class for persistable objects.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.OnPropertyChanged(System.String)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A method called when serializing.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 
            to populate with data.</param>
      <param name="context">The context information about the source or destination 
            of the serialization.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.BeginEdit">
      <summary>
            Brings the object in edit mode.
            </summary>
      <remarks>
            A corresponding item from a data source will not be updated on this object's
            property changes while the object is in edit mode. Data synchronization will
            be performed when the <see cref="M:C1.C1Schedule.BasePersistableObject.EndEdit" /> method will be called.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit">
      <summary>
            Finishes edit mode started by the <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> method and
            updates a corresponding data source item.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit(System.Boolean)">
      <summary>
      </summary>
      <param name="canRaiseChangeNotification">
      </param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.CancelEdit">
      <summary>
            Discards changes since the last <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> call.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.Xml.XmlNode)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.Xml.XmlReader)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.Xml.XmlWriter)">
      <summary>
            Saves an object to the specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that will receive 
            the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.IO.Stream)">
      <summary>
            Loads an object from the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.IO.Stream)">
      <summary>
            Saves an object to the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the object data.</param>
    </member>
    <member name="P:C1.C1Schedule.BasePersistableObject.Key">
      <summary>
            Gets an array of objects representing the key of the <see cref="T:C1.C1Schedule.BasePersistableObject" />.
            </summary>
      <remarks>
        <para>In the current version, the array always contains a single object.
            It can be either an <see cref="T:System.Int32" /> or <see cref="T:System.Guid" /> value depending on
            which one is actually used for binding this data.
            For example, if you bind AppointmentStorage to the database and set
            IndexMapping, this property will return an <see cref="T:System.Int32" /> value.
            If you set IdMapping, this property will return a <see cref="T:System.Guid" /> value.</para>
        <para>In future versions working with compound keys might be implemented.
            In such case this property will return array of objects composing the key.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.BasePersistableObject.IsEdit">
      <summary>
            Indicates whether the object is in edit mode, 
            which is started using the <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> method.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as appointment key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as appointment key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class.
            </summary>
      <remarks>Creates an appointment with default properties.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.BeginEdit">
      <summary>
            Prevents the <see cref="T:C1.C1Schedule.Appointment" /> object from being updated until 
            the <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> method is called.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> and <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> methods 
            are designed to implement batch modifications. 
            This allows you to prevent generation of change notifications
            when changing multiple settings at the same time. 
            To do this enclose the code that changes the properties in calls to these methods.
            Each call to <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> must be paired with a call to <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" />. 
            To ensure that <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> is always called even if an exception occurs, 
            wrap any calls to these methods in a try...finally statement.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)">
      <summary>
            Unlocks the <see cref="T:C1.C1Schedule.Appointment" /> object after a call 
            to the <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> method and causes an immediate update. 
            </summary>
      <param name="canRaiseChangeNotification">The <see cref="T:System.Boolean" /> value determining
            if change notifications can be generated when applying changes.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.IsGroupMember(C1.C1Schedule.BaseObject,System.String)">
      <summary>
            Returns True if the current <see cref="T:C1.C1Schedule.Appointment" /> object is a member of a group which is specified by the
            groupOwner and groupBy parameters; False otherwise. 
            </summary>
      <param name="groupOwner">The <see cref="T:C1.C1Schedule.BaseObject" /> object determining the appointment group.</param>
      <param name="groupBy">The <see cref="T:System.String" /> value determining the type of grouping.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.ClearRecurrencePattern">
      <summary>
            Removes the recurrence settings and restores 
            the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring" /> state for an appointment.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetRecurrencePattern">
      <summary>
            Returns the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object that represents 
            the recurrence attributes of an appointment. 
            If there is no existing recurrence pattern, a new 
            empty <see cref="T:C1.C1Schedule.RecurrencePattern" /> object is returned.
            </summary>
      <returns>The <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.Copy">
      <summary>
            Creates the copy of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
      <returns>The new <see cref="T:C1.C1Schedule.Appointment" /> instance.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.CopyFrom(C1.C1Schedule.Appointment,System.Boolean)">
      <summary>
             Copies properties from the specified <see cref="T:C1.C1Schedule.Appointment" /> object to this one. 
             </summary>
      <param name="app">The <see cref="T:C1.C1Schedule.Appointment" /> instance to copy.</param>
      <param name="includeKeys">Specifies whether to copy internal keys.</param>
      <remarks>
        <para>Set includeKeys to true if you want to receive exact copy 
            of the specified <see cref="T:C1.C1Schedule.Appointment" /> object.</para>
        <para>Set includeKeys to false in order to copy only descriptive <see cref="T:C1.C1Schedule.Appointment" /> 
            properties to other <see cref="T:C1.C1Schedule.Appointment" /> object (for example, 
            if you want to duplicate appointment from one day to another).</para>
      </remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.Delete">
      <summary>
            Deletes an appointment and removes it from 
            the owning <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetTimeTillEvent">
      <summary>
            Returns a time term before the appointment start; a negative value means that 
            appointment is expired.
            </summary>
      <returns>A time term before the appointment starts; a negative value means 
            that the appointment has expired.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.SaveAs(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Saves the appointment to the specified path in the format 
            of the specified file format. 
            </summary>
      <param name="path">Required string. The path in which to save the item.</param>
      <param name="fileFormat">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value indicating 
            the file format to save.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.FromXml(System.Xml.XmlNode)">
      <summary>
            Reconstructs appointment from an <see cref="T:System.Xml.XmlNode" />. 
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> 
            which contains the <see cref="T:C1.C1Schedule.Appointment" /> data.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.FromXml(System.Xml.XmlReader)">
      <summary>
            Reconstructs appointment from an <see cref="T:System.Xml.XmlReader" />. 
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> 
            which contains the <see cref="T:C1.C1Schedule.Appointment" /> data.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.ToXml(System.Xml.XmlWriter)">
      <summary>
            Creates an XML encoding of the appointment. 
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> 
            that will receive the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetAppointmentProperties">
      <summary>
            Returns XML encoding of appointment properties.
            </summary>
      <remarks>Use this property to get the same string as serialized value of appointment properties, which you get
            when set mapping for AppointmentProperties.</remarks>
      <returns>The <see cref="T:System.String" /> value containing XML encoding of appointment properties.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.SetAppointmentProperties(System.String)">
      <summary>
            Reconstructs appointment properties from the specified string.
            </summary>
      <param name="source">The <see cref="T:System.String" /> value containing XML encoding of appointment properties.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.OnPropertyChanged(System.String)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ParentCollection">
      <summary>
            Gets the reference to the parent <see cref="T:C1.C1Schedule.AppointmentCollection" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Action">
      <summary>
            Gets an <see cref="P:C1.C1Schedule.Appointment.Action" /> object for the <see cref="T:C1.C1Schedule.Appointment" /> object.
            Once this property is first requested, a new <see cref="P:C1.C1Schedule.Appointment.Action" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Action" /> property.
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.Appointment.Action" /> object contains information regarding 
            the type of action to perform as well as the command 
            and parameters to pass to the action.
            If the action object is enabled, the action will be invoked 
            when the start date and time of the owning <see cref="T:C1.C1Schedule.Appointment" /> object has occurred.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Importance">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ImportanceEnum" /> value indicating 
            the relative importance level for the appointment.
            Default value is <see cref="F:C1.C1Schedule.ImportanceEnum.Normal" />.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.AllDayEvent">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating 
            if the current appointment is an All-day appointment.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Tag">
      <summary>
            Gets or sets custom information associated with this object.
            </summary>
      <remarks>This property is valid only for the lifetime of the object.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.CustomData">
      <summary>
            Gets or sets custom text associated with this object.
            </summary>
      <remarks>This property is serialized with other appointment properties.
            It isn't used by the scheduler, use it to keep your data associated with appointment.
            This property is serialized into xml and binary formats and it is saved into underlying 
            data source if mapping for Appointment Properties is set. 
            It isn't retained at export/import to iCal format.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Saved">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if the appointment 
            has not been modified since the last save.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Sensitivity">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.SensitivityEnum" /> value indicating 
            the sensitivity level of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Private">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining 
            whether the calendar owner intends to keep the <see cref="T:C1.C1Schedule.Appointment" />
            object private.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Subject">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value 
            representing the subject of the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Body">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing 
            the body of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Conflicts">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object representing 
            the list of <see cref="T:C1.C1Schedule.Appointment" /> objects which are in conflict 
            with this particular appointment.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.AutoResolvedWinner">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining if the item is 
            a winner of an automatic conflict resolution.
            </summary>
      <remarks>A value of false does not necessarily indicate that the item is 
            a loser of an automatic conflict resolution. 
            The item should be in conflict with another item.
            If an item has its Conflicts.Count property greater than zero 
            and if its <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner" /> property is true, 
            it is a winner of an automatic conflict resolution. 
            On the other hand, if the item is in conflict and has its 
            <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner" /> property as false, 
            it is a loser in an automatic conflict resolution.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Start">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining the 
            start date and time of the appointment. 
            </summary>
      <remarks>
        <para>If the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property is set to true, 
            then the start date of the appointment is the <see cref="P:System.DateTime.Date" /> of 
            the <see cref="P:C1.C1Schedule.Appointment.Start" />, and the start time of the appointment is 0:00.</para>
        <para>At setting this property, if it's time is not equal 0:00, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.End">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining 
            the end date and time of the appointment. 
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Schedule.Appointment.End" /> property is usually specified 
            by the <see cref="P:C1.C1Schedule.Appointment.Start" /> and <see cref="P:C1.C1Schedule.Appointment.Duration" /> properties, 
            and is always calculated as <see cref="P:C1.C1Schedule.Appointment.End" /> = <see cref="P:C1.C1Schedule.Appointment.Start" /> + <see cref="P:C1.C1Schedule.Appointment.Duration" />. 
            When setting the <see cref="P:C1.C1Schedule.Appointment.End" /> property, the <see cref="P:C1.C1Schedule.Appointment.Start" /> property 
            retains its value, and the <see cref="P:C1.C1Schedule.Appointment.Duration" /> is changed according 
            to the new value of the <see cref="P:C1.C1Schedule.Appointment.End" /> property. 
            If the new <see cref="P:C1.C1Schedule.Appointment.End" /> property's value is less than 
            the <see cref="P:C1.C1Schedule.Appointment.Start" /> property's value, then an exception will be raised.</para>
        <para>At setting this property, if it's time is not equal 0:00, 
            or value is equal to the value of <see cref="P:C1.C1Schedule.Appointment.Start" /> property, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.IsOneDay">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value indicating either it is 
            a one day appointment or shares some days.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Duration">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating the 
            duration of the appointment.
            </summary>
      <remarks>At setting this property, if it's value is not equal to the whole 
            number of days, the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Location">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value specifying 
            where the appointment is going to be.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Reminder">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object which is associated with the appointment.
            To associate an appointment with the reminder, set its 
            <see cref="P:C1.C1Schedule.Appointment.ReminderSet" /> property to true. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderSet">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether 
            a reminder is associated with the appointment. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating the 
            interval of time the reminder should occur 
            prior to the start of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderOverrideDefault">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if the associated
            <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object has non-default settings.
            True if the reminder overrides the default reminder behavior for the appointment.
            You must set the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> property to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> and 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile" /> properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderPlaySound">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if the reminder 
            should play a sound when it occurs for this appointment or task. 
            The <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> property must be set in order to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile" /> property. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> property 
            is set to true.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderSoundFile">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value indicating the path and file name 
            of the sound file to play when the reminder occurs for the appointment. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> and 
            <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> properties are set to true.
            </summary>
      <remarks>The default sound is the system Exclamation sound.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.IsRecurring">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if the appointment is recurring.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ParentRecurrence">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment" /> object that defines the recurrence 
            criteria for this <see cref="T:C1.C1Schedule.Appointment" /> object. 
            If this appointment is a not member of a recurrence, 
            or is itself a root appointment, null is returned. 
            </summary>
      <remarks>If an appointment is recurring (see the <see cref="P:C1.C1Schedule.Appointment.IsRecurring" /> property) 
            it represents an occurrence in the series that is started and defined 
            by a specific pattern appointment. 
            Use the <see cref="P:C1.C1Schedule.Appointment.ParentRecurrence" /> property to obtain the pattern 
            of the current appointment. A pattern appointment can be recognized by its 
            <see cref="P:C1.C1Schedule.Appointment.RecurrenceState" /> property set 
            to the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.Master" /> value. 
            The recurrence information defined by the pattern appointment can be accessed 
            via the <see cref="T:C1.C1Schedule.RecurrencePattern" /> property of the appointment. 
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.RecurrenceState">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.RecurrenceStateEnum" /> value indicating 
            the recurrence state of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Label">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.Appointment.Label" /> object associated with this appointment.
            </summary>
      <remarks>Labels may be associated with an appointment 
            to effectively group appointments. </remarks>
      <remarks>This property only accepts <see cref="P:C1.C1Schedule.Appointment.Label" /> objects which are present in the C1ScheduleStorage.LabelStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Resources">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceList" /> object which holds the set of 
            <see cref="T:C1.C1Schedule.Resource" /> objects for this appointment.
            An appointment may be associated with multiple resources.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Resource" /> objects which are present in the C1ScheduleStorage.ResourceStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Links">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactList" /> object which holds the set 
            of <see cref="T:C1.C1Schedule.Contact" /> objects for this appointment.
            An appointment may be associated with multiple contacts.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in the C1ScheduleStorage.ContactStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.BusyStatus">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.Status" /> object indicating the busy status 
            of the user for the appointment.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Status" /> objects which are present in the C1ScheduleStorage.StatusStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Categories">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryList" /> object which holds the set 
            of categories assigned to the appointment.
            Categories may be associated with an appointment to effectively group appointments. 
            An appointment may be associated with multiple categories.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Category" /> objects which are present in the C1ScheduleStorage.CategoryStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Owner">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.Contact" /> object which owns current <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in the C1ScheduleStorage.OwnerStorage storage.</remarks>
      <value>The default value is null.</value>
    </member>
    <member name="T:C1.C1Schedule.AppointmentCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentCollection" /> is a collection of all 
            <see cref="T:C1.C1Schedule.Appointment" /> objects in the C1Schedule component.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BaseCollection`1">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseCollection`1" /> is a base generic class for all collections 
            in C1Schedule object model.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the collection.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseCollection`1" /> class.
            </summary>
      <param name="owner">The owning storage.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.Add(`0)">
      <summary>
            Adds a new custom object to the collection.
            If the item already exists in the collection, its index is returned.
            </summary>
      <returns>Returns the index of newly added custom object.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.Contains(System.Int32)">
      <summary>
            Check if collection contains an item with specified index.
            </summary>
      <param name="index">The zero-based index of the item to locate.</param>
      <returns>True if the item is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.AddRange(System.Object[])">
      <summary>
            Adds an array of objects to the collection.
            This methods clears the collection before adding new items. 
            Don't use it if you want to keep preexisting items.
            </summary>
      <param name="items">An array of items.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of collection at inserting new items.
            </summary>
      <param name="index">The zero-based index of the item to insert.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.GetKeyForItem(`0)">
      <summary>
            Extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.RemoveItem(System.Int32)">
      <summary>
            Overrides base class implementation.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="P:C1.C1Schedule.BaseCollection`1.Item(System.Guid)">
      <summary>
            Gets the element with the specified key if any. 
            </summary>
      <param name="key">The key of the element to get.</param>
      <returns>The element with the specified key. If an element with the specified key is not found, return null.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with default settings and adds it to the collection.
            </summary>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(System.DateTime,System.DateTime)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the full list of <see cref="T:C1.C1Schedule.Appointment" /> objects in the specified time interval. 
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(C1.C1Schedule.BaseObject,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the full list of <see cref="T:C1.C1Schedule.Appointment" /> objects in the specified time interval. 
            </summary>
      <param name="groupOwner">The <see cref="T:C1.C1Schedule.BaseObject" /> object determining the appointment group.</param>
      <param name="groupBy">The <see cref="T:System.String" /> value determining the type of grouping.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value determining whether 
            to include private appointments.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(C1.C1Schedule.Appointment,System.DateTime,System.DateTime)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the list of occurrences of the specified master appointment 
            in the specified time interval. 
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object 
            representing the master appointment.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.</remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetConflicts(C1.C1Schedule.Appointment)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the list of occurrences of <see cref="T:C1.C1Schedule.Appointment" /> objects 
            which are in conflict with the specified appointment.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.ClearItems">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.InsertItem(System.Int32,C1.C1Schedule.Appointment)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Appointment" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.SetItem(System.Int32,C1.C1Schedule.Appointment)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Appointment" /> object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.AddRange(C1.C1Schedule.Appointment[])">
      <summary>
            Adds an array of <see cref="T:C1.C1Schedule.Appointment" /> objects to the collection.
            This methods clears collection before adding new items. 
            Don't use it if you want to save previously existed items.
            </summary>
      <param name="items">An array of <see cref="T:C1.C1Schedule.Appointment" /> objects.</param>
    </member>
    <member name="P:C1.C1Schedule.AppointmentCollection.ParentStorage">
      <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.AppointmentStorage" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.AppointmentList">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentList" /> is a sortable collection of 
            <see cref="T:C1.C1Schedule.Appointment" /> objects.
            </summary>
      <remarks>The <see cref="T:C1.C1Schedule.AppointmentList" /> is not guaranteed to be sorted. 
            You must sort the <see cref="T:C1.C1Schedule.AppointmentList" /> before performing operations
            that require the <see cref="T:C1.C1Schedule.AppointmentList" /> to be sorted.</remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort">
      <summary>
            Sorts the elements in the entire AppointmentList using the default comparer
            (by the Appointment.Start value).
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Comparison{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified System.Comparison. 
            </summary>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> 
            to use when comparing elements.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified comparer. 
            </summary>
      <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in a range of elements in AppointmentList using 
            the specified comparer. 
            </summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentComparer">
      <summary>
            Compares <see cref="T:C1.C1Schedule.Appointment" /> objects by their start time.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentComparer.Compare(C1.C1Schedule.Appointment,C1.C1Schedule.Appointment)">
      <summary>
            Performs a comparison of two <see cref="T:C1.C1Schedule.Appointment" /> objects and returns 
            a value indicating whether the one <see cref="T:C1.C1Schedule.Appointment" /> starts earlier, 
            at the same time, or later than the other. 
            </summary>
      <param name="x">The first <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <param name="y">The second <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <returns>Less than zero - x occurs earlier than y.
            Zero - x and y occur at the same time.
            Greater than zero - x occurs later than y.</returns>
    </member>
    <member name="P:C1.C1Schedule.AppointmentComparer.Default">
      <summary>
            Returns an existing instance of <see cref="T:C1.C1Schedule.AppointmentComparer" /> class if any;
            or creates a new one.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.AppointmentEventArgs">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentEventArgs" /> class describes event data for <see cref="P:C1.C1Schedule.AppointmentEventArgs.Appointment" /> events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentEventArgs" />
            class with the specified appointment. 
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.AppointmentEventArgs.Appointment">
      <summary>
            Gets the appointment which the event was raised for. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CancelAppointmentEventHandler">
      <summary>
            Delegate for handling the cancelable event involving a single 
            <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.CancelAppointmentEventArgs">
      <summary>
            The <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" /> class describes event data 
            for <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CancelAppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" />
            class with the specified appointment. 
            </summary>
      <param name="appointment">The <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> object which the event was raised for. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CancelAppointmentEventArgs.Cancel">
      <summary>
            Set to true to cancel the operation.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BaseObject">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseObject" /> is a base class for resources, labels, statuses, 
            categories and contacts. It implements base UI properties and persistence.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with default settings.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified text.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified text and menu caption.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Drawing.Color,System.String,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified color, 
            text and menu caption.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" /> value.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Drawing.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified parameters.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" /> value.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
      <param name="brush">The <see cref="P:C1.C1Schedule.BaseObject.Brush" /> object.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.FromXml(System.Xml.XmlNode)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> 
            which contains the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.FromXml(System.Xml.XmlReader)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.ToXml(System.Xml.XmlWriter)">
      <summary>
            Saves an object into specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> 
            that will receive the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.ToString">
      <summary>
            Overrides the default behavior.
            </summary>
      <returns>The text which identifies a user interface object.</returns>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Color">
      <summary>
            Gets or sets the color of the user interface object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Text">
      <summary>
            Gets or sets the text which identifies a user interface object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.MenuCaption">
      <summary>
            Gets or sets the menu caption for the user interface object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Brush">
      <summary>
            Gets or sets the brush used to fill the user interface object's image.
            </summary>
      <remarks>Supported persistence only for System.Drawing.Drawing2D.HatchBrush
            and System.Drawing.SolidBrush</remarks>
    </member>
    <member name="T:C1.C1Schedule.BaseList`1">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseList`1" /> is a base generic class for all lists 
            in C1Schedule's object model.
            Only objects existing in the owning collection can be added to this list.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the list.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.InsertItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
      <param name="index">The zero-based index of the item to insert.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.SetItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Schedule.TimeScaleEnum">
      <summary>
            Determines the time interval which is used for 
            displaying time slots in the DayView.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.FiveMinutes">
      <summary>
            5 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.SixMinutes">
      <summary>
            6 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.TenMinutes">
      <summary>
            10 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.FifteenMinutes">
      <summary>
            15 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.TwentyMinutes">
      <summary>
            20 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.ThirtyMinutes">
      <summary>
            30 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.OneHour">
      <summary>
            60 minutes.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CalendarInfo">
      <summary>
            The <see cref="T:C1.C1Schedule.CalendarInfo" /> class manages and exposes 
            all date-related data to C1Schedule controls. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.CalendarInfo.SelectedDaysChanged">
      <summary>
            Occurs when the range of selected days was changed.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.CalendarInfo.PropertyChanged">
      <summary>
            Occurs when the property of <see cref="T:C1.C1Schedule.CalendarInfo" /> object was changed.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.Culture">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.CultureInfo" /> object which 
            holds culture-specific information used by C1Schedule components.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.CultureInfo">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.CultureInfo" /> object which 
            holds culture-specific information used by C1Schedule components.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.DateFormatString">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining display format 
            of date values to use in appointments and built-in dialogs.
            </summary>
      <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture" /> property.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeFormatString">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining display format 
            of time values to use in appointments and built-in dialogs.
            </summary>
      <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture" /> property.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WeekStart">
      <summary>
            Gets or sets the <see cref="T:System.DayOfWeek" /> value determining
            the first day of the week. Default is system settings.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WorkDays">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.WorkDays" /> object containing the 
            set of working days in one week.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeScale">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.CalendarInfo.TimeScale" /> property cannot be set to any 
            arbitrary value. When assigning a value to this property it is 
            automatically calculated so as to be equal to the nearest 
            <see cref="T:C1.C1Schedule.TimeScaleEnum" /> value.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeInterval">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.TimeScaleEnum" /> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.StartDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying the beginning 
            of the working time.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.EndDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying 
            the end of the working time.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.FirstDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value specifying minimum date allowed. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.LastDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value specifying maximum date allowed. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.Holidays">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> object which holds
            the list of holidays (non-working days in addition to weekends).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WeekendExceptions">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> object which holds
            the list of weekend days which should be working.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.DateTimeKind">
      <summary>
            Gets or sets <see cref="P:C1.C1Schedule.CalendarInfo.DateTimeKind" /> specifying DateTime kind
            used for saving <see cref="T:System.DateTime" /> values.
            </summary>
      <remarks>
            This property only have an influence on the process of saving data to
            the AppointmentStorage.DataSource object and on export operations.
            All properties of the <see cref="T:C1.C1Schedule.Appointment" /> and <see cref="T:C1.C1Schedule.RecurrencePattern" />
            objects represent current system local time values.
            Set this property to DateTimeLind.Utc if you need to save
            data with universal time. In such case the data will be converted 
            to the local time and back at every read/write operation.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.WorkDays">
      <summary>
            The <see cref="T:C1.C1Schedule.WorkDays" /> class is a list of working days for the single week.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.WorkDays.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.WorkDays" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.WorkDays.AddRange(System.DayOfWeek[])">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.WorkDays" /> object.
            </summary>
      <param name="items">The array of <see cref="T:System.DayOfWeek" /> objects.</param>
    </member>
    <member name="T:C1.C1Schedule.Category">
      <summary>
            The <see cref="T:C1.C1Schedule.Category" /> class represents the category which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Category" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as category key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Category" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as category key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Category" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Category" /> object with specified text.
            </summary>
      <param name="text">The text of category.</param>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.CategoryCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryCollection" /> is a collection of <see cref="T:C1.C1Schedule.Category" /> 
            objects which represents all available categories in C1Schedule object model.
            By default it contains the set of predefined categories. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CategoryCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.CategoryCollection.LoadDefaults" /> method removes all 
            custom categories from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.GetDefaults">
      <summary>
            Returns the list of predefined categories.
            </summary>
      <returns>The <see cref="T:System.Collections.Generic.List`1" /> object.</returns>
    </member>
    <member name="T:C1.C1Schedule.CategoryList">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryList" /> is a list of <see cref="T:C1.C1Schedule.Category" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.CategoryCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.CategoryList" /> to associate the set of <see cref="T:C1.C1Schedule.Category" /> objects 
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Contact">
      <summary>
            The <see cref="T:C1.C1Schedule.Contact" /> class represents the person information.
            Not real class just sample for prototyping.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Contact" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as contact key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Contact" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as contact key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Contact" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.ContactCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactCollection" /> is a collection of <see cref="T:C1.C1Schedule.Contact" /> 
            objects which represents all available contacts in C1Schedule object model.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ContactCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ContactCollection" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ContactList">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactList" /> is a list of <see cref="T:C1.C1Schedule.Contact" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ContactCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ContactList" /> to associate the set of <see cref="T:C1.C1Schedule.Contact" /> objects
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.DateList">
      <summary>
            The <see cref="T:C1.C1Schedule.DateList" /> class is a wrapper for the 
            <see cref="T:System.Collections.Generic.List`1" /> instance.
            At addition of the new value, it cuts off the time part of the value
            and ensures that the value is not present in the list yet.
            </summary>
      <remarks>This class uses binary search for all operations.</remarks>
    </member>
    <member name="M:C1.C1Schedule.DateList.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:C1.C1Schedule.DateList" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.DateList.Add(System.DateTime)">
      <summary>
            Adds new date to the list.
            </summary>
      <param name="item">The <see cref="T:System.DateTime" /> value to add.</param>
    </member>
    <member name="M:C1.C1Schedule.DateList.Clear">
      <summary>
            Clears all items from the wrapped list.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.DateList.Remove(System.DateTime)">
      <summary>
            Removes specified item from the wrapped list.
            </summary>
      <param name="item">The <see cref="T:System.DateTime" /> value to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.DateList.RemoveAt(System.Int32)">
      <summary>
            Removes item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item remove to.</param>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.DateTime)">
      <summary>
            Returns true if specified item exists in the wrapped list.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>True if item exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.DateTime[])">
      <summary>
            Returns true if either of specified items exists in the wrapped list.
            </summary>
      <param name="days">An array of <see cref="T:System.DateTime" /> values to search for.</param>
      <returns>True if at least one of specified items exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.Collections.Generic.IList{System.DateTime})">
      <summary>
            Returns true if either of specified items exists in the wrapped list.
            </summary>
      <param name="days">A list of <see cref="T:System.DateTime" /> values to search for.</param>
      <returns>True if at least one of specified items exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.GetPreviousDate(System.DateTime)">
      <summary>
            Returns the first item that is less than specified one.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>The first item that is less than specified one; 
            or DateTime.MinValue if such item is not found.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.GetNextDate(System.DateTime)">
      <summary>
            Returns the first item that is greater than specified one.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>The first item that is greater than specified one; 
            or DateTime.MaxValue if such item is not found.</returns>
    </member>
    <member name="P:C1.C1Schedule.DateList.Count">
      <summary>
            Returns the number of items in the wrapped list.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.DateList.Items">
      <summary>
            Returns the reference to the wrapped list.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.C1BrushStyleEnum">
      <summary>
            Specifies the different patterns available for brushes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Transparent">
      <summary>
            Represents transparent brush.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Solid">
      <summary>
            Represents solid brush.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.BackwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Cross">
      <summary>
            Specifies horizontal and vertical lines that cross.  
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.DiagonalCross">
      <summary>
            A pattern of crisscross diagonal lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.ForwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper left to lower right. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Horizontal">
      <summary>
            A pattern of horizontal lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Vertical">
      <summary>
            A pattern of vertical lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Wave">
      <summary>
            Specifies horizontal lines that are composed of tildes. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.ZigZag">
      <summary>
            Specifies horizontal lines that are composed of zigzags. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.C1Brush">
      <summary>
            Wrapper class for brushes. Only for serialization/deserialization purposes.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Drawing.Color,System.Drawing.Color,C1.C1Schedule.C1BrushStyleEnum)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
      <param name="foreColor">The foreground <see cref="T:System.Drawing.Color" /> value.</param>
      <param name="backColor">The background <see cref="T:System.Drawing.Color" /> value.</param>
      <param name="style">The <see cref="T:C1.C1Schedule.C1BrushStyleEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Drawing.Color)">
      <summary>
            Creates a new solid <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
      <param name="backColor">The background <see cref="T:System.Drawing.Color" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.GetARGBstring(System.Drawing.Color)">
      <summary>
            Returns string representation of color in ARGB format.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" />value.</param>
      <returns>The string representation of color in ARGB format</returns>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.ForeColor">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.BackColor">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.Style">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.Brush">
      <summary>
      </summary>
    </member>
    <member name="T:C1.C1Schedule.Label">
      <summary>
            The <see cref="T:C1.C1Schedule.Label" /> class represents the label which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Label" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as label key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Label" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as label key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Label" /> object with default parameters.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified text.
            </summary>
      <param name="text">The text of the label.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.String,System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified text and menu caption.
            </summary>
      <param name="text">The text of the label.</param>
      <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Drawing.Color,System.String,System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified color, text and menu caption.
            </summary>
      <param name="color">The color of the label.</param>
      <param name="text">The text of the label.</param>
      <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.LabelCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelCollection" /> is a collection of <see cref="T:C1.C1Schedule.Label" /> 
            objects which represents all available labels in C1Schedule object model.
            </summary>
      <remarks>
        <para>By default it contains the following set of predefined labels:</para>
        <list type="bullet">
          <item>
            <term>
            </term>
            <description>None</description>
          </item>
          <item>
            <term>
            </term>
            <description>Important</description>
          </item>
          <item>
            <term>
            </term>
            <description>Business</description>
          </item>
          <item>
            <term>
            </term>
            <description>Personal</description>
          </item>
          <item>
            <term>
            </term>
            <description>Vacation</description>
          </item>
          <item>
            <term>
            </term>
            <description>Must Attend</description>
          </item>
          <item>
            <term>
            </term>
            <description>Deadline</description>
          </item>
          <item>
            <term>
            </term>
            <description>Travel Required</description>
          </item>
          <item>
            <term>
            </term>
            <description>Needs Preparation</description>
          </item>
          <item>
            <term>
            </term>
            <description>Birthday</description>
          </item>
          <item>
            <term>
            </term>
            <description>Anniversary</description>
          </item>
          <item>
            <term>
            </term>
            <description>Phone Call</description>
          </item>
          <para>It also allows adding of custom labels.</para>
        </list>
      </remarks>
    </member>
    <member name="F:C1.C1Schedule.LabelCollection.NoneLabelId">
      <summary>
            Defines Id of the None label.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.LabelCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.LabelCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.LabelCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.LabelCollection.LoadDefaults" /> method removes all 
            custom labels from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.LabelList">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelList" /> is a list of <see cref="T:C1.C1Schedule.Label" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.LabelCollection" /> object 
            may be added to this list.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrenceTypeEnum">
      <summary>
            Determines the types of recurrent appointments.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Daily">
      <summary>
            The recurring appointment reoccurs on a daily basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays">
      <summary>
            The recurring appointment reoccurs every working day.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly">
      <summary>
            The recurring appointment reoccurs on a monthly basis. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth">
      <summary>
            The recurring appointment reoccurs every N months. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly">
      <summary>
            The recurring appointment reoccurs on a weekly basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly">
      <summary>
            The recurring appointment reoccurs on an yearly basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth">
      <summary>
            The recurring appointment reoccurs every N years.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.WeekDaysEnum">
      <summary>
            Determines the set of days and groups of days for recurrence patterns. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.None">
      <summary>
            No specific value; the actual value is obtained from 
            the root <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Sunday">
      <summary>
            Specifies Sunday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Monday">
      <summary>
            Specifies Monday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Tuesday">
      <summary>
            Specifies Tuesday. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Wednesday">
      <summary>
            Specifies Wednesday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Thursday">
      <summary>
            Specifies Thursday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Friday">
      <summary>
            Specifies Friday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Saturday">
      <summary>
            Specifies Saturday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.WeekendDays">
      <summary>
            Specifies Saturday and Sunday (or what ever days according 
            to the settings of the C1Schedule).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.WorkDays">
      <summary>
            Specifies work days (all days except weekend).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.EveryDay">
      <summary>
            Specifies every day of the week.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.WeekOfMonthEnum">
      <summary>
            Determines the week in a month in which the appointment will occur.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.First">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the first week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Second">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the second week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Third">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the third week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Fourth">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the fourth week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Last">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the last week in the month. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrencePattern">
      <summary>
            The <see cref="T:C1.C1Schedule.RecurrencePattern" /> class contains information 
            that describes the recurrence pattern and range 
            of the associated <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.OnPropertyChanged(System.String)">
      <summary>
      </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.GetDescription(System.Globalization.CultureInfo)">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object
            according to the specified culture.
            </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object used for getting calendar specific strings.</param>
      <returns>The <see cref="T:System.String" /> value described the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.GetDescription(C1.C1Schedule.CalendarInfo)">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object
            according to the specified <see cref="T:C1.C1Schedule.CalendarInfo" /> object.
            Use this method instead of <see cref="P:C1.C1Schedule.RecurrencePattern.Description" /> property if the <see cref="T:C1.C1Schedule.RecurrencePattern" /> 
            object does not belong to any <see cref="N:C1.C1Schedule" /> control.
            </summary>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object used for getting calendar specific strings.</param>
      <returns>The <see cref="T:System.String" /> value described the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
      <remarks>If the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object does not belong to the <see cref="N:C1.C1Schedule" /> control,
            its Description property will return the default description using current user culture and calendar settings.</remarks>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.ParentAppointment">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment" /> object which represents
            the master appointment for this <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Description">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.RecurrenceType">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.RecurrenceTypeEnum" /> value
            determining the type of recurrence (daily, monthly, etc.).
            Default value is RecurrenceTypeEnum.Weekly.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Interval">
      <summary>
             Gets or sets the <see cref="T:System.Int32" /> value specifying 
             the interval between occurrences of the recurrence. 
             The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> property works in conjunction with 
             the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property to determine the cycle of the recurrence. 
             The maximum allowable value is 99 for weekly patterns and 999 for daily patterns.
             The default value is 1.
             </summary>
      <remarks>For example, if the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> is set 
             to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily" />, and the <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> is set to 3, 
             the recurrence will occur every third day.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.EndTime">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the end time for the given occurrence of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.StartTime">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the start time for the given occurrence of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Duration">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating 
            the duration of each occurrence in the recurrence pattern.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.PatternStartDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the start date of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.PatternEndDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the end date of the recurrence pattern. 
            </summary>
      <remarks>This property is optional but must be coordinated 
            with other properties when setting up a recurrence pattern. 
            If this property or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, 
            the pattern is considered to be finite, and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> 
            property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true. 
            The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> property must be set before 
            setting <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" />.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Occurrences">
      <summary>
            Gets or sets the number of occurrences for the recurrence pattern.
            This property allows the definition of a recurrence pattern that 
            is only valid for the specified number of subsequent occurrences. 
            For example, you can set this property to 10 for a formal training 
            course that will be held on the next ten Thursday evenings.
            The default value is 0.
            </summary>
      <remarks>This property must be coordinated with other properties 
            when setting up a recurrence pattern. 
            If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, the pattern 
            is considered to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Instance">
      <summary>
            Get or sets the <see cref="T:C1.C1Schedule.WeekOfMonthEnum" /> value specifying 
            the count for which the recurrence pattern is valid for a given interval. 
            This property is only valid for recurrences of 
            the <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth" /> and 
            <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth" /> types and allows the definition 
            of a recurrence pattern that is only valid for the Nth occurrence, 
            such as "the 2nd Sunday in March" pattern. 
            The default value is WeekOfMonthEnum.First.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.WeekDaysEnum" /> value representing the mask 
            for week days on which the recurring appointment occurs. 
            Monthly and yearly patterns are only valid for a single day. 
            Weekly patterns are only valid as the Or of the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" />.
            The default value is 0.
            </summary>
      <remarks>
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.EveryDay" />; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.WorkDays" />; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              cannot be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.None" />; doing so will result 
              in an exception being thrown.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly" /> or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />
              the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property is not applicable.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.DayOfMonth">
      <summary>
            Gets or sets the number of the day in its respective month on which 
            each occurrence will occur. Applicable only when the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly" /> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.MonthOfYear">
      <summary>
            Gets or sets the value indicating which month of the year is valid 
            for the specified recurrence pattern. Can be a number from 1 to 12.
            This property is only valid for recurrence patterns whose <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth" /> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.NoEndDate">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if
            the recurrence pattern is endless.
            The default value is True.
            </summary>
      <remarks>This property must be coordinated with other properties when 
            setting up a recurrence pattern. If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, the pattern is considered 
            to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Exceptions">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment" /> objects that define the exceptions to that series 
            of appointments. <see cref="T:C1.C1Schedule.Appointment" /> objects are added to 
            the <see cref="P:C1.C1Schedule.RecurrencePattern.Exceptions" /> whenever a property in the corresponding 
            <see cref="T:C1.C1Schedule.Appointment" /> object is altered.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.RemovedOccurrences">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment" /> objects removed from that series of appointments. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Reminder">
      <summary>
            The <see cref="T:C1.C1Schedule.Reminder" /> class represents an object which allows users to keep track 
            of upcoming appointments by scheduling a pop-up dialog box to appear at a given time. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)">
      <summary>
            The <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method notifies the scheduler to defer the triggering 
            of a reminder by the specified interval.
            </summary>
      <param name="delay">The <see cref="T:System.TimeSpan" />value specifying the interval
            of time to wait before displaying the reminder again.</param>
    </member>
    <member name="M:C1.C1Schedule.Reminder.Dismiss">
      <summary>
            Dismisses the current <see cref="T:C1.C1Schedule.Reminder" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Reminder.OnPropertyChanged(System.String)">
      <summary>
      </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="P:C1.C1Schedule.Reminder.ParentAppointment">
      <summary>
            Gets the owning <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.Caption">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the window caption text 
            of the <see cref="T:C1.C1Schedule.Appointment" /> object which 
            the <see cref="T:C1.C1Schedule.Reminder" /> object is applied to.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.IsActive">
      <summary>
            Gets a value that determines if the <see cref="T:C1.C1Schedule.Reminder" /> object 
            is currently active (visible). 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.NextReminderDate">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value indicating the next time the specified 
            reminder will occur. 
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.Reminder.NextReminderDate" /> property value changes every time 
            the object's <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method is executed or when the user 
            clicks the Snooze button.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Reminder.OriginalReminderDate">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value specifying the original date and time 
            that the specified reminder is set to occur. 
            It is calculated using the following formula: 
            <see cref="P:C1.C1Schedule.Reminder.OriginalReminderDate" /> = <see cref="P:C1.C1Schedule.Appointment.Start" /> 
              - <see cref="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart" />.
            </summary>
      <remarks>This value corresponds to the original date and time 
            value before the <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method is executed or the user 
            clicks the Snooze button.</remarks>
    </member>
    <member name="T:C1.C1Schedule.ReminderCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ReminderCollection" /> is a collection of all <see cref="T:C1.C1Schedule.Reminder" /> objects 
            that represents the reminders for all pending items.
            </summary>
      <remarks>Use the <see cref="P:C1.C1Schedule.C1ScheduleStorage.Reminders" /> property to get a reference  
            to the Reminders collection. 
            Reminders are created programmatically when a new <see cref="T:C1.C1Schedule.Appointment" /> object 
            is created with a reminder. For example, a reminder is created when 
            an <see cref="T:C1.C1Schedule.Appointment" /> object is created and the <see cref="P:C1.C1Schedule.Appointment.ReminderSet" />
            property is set to true. 
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.InsertItem(System.Int32,C1.C1Schedule.Reminder)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Reminder" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.ClearItems">
      <summary>
            Overrides default behavior.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.SetItem(System.Int32,C1.C1Schedule.Reminder)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Reminder" /> object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ReminderEventArgs">
      <summary>
            Describes event data for <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ReminderEventArgs" /> 
            class with the specified <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object. 
            </summary>
      <param name="reminder">The <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.ReminderEventArgs.Reminder">
      <summary>
            Gets the reminder which the event was raised for. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CancelReminderEventHandler">
      <summary>
            Delegate for handling the cancelable event involving a single <see cref="T:C1.C1Schedule.Reminder" /> object. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.CancelReminderEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.CancelReminderEventArgs">
      <summary>
            Describes event data for cancelable Reminder events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CancelReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelReminderEventArgs" />
            class with the specified <see cref="P:C1.C1Schedule.CancelReminderEventArgs.Reminder" /> object. 
            </summary>
      <param name="reminder">The <see cref="T:C1.C1Schedule.Reminder" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.CancelReminderEventArgs.Reminder">
      <summary>
            Gets the reminder which the event was raised for. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CancelReminderEventArgs.Cancel">
      <summary>
            Set to true to cancel the operation.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Resource">
      <summary>
            The <see cref="T:C1.C1Schedule.Resource" /> class represents the resource which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Resource" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as resource key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Resource" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as resource key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Resource" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.ResourceCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceCollection" /> is a collection of <see cref="T:C1.C1Schedule.Resource" /> 
            objects which represents all available resources in C1Schedule object model.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ResourceCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ResourceCollection" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ResourceList">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceList" /> is a list of <see cref="T:C1.C1Schedule.Resource" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ResourceCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ResourceList" /> to associate the set of <see cref="T:C1.C1Schedule.Resource" /> objects 
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusTypeEnum">
      <summary>
            Determines the type of status.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Free">
      <summary>
            This status means that a person is in the office and available to others. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Tentative">
      <summary>
            This status means that a person is in the office and tentatively available to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Busy">
      <summary>
            This status means that a person is in the office but unavailable to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.OutOfOffice">
      <summary>
            This status means that a person is out of the office and unavailable to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Custom">
      <summary>
            This status represents all custom statuses added to the StatusCollection.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Status">
      <summary>
            The <see cref="T:C1.C1Schedule.Status" /> class represents an availability status 
            for the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Status" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as status key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Status" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as status key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with default parameters.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(C1.C1Schedule.StatusTypeEnum)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Schedule.Status" /> class 
            and initializes it with the specified type. 
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(C1.C1Schedule.StatusTypeEnum,System.Globalization.CultureInfo)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Schedule.Status" /> class 
            and initializes it with the specified type. 
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.String)">
      <summary>
            Creates a new instance of the custom <see cref="T:C1.C1Schedule.Status" /> object with the specified text.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.String,System.String)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified text and menu caption.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Drawing.Color,System.String,System.String)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified color, 
            text and menu caption.
            </summary>
      <param name="color">The color which will be used for displaying status.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Drawing.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified parameters.
            </summary>
      <param name="color">The color which will be used for displaying status.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
      <param name="brush">The brush which will be used for displaying status.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="P:C1.C1Schedule.Status.StatusType">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value determining the type of the status. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusCollection" /> is a collection of <see cref="T:C1.C1Schedule.Status" /> 
            objects which represents all available statuses in C1Schedule object model.
            By default it contains the set of predefined statuses. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StatusCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.StatusCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StatusCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.StatusCollection.LoadDefaults" /> method removes all the custom 
            appointment statuses from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.StatusCollection.Item(C1.C1Schedule.StatusTypeEnum)">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Status" /> object specified by the appointment status type. 
            For custom statuses returns the first occurrence.
            If there is no such <see cref="T:C1.C1Schedule.Status" /> object in the collection, returns null.
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
      <returns>The <see cref="T:C1.C1Schedule.Status" /> object.</returns>
    </member>
    <member name="T:C1.C1Schedule.StatusList">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusList" /> is a list of <see cref="T:C1.C1Schedule.Status" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.StatusCollection" /> object 
            may be added to this list.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.DateAppointments">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> class represents the single calendar day
            with the <see cref="T:System.Collections.Generic.List`1" /> list of appointments.
            It is an auxiliary class for use in C1PrintDocument scripts.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointments.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> class.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> value determining the represented date.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointments.AddAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Adds a new <see cref="T:C1.C1Schedule.Appointment" /> object to the current day.
            </summary>
      <remarks>The specified <see cref="T:C1.C1Schedule.Appointment" /> object will be added 
            only if some part of the appointment falls on the current day.</remarks>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to add.</param>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.Date">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value determining the represented date.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.HasAppointments">
      <summary>
            Returns true if current day contains one or more appointments.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.BusyStatus">
      <summary>
            Returns availability status of the current day.
            </summary>
      <remarks>Availability status is determined according to availability statuses of
            AllDay events for the representing day.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.Appointments">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> list of all appointments for the represented day.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.DateAppointmentsCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> class represents 
            the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> collection 
            which can be used as a data source in C1PrintDocument documents.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value specifying whether to include private appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection,C1.C1Schedule.CalendarInfo,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object containing calendar specific information.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includeWeekends">The <see cref="T:System.Boolean" /> value specifying whether to include weekend days into collection.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value specifying whether to include private appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IList{C1.C1Schedule.Appointment},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointments">The <see cref="T:System.Collections.Generic.IList`1" /> list of appointments.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.CalendarInfo,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointments">The <see cref="T:System.Collections.Generic.IList`1" /> list of appointments.</param>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object containing calendar specific information.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includeWeekends">The <see cref="T:System.Boolean" /> value specifying whether to include weekend days into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.GetIntervalAppointments(System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1" /> containing <see cref="T:C1.C1Schedule.Appointment" />
            objects for the specified DateTime range.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the DateTime range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the DateTime range.</param>
      <param name="includeAll">Specifies whether the returned list contains all appointments 
            intercepting the specified DateTime range. If this value is False, the returned list
            will contain only appointments starting within the specified DateTime range.</param>
      <returns>The <see cref="T:System.Collections.Generic.List`1" /> list containing 
            <see cref="T:C1.C1Schedule.Appointment" /> objects for the specified DateTime range.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.GetKeyForItem(C1.C1Schedule.Printing.DateAppointments)">
      <summary>
            Returns key value for the specified item.
            </summary>
      <param name="item">A <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> object.</param>
      <returns>The <see cref="T:System.DateTime" /> value used as a key.</returns>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointmentsCollection.Item(System.DateTime,System.DateTime)">
      <summary>
            Gets a new <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection containing 
            <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> objects for the specified date range.
            </summary>
      <remarks>Resulting collection always contains the subset of the current collection.
            All days out of this collection date range are omitted.</remarks>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <returns>The <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection containing 
            <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> objects for the specified date range.</returns>
    </member>
    <member name="T:C1.C1Schedule.Printing.PrintContextType">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.PrintContextType" /> defines the printing context for the <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.Printing.PrintContextType.Appointment">
      <summary>
            Document displays content of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.Printing.PrintContextType.DateRange">
      <summary>
            Document displays appointments for the specified date range.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.PreviewWrapper">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.PreviewWrapper" /> class wraps the print preview dialog functionality.
            It allows showing C1.C1Preview.C1PrintDocument content in a C1.Win.C1Preview.C1PrintPreviewDialog, 
            loaded via reflection from C1.Win.C1Report.2 assembly.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PreviewWrapper.Preview(System.Object)">
      <summary>
            Shows the specified object in a print preview dialog.
            </summary>
      <param name="printDocument">An object to preview. 
            It might be one of the next types:
              - C1.C1Preview.C1PrintDocument, 
              - <see cref="T:System.Drawing.Printing.PrintDocument" />,
              - C1.C1Report.C1Report, 
              - <see cref="T:System.ComponentModel.IBindingList" />, 
              - <see cref="T:System.Collections.IEnumerable" />.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PreviewWrapper.Preview(C1.C1Schedule.Printing.PrintDocumentWrapper,System.Drawing.Printing.PageSettings@)">
      <summary>
            Shows the specified object in a print preview dialog using the specified <see cref="T:System.Drawing.Printing.PageSettings" /> object.
            </summary>
      <param name="printDocument">The <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> object to preview.</param>
      <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings" /> object for using in preview.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PreviewWrapper.Preview(C1.C1Schedule.Printing.PrintDocumentWrapper)">
      <summary>
            Shows the specified <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> object in a print preview dialog.
            </summary>
      <param name="printDocument">The <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> object to preview.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PreviewWrapper.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PreviewWrapper.Caption">
      <summary>
            Gets or sets the caption of the preview window.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PreviewWrapper.C1PrintPreviewDialog">
      <summary>
            Gets or sets the C1.Win.C1Preview.C1PrintPreviewDialog object, used for previewing.
            </summary>
      <remarks>
            You can set this property from code if your application contains reference 
            to the C1.Win.C1Report.2 assembly.
            In such case you'll be able to set various C1.Win.C1Preview.C1PrintPreviewDialog 
            properties before showing it to end-users.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.Printing.PrintDocumentWrapper">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> class wraps the C1.C1Preview.C1PrintDocument functionality.
            It loads C1.C1Preview.C1PrintDocument component via reflection from the C1.C1Report.2 assembly.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.GetDocumentInfoProperty(System.String)">
      <summary>
            Returns the value of the specified property of the document's DocumentInfo object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.AddExternalAssembly(System.String)">
      <summary>
            Adds specified external assembly reference to the currently loaded document.
            </summary>
      <param name="assemblyName">The <see cref="T:System.String" /> value specifying assembly name for adding.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Load(System.IO.Stream)">
      <summary>
            Loads the current document from a stream.
            The stream should contain a document in C1D format.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Load(System.IO.Stream,System.Object)">
      <summary>
            Loads the current document from a stream.
            </summary>
      <param name="stream">The stream from which to load the document.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Load(System.String)">
      <summary>
            Loads the current document from a file.
            The file format (C1D or C1DX) is determined by the file extension.
            The format defaults to C1D if the format cannot be determined from the extension.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Load(System.String,System.Object)">
      <summary>
            Loads the current document from a file.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="documentFormat">The document persistence format to use.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Print">
      <summary>
            Prints the document.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>
            Prints the document.
            </summary>
      <param name="printerSettings">The printer settings to use.</param>
      <param name="defaultPageSettings">The default page settings to use.</param>
      <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Generate">
      <summary>
            Generates a document.
            </summary>
      <returns>Returns true if no warning occurs during generating.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.ReadTags(System.Collections.Generic.Dictionary{System.String,C1.C1Schedule.Printing.TagInfo}@)">
      <summary>
            Updates specified tag dictionary with the current document tags.
            </summary>
      <param name="tags">The <see cref="T:System.Collections.Generic.Dictionary`2" /> dictionary of tags for updating.</param>
      <remarks>If specified dictionary doesn't contain one of document tags, this tag will be added to the dictionary.
            If the dictionary contains tag with the same name and type, this tag won't be changed.
            If the dictionary contains tag with the same name and different type, this tag will be replaced with the new one.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.SetDocumentTag(System.String,System.Object)">
      <summary>
            Sets the value of the specified document tag.
            </summary>
      <param name="name">The <see cref="T:System.String" /> value specifying the name of the document tag.</param>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.AddDocumentTag(System.String,System.Object)">
      <summary>
            Adds the new tag with the specified value to the document.
            </summary>
      <param name="name">The <see cref="T:System.String" /> value specifying the name of the document tag.</param>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Clear">
      <summary>
            Clears the document, all its properties will be set to default values
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintDocumentWrapper.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintDocumentWrapper.C1PrintDocument">
      <summary>
            Gets or sets wrapped C1PrintDocument instance.
            </summary>
      <remarks>
            Set this property from code if your application contains reference 
            to the C1.WPF.C1Report or C1.C1Report.2 assembly.
            In such case you'll be able to work with C1PrintDocument directly from your code.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.Printing.PrintInfo">
      <summary>
            The object used to manage schedule printing.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Print">
      <summary>
            Sends default printing style for the currently selected view to the printer.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Print(C1.C1Schedule.Printing.PrintStyle)">
      <summary>
            Sends the specified printing style to the printer.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object to print.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Print(C1.C1Schedule.Appointment)">
      <summary>
            Sends the specified <see cref="T:C1.C1Schedule.Appointment" /> object to the printer.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to print.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Print(C1.C1Schedule.Printing.PrintStyle,System.DateTime,System.DateTime)">
      <summary>
            Sends the specified printing style to the printer.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object to print.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value specifying the beginning of the print range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value specifying the end of the print range.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Preview">
      <summary>
            Opens a separate application window in which end users can preview 
            the output that would be generated by the print operation.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Preview(C1.C1Schedule.Printing.PrintStyle)">
      <summary>
            Opens a separate application window in which end users can preview 
            the output that would be generated by the print operation.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object to preview.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Preview(C1.C1Schedule.Appointment)">
      <summary>
            Opens a separate application window in which end users can preview 
            the output that would be generated by the print operation.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to preview.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.Preview(C1.C1Schedule.Printing.PrintStyle,System.DateTime,System.DateTime)">
      <summary>
            Opens a separate application window in which end users can preview 
            the output that would be generated by the print operation.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object to preview.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value specifying the beginning of the print range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value specifying the end of the print range.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintInfo.LoadStyle(C1.C1Schedule.Printing.PrintStyle)">
      <summary>
            Loads style definition to C1PrintDocument control.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> for loading into print document object.</param>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.IsPrintingEnabled">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether printing is enabled.
            </summary>
      <remarks> At run-time this property returns false if
            C1PrintDocument control can't be initialized.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.IsPreviewEnabled">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether preview is enabled.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.PrintStyles">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Printing.PrintStyleCollection" /> collection, containing all available styles of printing.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.PrintDocumentHelper">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.PreviewHelper">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Printing.PreviewWrapper" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.ShowOptionsForm">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should
            show options form before printing.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.ShowProgressForm">
      <summary>
            Gets or sets a value indicating whether the Progress Form is displayed.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.CurrentStyle">
      <summary>
            Gets a <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object which is currently selected for printing.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.HidePrivateAppointments">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should
            hide details of private appointments in the resulting document.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintInfo.PrintSelectedCalendar">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should only
            show appointments from the currently selected <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> in the resulting document.
            By default resulting document contains all appointments regardless of the C1Schedule grouping.
            Set this property to true to show appointments from the currently selected <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" />.
            </summary>
      <remarks>This property only makes sense if the C1Schedule.GroupBy property is set.</remarks>
    </member>
    <member name="T:C1.C1Schedule.Printing.PrintStyle">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> class represents the single printing style for a schedule control.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyle.#ctor">
      <summary>
            Initializes the new <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyle.Load(C1.C1Schedule.Printing.PrintDocumentWrapper)">
      <summary>
            Loads style definition to the specified C1PrintDocument control.
            </summary>
      <param name="printDoc">The <see cref="T:C1.C1Schedule.Printing.PrintDocumentWrapper" /> object.</param>
      <returns>Returns true at successful loading; false - otherwise.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyle.IsStandardTag(C1.C1Schedule.Printing.TagInfo)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value, determining whether the specified tag in one of 
            the predefined tags used by the <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> and PrintOptionsForm classes.
            </summary>
      <param name="tag">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.StyleName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value, determining the unique style name for using in
            <see cref="T:C1.C1Schedule.Printing.PrintStyleCollection" />. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.Description">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value, determining style description.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.DisplayName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value, determining style display name.
            </summary>
      <remarks>For default styles this value is initialized with the value of 
            the <see cref="P:C1.C1Schedule.Printing.PrintStyle.Description" /> property localized according to the owning control's culture.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.DocumentFormat">
      <summary>
            Gets an <see cref="T:System.Int32" /> value determining the format of source document.
            Returns 0 for .c1d and 1 for .c1dx documents.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.Context">
      <summary>
            Gets or sets a <see cref="T:C1.C1Schedule.Printing.PrintContextType" /> value, specifying whether the current
            <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> objects displays the single appointment or appointments
            of the specified date range.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.DateHeadingsFont">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Font" /> object used for printing date headings.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.AppointmentsFont">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Font" /> object used for printing appointments.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HeaderFont">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Font" /> object used for printing page headers.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.FooterFont">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Font" /> object used for printing page footers.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HeaderColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> value used for printing page headers.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.FooterColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> value used for printing page footers.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.PreviewImage">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> object, representing a small preview of the style 
            which can be used for displaying style information in UI..
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.CurrentPageSettings">
      <summary>
            Gets or sets the PageSettings for printing.
            </summary>
      <remarks>If end-user changes style PageSettings at run-time, 
            the changed settings will be used as default at every next printing or previewing.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HeaderLeft">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the left part of the page header.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HeaderCenter">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the center part of the page header.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HeaderRight">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the right part of the page header.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.FooterLeft">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the left part of the page footer.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.FooterCenter">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the center part of the page footer.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.FooterRight">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used in the right part of the page footer.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.ReverseOnEvenPages">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether 
            page headers and footers should be reversed on even pages.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.HidePrivateAppointments">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should
            hide details of private appointments in resulting document.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.StyleSource">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the source of
            C1PrintDocument template. It might be the name of .c1d or .c1dx file or the name
            of resource.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.IsLoaded">
      <summary>
            Returns true if the current style is loaded into C1PrintDocument control.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.PrintStyle.Tags">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2" /> dictionary, containing information 
            about C1PrintDocument tags.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.PrintStyleCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.PrintStyleCollection" /> class represents the keyed collection of scheduler printing styles.
            The <see cref="P:C1.C1Schedule.Printing.PrintStyle.StyleName" /> property is used as a collection key.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyleCollection.LoadDefaults">
      <summary>
            Fills collection with default printing styles.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyleCollection.AddRange(C1.C1Schedule.Printing.PrintStyle[])">
      <summary>
            Adds a set of <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> objects to the collection.
            </summary>
      <param name="items">An array of type <see cref="T:C1.C1Schedule.Printing.PrintStyle" />
            that contains the print styles to add. </param>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyleCollection.GetUniqueStyleName">
      <summary>
            Returns the <see cref="T:System.String" /> value which can be used
            as unique style name.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyleCollection.GetKeyForItem(C1.C1Schedule.Printing.PrintStyle)">
      <summary>
            Extracts the key from the specified item.
            </summary>
      <param name="item">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object from which to extract the key.</param>
      <returns>The key for the specified item.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.PrintStyleCollection.InsertItem(System.Int32,C1.C1Schedule.Printing.PrintStyle)">
      <summary>
            Inserts the specified item in the collection at the specified index.
            </summary>
      <param name="index">The zero-based index where the item is to be inserted.</param>
      <param name="item">The item to insert in the collection.</param>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagInfo">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.TagInfo" /> class represents the facade for the C1.C1Preview.Tag class.
            Use this class for getting information about document tags and for 
            setting tag values before rendering the document.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.Value">
      <summary>
            Gets or sets the C1.C1Preview.Tag object value.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.ShowInDialog">
      <summary>
            Gets or sets a value indicating whether to show the current tag and
            allow the user to edit its <see cref="P:C1.C1Schedule.Printing.TagInfo.Value" /> in the tags input dialog.
            True by default.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.Name">
      <summary>
            Gets the unique name of the tag object as it is defined in a document.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.Description">
      <summary>
            Gets or sets the description of the tag.
            If not empty, used as the label in the tag input dialog.
            (If Description is empty, the value of the <see cref="P:C1.C1Schedule.Printing.TagInfo.Name" /> property 
            will be used as default value.)
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.Type">
      <summary>
            Gets the current tag type.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInfo.InputParams">
      <summary>
            Gets a <see cref="T:C1.C1Schedule.Printing.TagInputParams" /> object that is used by the tag input dialog
            to customize the editor for the current tag. By default, this property is null.
            </summary>
      <remarks>
            The <see cref="T:C1.C1Schedule.Printing.TagInputParams" /> class is abstract, the following types derived from it
            can be used, depending on the current tag's type:
            <list type="bullet"><item><term><see cref="T:C1.C1Schedule.Printing.TagStringInputParams" /></term><description>Used to customize input of a string value.</description></item><item><term><see cref="T:C1.C1Schedule.Printing.TagDateTimeInputParams" /></term><description>Used to customize input of a <see cref="T:System.DateTime" /> value.</description></item><item><term><see cref="T:C1.C1Schedule.Printing.TagListInputParams" /></term><description>Allows to use a ListBox or ComboBox for input of the tag's value.</description></item><item><term><see cref="T:C1.C1Schedule.Printing.TagBoolInputParams" /></term><description>Allows to input a Boolean value using a check box.</description></item><item><term><see cref="T:C1.C1Schedule.Printing.TagNumericInputParams" /></term><description>Used to customize input of a integer value.</description></item></list></remarks>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagInputParams">
      <summary>
            The abstract base class for specialized classes used by the
            tag input dialog to customize input of individual tags.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagInputParams.IsShowLabel">
      <summary>
            Gets or sets a value indicating whether the input form should show the label with the tag's
            description adjacent to the input control.
            </summary>
      <returns>True if the label is to be shown, false otherwise.</returns>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagStringInputParams">
      <summary>
            Represents customization parameters for input of string tag values.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.TagStringInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.TagStringInputParams" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagStringInputParams.MaxLength">
      <summary>
            Gets or sets the maximum length of the input string.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagDateTimeInputParams">
      <summary>
            Represents customization parameters for input of <see cref="T:System.DateTime" /> tag values.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.TagDateTimeInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.TagDateTimeInputParams" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagDateTimeInputParams.Format">
      <summary>
            Gets or sets the format to use in the date/time picker.
            	Long = 1 - the long date format set by the user's operating system,
            	Short = 2 - the short date format set by the user's operating system,
            	Time = 4 - the time format set by the user's operating system,
            	Custom = 8 - the date/time value in a custom format.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagListInputParams">
      <summary>
            Represents customization parameters for input of tag values that can be selected from a list.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.TagListInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.TagListInputParams" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagListInputParams.Type">
      <summary>
            Gets or sets the type of list input to use.
              ListBox = 0,
              ComboBox = 1/
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagListInputParams.Items">
      <summary>
            Gets the collection of list items.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagBoolInputParams">
      <summary>
            Represents customization parameters for input of Boolean tag values.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Printing.TagNumericInputParams">
      <summary>
            Represents customization parameters for input of integer tag values.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.TagNumericInputParams.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.TagNumericInputParams" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagNumericInputParams.Minimum">
      <summary>
            Gets or sets the minimum allowed value.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagNumericInputParams.Maximum">
      <summary>
            Gets or sets the maximum allowed value.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.TagNumericInputParams.Increment">
      <summary>
            Gets or sets the increment for the spin buttons.
            </summary>
    </member>
    <member name="T:C1.Framework.BorderEdges">
      <summary>
            Class that stores colors for individual border edges.
            </summary>
      <remarks>
        <para>In most cases, borders have a single color and this class is not used at all.</para>
        <para>If the members of this class are set to non-transparent colors, then the specified
            colors are used to paint over specific edges.</para>
        <para>This class paints the borders with a bevel so they line up at the corners, but
            it does not handle corners at all, so only rectangular elements can have multi-colored
            borders.</para>
      </remarks>
    </member>
    <member name="M:C1.Framework.BorderEdges.#ctor(C1.Framework.Style)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges" />.
            </summary>
      <param name="style">
        <see cref="P:C1.Framework.BorderEdges.Style" /> that owns the new instance.</param>
    </member>
    <member name="M:C1.Framework.BorderEdges.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges" />.
            </summary>
    </member>
    <member name="M:C1.Framework.BorderEdges.Clone">
      <summary>
            Gets a clone of this <see cref="T:C1.Framework.BorderEdges" /> object.
            </summary>
      <returns>A clone of this <see cref="T:C1.Framework.BorderEdges" /> object.</returns>
    </member>
    <member name="M:C1.Framework.BorderEdges.Equals(System.Object)">
      <summary>
            Returns true if the colors are the same for all edges.
            </summary>
      <remarks>
            This is important when handling persistence and comparing to the default value.
            </remarks>
      <param name="obj">
        <see cref="T:C1.Framework.BorderEdges" /> to compare to this object.</param>
      <returns>True if the colors are the same for all edges.</returns>
    </member>
    <member name="M:C1.Framework.BorderEdges.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:C1.Framework.BorderEdges" /> object.
            </summary>
      <returns>An integer that serves as a hash function for a <see cref="T:C1.Framework.BorderEdges" /> object.</returns>
    </member>
    <member name="P:C1.Framework.BorderEdges.Left">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the left edge of the border.
            </summary>
    </member>
    <member name="P:C1.Framework.BorderEdges.Top">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the top edge of the border.
            </summary>
    </member>
    <member name="P:C1.Framework.BorderEdges.Right">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the right edge of the border.
            </summary>
    </member>
    <member name="P:C1.Framework.BorderEdges.Bottom">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the bottom edge of the border.
            </summary>
    </member>
    <member name="P:C1.Framework.BorderEdges.IsEmpty">
      <summary>
            Gets a value that determines if colors have been specified for any of the edges.
            </summary>
    </member>
    <member name="T:C1.Framework.Corners">
      <summary>
            Represents corners associated with a user interface (UI) element.
            </summary>
    </member>
    <member name="M:C1.Framework.Corners.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners" /> object. 
            </summary>
      <param name="leftTop">Radius of the left top corner, in pixels.</param>
      <param name="rightTop">Radius of the right top corner, in pixels.</param>
      <param name="leftBottom">Radius of the left bottom corner, in pixels.</param>
      <param name="rightBottom">Radius of the right bottom corner, in pixels.</param>
    </member>
    <member name="M:C1.Framework.Corners.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners" /> object.
            </summary>
      <param name="radius">Radius of all corners, in pixels.</param>
    </member>
    <member name="M:C1.Framework.Corners.GetHashCode">
      <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Corners" />. 
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:C1.Framework.Corners.Equals(System.Object)">
      <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Corners" />. 
            </summary>
      <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Corners" />.</param>
      <returns>true if the two <see cref="T:C1.Framework.Corners" /> objects are equal; 
            otherwise, false. </returns>
    </member>
    <member name="M:C1.Framework.Corners.op_Equality(C1.Framework.Corners,C1.Framework.Corners)">
      <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners" /> objects are equivalent. 
            </summary>
      <param name="c1">A <see cref="T:C1.Framework.Corners" /> to test.</param>
      <param name="c2">A <see cref="T:C1.Framework.Corners" /> to test.</param>
      <returns>true if the two <see cref="T:C1.Framework.Corners" /> objects are equal; 
            otherwise, false. </returns>
    </member>
    <member name="M:C1.Framework.Corners.op_Inequality(C1.Framework.Corners,C1.Framework.Corners)">
      <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners" /> objects are not equivalent. 
            </summary>
      <param name="c1">A <see cref="T:C1.Framework.Corners" /> to test.</param>
      <param name="c2">A <see cref="T:C1.Framework.Corners" /> to test.</param>
      <returns>True if the two <see cref="T:C1.Framework.Corners" /> objects are different; 
            otherwise, false. </returns>
    </member>
    <member name="P:C1.Framework.Corners.Empty">
      <summary>
            Provides a <see cref="T:C1.Framework.Corners" /> object with no thickness.
            </summary>
    </member>
    <member name="P:C1.Framework.Corners.LeftTop">
      <summary>
            Gets or sets the radius for the left top corner. 
            </summary>
    </member>
    <member name="P:C1.Framework.Corners.RightTop">
      <summary>
            Gets or sets the radius for the right top corner. 
            </summary>
    </member>
    <member name="P:C1.Framework.Corners.LeftBottom">
      <summary>
            Gets or sets the radius for the left bottom corner. 
            </summary>
    </member>
    <member name="P:C1.Framework.Corners.RightBottom">
      <summary>
            Gets or sets the radius for the right bottom corner. 
            </summary>
    </member>
    <member name="P:C1.Framework.Corners.IsEmpty">
      <summary>
            Returns true if the <see cref="T:C1.Framework.Corners" /> object is empty. 
            </summary>
    </member>
    <member name="T:C1.Framework.Alignment">
      <summary>
            Specifies the text alignment.
            </summary>
    </member>
    <member name="F:C1.Framework.Alignment.NotSet">
      <summary>
            Default value.
            </summary>
    </member>
    <member name="F:C1.Framework.Alignment.Near">
      <summary>
            Near.
            </summary>
    </member>
    <member name="F:C1.Framework.Alignment.Far">
      <summary>
            Far.
            </summary>
    </member>
    <member name="F:C1.Framework.Alignment.Center">
      <summary>
            Center.
            </summary>
    </member>
    <member name="F:C1.Framework.Alignment.Spread">
      <summary>
            Spread.
            </summary>
    </member>
    <member name="T:C1.Framework.ImageAlignment">
      <summary>
            Specifies the image alignment.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.LeftTop">
      <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.CenterTop">
      <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.RightTop">
      <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.LeftCenter">
      <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.CenterCenter">
      <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.RightCenter">
      <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.LeftBottom">
      <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.CenterBottom">
      <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageAlignment.RightBottom">
      <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
    </member>
    <member name="T:C1.Framework.ImageScaling">
      <summary>
            Specifies the image scaling.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.Clip">
      <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.Stretch">
      <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.Scale">
      <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.Tile">
      <summary>
            Tile the image to fill the display area.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.TileStretch">
      <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.TileStretchHorizontal">
      <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.TileStretchVertical">
      <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
    </member>
    <member name="F:C1.Framework.ImageScaling.Hide">
      <summary>
            Hide the image.
            </summary>
    </member>
    <member name="T:C1.Framework.GradientMode">
      <summary>
            Specifies the background gradient mode.
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.None">
      <summary>
            No gradient.
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.Horizontal">
      <summary>
            Horizontal gradient (left to right).
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.Vertical">
      <summary>
            Vertical gradient (top to bottom).
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.DiagonalDown">
      <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.DiagonalUp">
      <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
    </member>
    <member name="F:C1.Framework.GradientMode.Radial">
      <summary>
            Radial gradient.
            </summary>
    </member>
    <member name="T:C1.Framework.TextDirection">
      <summary>
            Specifies the text direction.
            </summary>
    </member>
    <member name="F:C1.Framework.TextDirection.Normal">
      <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
    </member>
    <member name="F:C1.Framework.TextDirection.Up">
      <summary>
            Text is draw vertically, from the bottom up.
            </summary>
    </member>
    <member name="F:C1.Framework.TextDirection.Down">
      <summary>
            Text is draw vertically, from the top down.
            </summary>
    </member>
    <member name="T:C1.Framework.Style">
      <summary>
        <para>The <see cref="T:C1.Framework.Style" /> class contains display attributes that 
            determine the appearance of content on the screen/printer. 
            It includes most elements found in Css styles.</para>
        <para>The <see cref="T:C1.Framework.Style" /> class also contains methods for rendering 
            and measuring content (strings and images) based on the style settings 
            (fonts, margins, etc).</para>
        <para>The <see cref="T:C1.Framework.Style" /> objects are not hierarchical in the sense 
            that they don't have parent styles and don't inherit attributes 
            from the parent style. To create a new style based on an existing one, 
            you would clone the original style, then apply whatever attributes 
            you want to the new style.</para>
        <para>The <see cref="T:C1.Framework.Style" /> objects are hierarchical in the sense that 
            two style attributes (<see cref="P:C1.Framework.Style.Font" /> and <see cref="P:C1.Framework.Style.ForeBrush" />) don't 
            need to be set. If these attributes are not set, they are inherited, 
            but not from a parent <see cref="T:C1.Framework.Style" /> object. Rather, these attributes 
            are inherited from the parent UI object.</para>
        <para>This type of inheritance make it easy to define a font on 
            a <see cref="T:C1.Framework.Style" /> associated with a parent UI object and have that 
            font be automatically applied to all UI objects contained in the parent. 
            By contrast, a <see cref="P:C1.Framework.Style.BackBrush" /> attribute is not explicitly inherited. 
            Instead, the parent UI object paints its client area with a brush, 
            and child UI objects have a transparent background by default,
            so the parent background shows through by default. Other attributes such
            as alignment, margins, padding, etc are also not inherited.</para>
      </summary>
    </member>
    <member name="M:C1.Framework.Style.#ctor(System.String)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style" />.
            </summary>
      <param name="name">The name of the new <see cref="T:C1.Framework.Style" /> object.</param>
    </member>
    <member name="M:C1.Framework.Style.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style" />.
            </summary>
    </member>
    <member name="M:C1.Framework.Style.Inflate(System.Drawing.Rectangle)">
      <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle" /> by the values of
            the current <see cref="T:C1.Framework.Style" /> margins, padding and border.
            </summary>
      <param name="r">A <see cref="T:System.Drawing.Rectangle" /> to inflate.</param>
      <returns>The resulting <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.Framework.Style.Deflate(System.Drawing.Rectangle)">
      <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle" /> by the values of
            the current <see cref="T:C1.Framework.Style" /> margins, padding and border.
            </summary>
      <param name="r">A <see cref="T:System.Drawing.Rectangle" /> to deflate.</param>
      <returns>The resulting <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.Framework.Style.Clone">
      <summary>
            Creates an instance of the <see cref="T:C1.Framework.Style" /> class that is identical 
            to the current <see cref="T:C1.Framework.Style" /> (except for the <see cref="P:C1.Framework.Style.Locked" /> property,
            which is always false for clones).
            </summary>
      <returns>The copy of the current <see cref="T:C1.Framework.Style" />.</returns>
    </member>
    <member name="M:C1.Framework.Style.Copy(C1.Framework.Style)">
      <summary>
            Copies all attributes from another <see cref="T:C1.Framework.Style" /> object.
            </summary>
      <param name="source">
        <see cref="T:C1.Framework.Style" /> object that contains the attributes to copy.</param>
      <remarks>
            The difference between this method and <see cref="M:C1.Framework.Style.Clone" /> is that <b>Clone</b> returns a new
            object, while <b>Copy</b> modifies the attributes in an existing style.
            </remarks>
    </member>
    <member name="M:C1.Framework.Style.Merge(C1.Framework.Style)">
      <summary>
            Copies attributes set to non-default values from another <see cref="T:C1.Framework.Style" /> object.
            </summary>
      <param name="source">
        <see cref="T:C1.Framework.Style" /> object that contains the attributes to copy.</param>
      <remarks>
            The difference between <see cref="M:C1.Framework.Style.Copy(C1.Framework.Style)" /> and <b>Merge</b> is that <b>Merge</b> will not copy
            attributes that are set to their default values in the <paramref name="source" /><see cref="T:C1.Framework.Style" />.
            </remarks>
    </member>
    <member name="M:C1.Framework.Style.OnStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Framework.Style.StyleChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:C1.Framework.Style.Name">
      <summary>
            Gets or sets the style name.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Locked">
      <summary>
            Gets or sets whether the style is locked and cannot be modified.
            </summary>
      <remarks>
            This property is useful when you want to prevent code from accidentally 
            modifying 'stock' styles.
            </remarks>
    </member>
    <member name="P:C1.Framework.Style.Font">
      <summary>
            Gets or sets the font used to paint text within the element.
            </summary>
      <remarks>
            If this property is set to null, the text will be painted using the font
            specified by the parent element's font.
            </remarks>
    </member>
    <member name="P:C1.Framework.Style.BackBrush">
      <summary>
            Gets or sets the brush used to render the element background.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BackImage">
      <summary>
            Gets or sets the background image for the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BackImageAlignment">
      <summary>
            Gets or sets the alignment used to render the background image.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BackImageScaling">
      <summary>
            Gets or sets the scaling used to render the background image.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.ForeBrush">
      <summary>
            Gets or sets the brush used to paint the text within the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BorderBrush">
      <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Padding">
      <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Border">
      <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BorderColor">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to draw the border around the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BorderEdges">
      <summary>
            Gets <see cref="P:C1.Framework.Style.BorderEdges" /> object that defines the colors used to paint each edge of the borders.
            </summary>
      <remarks>
        <para>Normally, this property is empty, and the border is drawn using the color specified by the <see cref="P:C1.Framework.Style.BorderColor" />
            property.</para>
        <para>If any of the members of this property are set to non-transparent colors, then the specified color
            is used to paint the specific border.</para>
        <para>This property is only applicable if the <see cref="P:C1.Framework.Style.Corners" /> are set to zero.</para>
      </remarks>
    </member>
    <member name="P:C1.Framework.Style.Corners">
      <summary>
            Gets or sets the radii of the element corners.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Margins">
      <summary>
            Gets or sets the thickness of the margins around the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Clip">
      <summary>
            Gets or sets whether text content should be clipped to the element area.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.FontPadding">
      <summary>
            Gets or sets whether text bounding rectangle should include padding.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.HorizontalAlignment">
      <summary>
            Gets or sets how elements should be aligned in the horizontal direction.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.VerticalAlignment">
      <summary>
            Gets or sets how elements should be aligned in the vertical direction.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.ImageAlignment">
      <summary>
            Gets or sets how images should be aligned within the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.ImageScaling">
      <summary>
            Gets or sets how images should be scaled within the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.WordWrap">
      <summary>
            Gets or sets whether text should be allowed to wrap within the element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Trimming">
      <summary>
            Gets or sets how to trim characters that do not fit in the space available.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Format">
      <summary>
            Gets or sets the format string used to convert the element value into a string.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Indent">
      <summary>
            Gets or sets the indentation for the first text element.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.ChildSpacing">
      <summary>
            Gets or sets the amount of space between child elements.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Width">
      <summary>
            Gets or sets the style width (set to -1 to use the default width).
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Height">
      <summary>
            Gets or sets the style height (set to -1 to use the default height).
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Cursor">
      <summary>
            Gets or sets the cursor that should be displayed when the mouse is over elements with this style.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.HotkeyPrefix">
      <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.HotkeyPrefix" /> value determining how to display hot keys. 
            </summary>
    </member>
    <member name="P:C1.Framework.Style.TextDirection">
      <summary>
            Gets or sets the direction in which text is rendered.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Hot">
      <summary>
            Gets or sets the style to be used when the element is hot.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Pressed">
      <summary>
            Gets or sets the style to be used when the element is pressed.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.HotPressed">
      <summary>
            Gets or sets the style to be used when the element is hot and pressed.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Disabled">
      <summary>
            Gets or sets the style to be used when the element is disabled.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.Shadow">
      <summary>
            Gets or sets whether the style includes a shadow.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.HotTransitionDelay">
      <summary>
            Gets or sets the delay used to animate transitions to and from the Hot state, in milliseconds.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.DefaultStyle">
      <summary>
            Gets a reference to the default style.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.ForeColor">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the text.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BackColor">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to paint the background.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.GradientMode">
      <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.GradientMode" /> used to paint the background.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.GradientBlend">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.Blend" /> used to paint the background gradient.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.GradientCenter">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF" /> that represents the center of a radial gradient background in percentage units.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.BackColor2">
      <summary>
            Gets or sets the secondary color used to build the background gradient.
            </summary>
    </member>
    <member name="P:C1.Framework.Style.GammaCorrection">
      <summary>
            Gets or sets whether to apply gamma correction to the background gradient.
            </summary>
    </member>
    <member name="E:C1.Framework.Style.StyleChanged">
      <summary>
            Fires when any elements of the <see cref="T:C1.Framework.Style" /> change.
            </summary>
    </member>
    <member name="T:C1.Framework.Theme">
      <summary>
            Class that contains a keyed collection of <see cref="T:C1.Framework.Style" /> objects and methods 
            to serialize the styles into Xml files and streams.
            </summary>
      <remarks>
        <para>The Theme class is a named/keyed collection of <see cref="T:C1.Framework.Style" /> objects.</para>
        <para>The class is designed to be used as a base class for components that need
            to add custom elements to themes in addition to a style collection.</para>
        <para>Inheritors should override the following methods:</para>
        <code>
            // specify the name of the component that will use this theme
            protected virtual string ComponentType
            
            // save component-specific elements to xml
            protected virtual void WriteCustomData(XmlWriter writer)
            
            // load component-specific elements from xml
            protected virtual void ReadCustomData(XmlNode node)
            </code>
      </remarks>
    </member>
    <member name="M:C1.Framework.Theme.#ctor(System.String)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme" />.
            </summary>
      <param name="name">Name of the new theme.</param>
    </member>
    <member name="M:C1.Framework.Theme.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme" />.
            </summary>
    </member>
    <member name="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)">
      <summary>
            Saves a collection of themes into an Xml file.
            </summary>
      <param name="themes">Array containing <see cref="T:C1.Framework.Theme" /> objects.</param>
      <param name="fileName">Name of the Xml file where the themes will be saved.</param>
      <remarks>
            Use the <see cref="M:C1.Framework.Theme.LoadThemes(System.String)" /> method to load the saved themes.
            </remarks>
    </member>
    <member name="M:C1.Framework.Theme.LoadThemes(System.String)">
      <summary>
            Loads a collection of themes from an Xml file.
            </summary>
      <param name="fileName">Name of the Xml file that contains the themes.</param>
      <returns>An array containing the themes loaded from the file.</returns>
      <remarks>
            Use this method to load themes saved with the <see cref="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)" /> method.
            </remarks>
    </member>
    <member name="M:C1.Framework.Theme.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Writes this <see cref="T:C1.Framework.Theme" /> into an <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> that will receive the theme definition.</param>
    </member>
    <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlReader)">
      <summary>
            Reads this <see cref="T:C1.Framework.Theme" /> from an <see cref="T:System.Xml.XmlReader" />.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> that contains the theme definition.</param>
    </member>
    <member name="M:C1.Framework.Theme.WriteXml(System.String)">
      <summary>
            Writes this <see cref="T:C1.Framework.Theme" /> into an Xml file.
            </summary>
      <param name="fileName">Name of the file where the theme will be saved.</param>
    </member>
    <member name="M:C1.Framework.Theme.WriteXml(System.IO.Stream)">
      <summary>
            Writes this <see cref="T:C1.Framework.Theme" /> into an Xml <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> where the theme will be saved.</param>
    </member>
    <member name="M:C1.Framework.Theme.ReadXml(System.String)">
      <summary>
            Reads this <see cref="T:C1.Framework.Theme" /> from an Xml file.
            </summary>
      <param name="fileName">File that contains the theme data.</param>
    </member>
    <member name="M:C1.Framework.Theme.ReadXml(System.IO.Stream)">
      <summary>
            Reads this <see cref="T:C1.Framework.Theme" /> from an Xml <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> that contains the theme data in Xml format.</param>
    </member>
    <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlNode)">
      <summary>
            Reads this <see cref="T:C1.Framework.Theme" /> from an <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> that contains the theme data.</param>
    </member>
    <member name="M:C1.Framework.Theme.ReadXmlString(System.String)">
      <summary>
            Reads this <see cref="T:C1.Framework.Theme" /> from an Xml string.
            </summary>
      <param name="xmlString">String that contains the theme data in Xml format.</param>
    </member>
    <member name="M:C1.Framework.Theme.WriteCustomData(System.Xml.XmlWriter)">
      <summary>
            Writes component-specific data into the theme.
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> where custom theme data is saved.</param>
      <remarks>
            Derived classes should override this method to save any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style" /> collection).
            </remarks>
    </member>
    <member name="M:C1.Framework.Theme.ReadCustomData(System.Xml.XmlNode)">
      <summary>
            Reads component-specific theme data.
            </summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> that contains the theme data.</param>
      <remarks>
            Derived classes should override this method to read any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style" /> collection).
            </remarks>
    </member>
    <member name="M:C1.Framework.Theme.SaveImage(System.Xml.XmlWriter,System.String,System.Drawing.Image)">
      <summary>
            Saves an image into the Xml output stream.
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> that contains the theme definition.</param>
      <param name="propertyName">Name of the node where the image will be stored.</param>
      <param name="image">
        <see cref="T:System.Drawing.Image" /> that will be saved in the stream.</param>
      <remarks>
        <para>The default implementation keeps a list of the images that have been saved. If any
            images are saved more than once, only the index is stored for the repeated instances.</para>
        <para>For example:</para>
        <code>
            SaveImage(writer, "MyImageProperty", img);
            SaveImage(writer, "MyImagePropertyAgain", img);
            SaveImage(writer, "MyImagePropertyAndAgain", img);
            
            [MyImageProperty]base64data[/MyImageProperty]
            [MyImagePropertyAgain index="0"/]
            [MyImagePropertyAndAgain index="0"/]
            </code>
      </remarks>
    </member>
    <member name="M:C1.Framework.Theme.LoadImage(System.Xml.XmlNode)">
      <summary>
            Loads an image from the Xml stream.
            </summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> that contains the image information.</param>
      <returns>An <see cref="T:System.Drawing.Image" /> object.</returns>
      <remarks>
        <para>The first instance of each image is stored as node data (base 64-encoded). When this
            instance is loaded for the first time, the image is stored in an internal image list.</para>
        <para>Subsequent instances of the same image are not stored in the node as binary data;
            an "index" attribute is used instead that specifies the index of the image in the
            internal image collection.</para>
      </remarks>
    </member>
    <member name="M:C1.Framework.Theme.GetKeyForItem(C1.Framework.Style)">
      <summary>
            Styles are indexed by style name.
            </summary>
      <param name="style">Collection member.</param>
      <returns>Style name (must be unique within collection).</returns>
    </member>
    <member name="M:C1.Framework.Theme.SaveBinaryObject(System.Xml.XmlWriter,System.Object)">
      <summary>
            Saves a binary object into  the specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> that will receive the object data.</param>
      <param name="obj">An object to write.</param>
    </member>
    <member name="M:C1.Framework.Theme.LoadBinaryObject(System.Xml.XmlNode)">
      <summary>
            Loads a binary object from the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">A <see cref="T:System.Xml.XmlNode" /> which contains the object data.</param>
      <returns>The binary object.</returns>
    </member>
    <member name="P:C1.Framework.Theme.Name">
      <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
    </member>
    <member name="T:C1.Framework.Thickness">
      <summary>
            Represents padding, border or margin information associated with a 
            user interface (UI) element.
            </summary>
    </member>
    <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness" />. 
            </summary>
      <param name="left">Thickness of the left edge, in pixels.</param>
      <param name="top">Thickness of the top edge, in pixels.</param>
      <param name="right">Thickness of the right edge, in pixels.</param>
      <param name="bottom">Thickness of the bottom edge, in pixels.</param>
    </member>
    <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness" />.
            </summary>
      <param name="leftRight">Thickness of the left and right edges, in pixels.</param>
      <param name="topBottom">Thickness of the top and bottom edges, in pixels.</param>
    </member>
    <member name="M:C1.Framework.Thickness.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness" />.
            </summary>
      <param name="width">Thickness of all edges, in pixels.</param>
    </member>
    <member name="M:C1.Framework.Thickness.Inflate(System.Int32,System.Int32)">
      <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness" /> by the specified values.
            </summary>
      <param name="width">The inflate size for vertical edges.</param>
      <param name="height">The inflate size for horizontal edges.</param>
      <returns>The new <see cref="T:C1.Framework.Thickness" />.</returns>
    </member>
    <member name="M:C1.Framework.Thickness.Inflate(System.Int32)">
      <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness" /> by the specified size.
            </summary>
      <param name="size">The size.</param>
      <returns>The new <see cref="T:C1.Framework.Thickness" />.</returns>
    </member>
    <member name="M:C1.Framework.Thickness.Inflate(System.Drawing.Rectangle)">
      <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle" /> by the current <see cref="T:C1.Framework.Thickness" />.
            </summary>
      <param name="r">A <see cref="T:System.Drawing.Rectangle" /> to deflate.</param>
      <returns>The inflated <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.Framework.Thickness.Deflate(System.Drawing.Rectangle)">
      <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle" /> by the current <see cref="T:C1.Framework.Thickness" />.
            </summary>
      <param name="r">A <see cref="T:System.Drawing.Rectangle" /> to deflate.</param>
      <returns>The deflated <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:C1.Framework.Thickness.GetHashCode">
      <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Thickness" />. 
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:C1.Framework.Thickness.Equals(System.Object)">
      <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Thickness" />. 
            </summary>
      <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Thickness" />.</param>
      <returns>true if the two <see cref="T:C1.Framework.Thickness" /> objects are equal; 
            otherwise, false. </returns>
    </member>
    <member name="M:C1.Framework.Thickness.op_Equality(C1.Framework.Thickness,C1.Framework.Thickness)">
      <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness" /> objects are equivalent. 
            </summary>
      <param name="t1">A <see cref="T:C1.Framework.Thickness" /> to test.</param>
      <param name="t2">A <see cref="T:C1.Framework.Thickness" /> to test.</param>
      <returns>true if the two <see cref="T:C1.Framework.Thickness" /> objects are equal; 
            otherwise, false. </returns>
    </member>
    <member name="M:C1.Framework.Thickness.op_Inequality(C1.Framework.Thickness,C1.Framework.Thickness)">
      <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness" /> objects are not equivalent. 
            </summary>
      <param name="t1">A <see cref="T:C1.Framework.Thickness" /> to test.</param>
      <param name="t2">A <see cref="T:C1.Framework.Thickness" /> to test.</param>
      <returns>True if the two <see cref="T:C1.Framework.Thickness" /> objects are different; 
            otherwise, false. </returns>
    </member>
    <member name="P:C1.Framework.Thickness.Empty">
      <summary>
            Provides a <see cref="T:C1.Framework.Thickness" /> object with no thickness.
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Left">
      <summary>
            Gets or sets the thickness value for the left edge. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Top">
      <summary>
            Gets or sets the thickness value for the top edge. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Right">
      <summary>
            Gets or sets the thickness value for the right edge. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Bottom">
      <summary>
            Gets or sets the thickness value for the bottom edge. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.IsEmpty">
      <summary>
            Returns true if the <see cref="T:C1.Framework.Thickness" /> object is empty. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Height">
      <summary>
            Gets the combined thickness for the top and bottom edges. 
            </summary>
    </member>
    <member name="P:C1.Framework.Thickness.Width">
      <summary>
            Gets the combined thickness for the right and left edges. 
            </summary>
    </member>
    <member name="T:C1.Framework.ResourceLoader">
      <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetImages">
      <summary>
            Returns all images from the entry assembly. 
            </summary>
      <returns>A collection of name/image pairs.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetImages(System.Reflection.Assembly)">
      <summary>
            Returns all images from the specified assembly. 
            </summary>
      <param name="a">An <see cref="T:System.Reflection.Assembly" /> to load images from.</param>
      <returns>A collection of name/image pairs.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetImage(System.String)">
      <summary>
            Loads an image from the entry assembly. 
            </summary>
      <param name="name">The case-insensitive name of the requested image.</param>
      <returns>The <see cref="T:System.Drawing.Image" /> if it is found; null otherwise.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetImage(System.Reflection.Assembly,System.String)">
      <summary>
            Loads an image from the specified assembly. 
            </summary>
      <param name="a">An <see cref="T:System.Reflection.Assembly" /> to load image from.</param>
      <param name="name">The case-insensitive name of the requested image.</param>
      <returns>The <see cref="T:System.Drawing.Image" /> if it is found; null otherwise.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetStream(System.String)">
      <summary>
            Loads the specified manifest resource from the entry assembly. 
            </summary>
      <param name="name">The case-insensitive name of the manifest resource being requested.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
      <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
      <param name="a">An <see cref="T:System.Reflection.Assembly" /> to load resource from.</param>
      <param name="name">The case-insensitive name of the manifest resource being requested.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
    </member>
    <member name="M:C1.Framework.ResourceLoader.DecodeImage(System.String)">
      <summary>
            Decodes an image from a base-64-encoded string.
            </summary>
      <param name="data">String that contains the encoded image data.</param>
      <returns>The <see cref="T:System.Drawing.Image" /> encoded in the string.</returns>
    </member>
    <member name="T:C1.Framework.ScrollableControl">
      <summary>
            Defines an abstract base class for controls that support auto-scrolling behavior. 
            </summary>
    </member>
    <member name="M:C1.Framework.ScrollableControl.#ctor">
      <summary>
            Initializes the <see cref="T:C1.Framework.ScrollableControl" /> properties.
            </summary>
    </member>
    <member name="M:C1.Framework.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
      <summary>
            Override this method to get notifications when the control scrolls.
            </summary>
      <param name="sb">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
      <summary>
            This method is used to set the scroll rectangle.
            Override it to customize the scrolling behavior.
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Framework.ScrollableControl.HandleScrollMessage(System.Windows.Forms.Message)">
      <summary>
            Handles scroll messages.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />.
            Override this method to account for scrollbars size.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.OnSizeChanged(System.EventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:C1.Framework.ScrollableControl.GetScrollSize(System.Int32)">
      <summary>
            Retrieves the specified scroll bar range.
            </summary>
      <param name="nBar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Framework.ScrollableControl.GetScrollPos(System.Int32)">
      <summary>
            Gets the scroll position of the specified scroll bar.
            </summary>
      <param name="nBar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Framework.ScrollableControl.GetTrackPos(System.Int32)">
      <summary>
            Gets the immediate position of the specified scroll box that the user is dragging.
            </summary>
      <param name="nBar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Framework.ScrollableControl.SetScrollPos(System.Int32,System.Int32)">
      <summary>
            Sets the position of the specified scroll bar.
            </summary>
      <param name="nBar">
      </param>
      <param name="pos">Specifies the new position of the scroll box. 
            The position must be within the scrolling range. </param>
      <returns>The previous position of the scroll box indicates success. 
            Zero indicates failure</returns>
    </member>
    <member name="P:C1.Framework.ScrollableControl.Text">
      <summary>
            Gets or sets the text associated with the control.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.ScrollBars">
      <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.ScrollPosition">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Point" /> value determining the current scroll position.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.ScrollSize">
      <summary>
            Gets or sets the size of the document.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.ScrollTrack">
      <summary>
            Gets or sets whether the control should scroll as the user drags the scrollbar thumb.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.BorderStyle">
      <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.BorderStyle" /> value determining 
            the type of border around the control.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.Cursor">
      <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.Cursor" /> that appears when 
            the mouse moves over the control.
            </summary>
    </member>
    <member name="P:C1.Framework.ScrollableControl.ScrollableRectangle">
      <summary>
            This property is used to set the scroll page size.
            Override it to customize the scrolling behavior.
            </summary>
    </member>
    <member name="T:C1.Framework.XView">
      <summary>
        <para>Control that hosts X elements.</para>
        <para>The control has an <see cref="P:C1.Framework.XView.Element" /> property that gets or
            sets the element to be displayed.</para>
        <para>The control is responsible for displaying the element, providing
            scrolling, and routing mouse and keyboard events to the hosted element.</para>
      </summary>
    </member>
    <member name="M:C1.Framework.XView.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.XView" /> control.
            </summary>
    </member>
    <member name="M:C1.Framework.XView.CreateGraphics">
      <summary>
            Creates a <see cref="T:System.Drawing.Graphics" /> object for the control.
            </summary>
      <returns>A <see cref="T:System.Drawing.Graphics" /> object for the control.</returns>
      <remarks>
            The <see cref="T:System.Drawing.Graphics" /> object returned by this method reflects the current
            settings for the <see cref="P:C1.Framework.XView.SmoothingMode" /> and <see cref="P:C1.Framework.XView.TextRenderingHint" />
            properties.
            </remarks>
    </member>
    <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Point)">
      <summary>
            Scrolls a given point into view.
            </summary>
      <param name="pt">Point to scroll into view.</param>
    </member>
    <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Rectangle)">
      <summary>
            Scrolls a given rectangle into view.
            </summary>
      <param name="r">Rectangle to scroll into view.</param>
    </member>
    <member name="M:C1.Framework.XView.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the control. 
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            Determines whether the specified key is a regular input key or 
            a special key that requires preprocessing.
            </summary>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <returns>True if the specified key is a regular input key; otherwise, false.</returns>
    </member>
    <member name="M:C1.Framework.XView.OnGotFocus(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnLeave(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnValidating(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.
            </summary>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnValidated(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event. 
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnClick(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnDoubleClick(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseEnter(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnMouseLeave(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.IsMouseInsideXView">
      <summary>
            Returns True if the mouse pointer is inside the XView control.
            </summary>
    </member>
    <member name="M:C1.Framework.XView.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
      <summary>
            Remove hosted controls that belong to elements which became invisible or
            belong to a different control now.
            </summary>
      <remarks>
        <para>The host element is responsible for restoring the control's Parent property
            when it updates its position.</para>
        <para>Note: <see cref="T:C1.Framework.XView" /> determines that a <see cref="T:System.Windows.Forms.Control" />belongs to an 
            <see cref="P:C1.Framework.XView.Element" /> if the control's <see cref="P:System.Windows.Forms.Control.Tag" /> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control" /> object.</para>
      </remarks>
      <param name="e">
        <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.OnHandleDestroyed(System.EventArgs)">
      <summary>
            Remove hosted controls before disposing of the parent control.
            </summary>
      <remarks>
        <para>This allows the host element to remain valid even if their parent view is disposed.
            To dispose of the hosted control, call Dispose on the hosted control directly.</para>
        <para>Note: <see cref="T:C1.Framework.XView" /> determines that a <see cref="T:System.Windows.Forms.Control" />belongs to an 
            <see cref="P:C1.Framework.XView.Element" /> if the control's <see cref="P:System.Windows.Forms.Control.Tag" /> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control" /> object.</para>
      </remarks>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.Framework.XView.BuildScrollableRectangle(System.Int32,System.Int32)">
      <summary>
             Sets the scroll rectangle.
            </summary>
      <param name="dx">Amount to scroll in the x direction, in pixels.</param>
      <param name="dy">Amount to scroll in the y direction, in pixels.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings">
      <summary>
            Contains localizable design-time strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Warning">
      <summary>
            Gets the "Warning" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Question">
      <summary>
            Gets the "Question" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.None">
      <summary>
            Gets the "None" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Error">
      <summary>
            Gets the "Error" string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.RootResourceGroup">
      <summary>
            Contains localizable design-time strings for the root group.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.RootResourceGroup.ReadOnlyFile">
      <summary>
            Gets the "overwrite a readonly file?" format string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.RootResourceGroup.Errors">
      <summary>
            Contains error strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.RootResourceGroup.Errors.SaveToFile">
      <summary>
            Gets the "errors while saving resources" format string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.StringsDesigner">
      <summary>
            Contains strings designer strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.StringsDesigner.AllStringsCaption">
      <summary>
            Gets the "All" string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.StringsDesigner.Errors">
      <summary>
            Contains error strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.StringsDesigner.Errors.CantInitializeDte">
      <summary>
            Gets the "Localizer can be used under MS Visual Studio only." string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer">
      <summary>
            Contains localizer strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.DesignActionCaption">
      <summary>
            Gets the "Localize..." string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.CultureAlreadyExists">
      <summary>
            Gets the "Culture [{0}] already added to the current translation." format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.LoadResXStringsException">
      <summary>
            Gets the "Exception occurs during loading strings from resource file:\r{0}\rException message:\r{1}" format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.SaveQuestion">
      <summary>
            Gets the "The translation has been changed, save?" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.NewTranslation">
      <summary>
            Gets the "Select product to translate" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.SaveAsDialogCaption">
      <summary>
            Gets the "Select project to store translation" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.ImageResourceNotFound">
      <summary>
            Gets the "Resource image with name [{0}] is not found." format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.InvariantCultureDescription">
      <summary>
            Gets the "Invariant culture" string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.DeleteCultureWarning">
      <summary>
            Gets the "You have selected {0} culture to delete, there are {1} strings of this culture. Are you sure?" format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.DeleteCulturesWarning">
      <summary>
            Gets the "You have selected {0} cultures to delete, there are {1} strings of these cultures. Are you sure?" format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.CantCreateLocalizedFolder">
      <summary>
            Gets the "Can't create the [{0}] folder in the project.\rError message:\r{1}" format string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.OpenTranslationDialog">
      <summary>
            Contains the open translation dialog strings.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.OpenTranslationDialog.SolutionMask">
      <summary>
            Gets the "Solution '{0}'" format string.
            </summary>
    </member>
    <member name="P:C1.C1Preview.Design.Localization.DesignLocalizationStrings.Localizer.OpenTranslationDialog.NoCultures">
      <summary>
            Gets the "Can't build list of cultures" string.
            </summary>
    </member>
    <member name="T:C1.C1Preview.Design.LocalizeActionList">
      <summary>
            Represents a localization <see cref="T:System.ComponentModel.Design.DesignerActionList" />.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Design.LocalizeActionList.#ctor(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentDesigner)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Preview.Design.LocalizeActionList" /> class.
            </summary>
      <param name="component">The designed component.</param>
      <param name="designer">The component designer.</param>
    </member>
    <member name="M:C1.C1Preview.Design.LocalizeActionList.GetSortedActionItems">
      <summary>
            Returns the list of associated action items.
            </summary>
      <returns>The list containing the "Localize" item.</returns>
    </member>
    <member name="M:C1.C1Preview.Design.LocalizeActionList.Localize">
      <summary>
            Performs localizaion.
            </summary>
    </member>
    <member name="M:C1.C1Preview.Design.LocalizeActionList.Localize(System.ComponentModel.Design.ComponentDesigner)">
      <summary>
            Performs localizaion.
            </summary>
      <param name="designer">The designer to localize.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.ScheduleViewEnum">
      <summary>
            Determines the type of view to display in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.DayView">
      <summary>
            Day view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.WorkWeekView">
      <summary>
            Work week view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.WeekView">
      <summary>
            Week view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.MonthView">
      <summary>
            Month view.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.WeekViewStyleEnum">
      <summary>
            Determines the type of week view to display in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.WeekViewStyleEnum.Office2003">
      <summary>
            Office 2003 week view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.WeekViewStyleEnum.Office2007">
      <summary>
            Office 2007 week view (7 full days as in Day View).
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.EditOptions">
      <summary>
            Determines the set of edit options available to the end-user.	
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.None">
      <summary>
            None of edit options are available to the end-user.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.AllowInplaceEdit">
      <summary>
            Allows activation of an in-place editor for an appointment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.AllowDrag">
      <summary>
            Allows dragging and resizing operations for an appointment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentEdit">
      <summary>
            Allows editing of an appointment by an end-user. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentCreate">
      <summary>
            Allows creating of new appointments by an end-user. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentDelete">
      <summary>
            Allows deleting of an appointment by an end-user. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.EditOptions.All">
      <summary>
            Allows all edit operations. It is the default value.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.SelectionChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.SelectionChanged" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.SelectionChangedEventArgs.Selection">
      <summary>
            Gets an array of selected dates.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.TimeInterval">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.TimeInterval" /> object represents continuous interval of time.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.TimeInterval.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.TimeInterval" /> class.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing 
            the beginning of time interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing 
            the end of time interval.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.TimeInterval.Start">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value 
            representing the beginning of time interval.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.TimeInterval.End">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value 
            representing the end of time interval.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.SelectedIntervalChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.SelectedIntervalChanged" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.SelectedIntervalChangedEventArgs.Interval">
      <summary>
            Gets the <see cref="T:C1.Win.C1Schedule.TimeInterval" /> object representing currently 
            selected time interval.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeViewChangeEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeViewChange" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeViewChangeEventArgs.ViewType">
      <summary>
            Gets or sets <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum" /> value determining 
            which type of view should be selected.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeViewChangeEventArgs.Dates">
      <summary>
            Gets or sets the range of dates which should be selected in the view. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.SelectionType">
      <summary>
            Determines the type of UI element which is currently selected in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control UI.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.Appointment">
      <summary>
            Appointment element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.TimeInterval">
      <summary>
            Either day element or time slot element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.DayTitle">
      <summary>
            Day title.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.TimeRuler">
      <summary>
            Time ruler element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.GroupHeader">
      <summary>
            The group header.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.SelectionType.None">
      <summary>
            The selection area belongs to the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control, 
            but doesn't belong to any active area described by the other <see cref="T:C1.Win.C1Schedule.SelectionType" /> members.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeContextMenuShowEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeContextMenuShow" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeContextMenuShowEventArgs.Appointment">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.BeforeContextMenuShowEventArgs.Appointment" /> object for which context menu is about to show. 
            </summary>
      <remarks>This property can be null.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeContextMenuShowEventArgs.SelectionType">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.BeforeContextMenuShowEventArgs.SelectionType" /> value determining the UI element type for which context menu is about to show.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeAppointmentTooltipShowEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentTooltipShow" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentTooltipShowEventArgs.Text">
      <summary>
            Gets or sets tooltip text. 
            </summary>
      <remarks>Use html encoding to format the text.</remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeDayTooltipShowEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Calendar.BeforeDayTooltipShow" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeDayTooltipShowEventArgs.Text">
      <summary>
            Gets or sets tooltip text. The default text is an empty string. 
            </summary>
      <remarks>Use html encoding to format the text.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeDayTooltipShowEventArgs.Day">
      <summary>
            Gets the date for which tooltip is about to be shown.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeDayFormatEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Calendar.BeforeDayFormat" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeDayFormatEventArgs.Date">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value determining the currently formatted date.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeDayFormatEventArgs.Style">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.BeforeDayFormatEventArgs.Style" /> object, which will be used for displaying the date.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.AppointmentIcons">
      <summary>
            Determines the set of default icons shown in the appointment element.	
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.Occurrence">
      <summary>
            Shows 'occurrence' icon.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.Exception">
      <summary>
            Shows 'exception' icon.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.Locked">
      <summary>
            Shows 'locked' icon (for private appointments). 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.Reminder">
      <summary>
            Shows 'reminder' icon if reminder is set for appointment. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.AppointmentIcons.Continued">
      <summary>
            Shows 'continued' icon if element is a second or later 
            part of the single appointment. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentFormat" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs.Text">
      <summary>
            Gets or sets the text displayed in the appointment element. 
            </summary>
      <remarks>Use html encoding to format the text.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs.Icons">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Schedule.AppointmentIcons" /> value, specifying the 
            set of icons to be displayed in the appointment element.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs.BackColor">
      <summary>
            Gets or sets <see cref="T:System.Drawing.Color" /> value specifying custom
            background color for the appointment element. 
            </summary>
      <remarks>Leave this value <see cref="F:System.Drawing.Color.Empty" /> to
            use default background color determined by the <see cref="P:C1.C1Schedule.Appointment.Label" /> property.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs.BackColor2">
      <summary>
            Gets or sets <see cref="T:System.Drawing.Color" /> value specifying custom
            background gradient color for the appointment element. 
            </summary>
      <remarks>Leave this value <see cref="F:System.Drawing.Color.Empty" /> to
            use default background gradient color determined 
            by the <see cref="P:C1.C1Schedule.Appointment.Label" /> property.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeAppointmentFormatEventArgs.UIElementDate">
      <summary>
            Gets the date of the current UI element representing appointment.
            </summary>
      <remarks>Multi day appointments are represented by several UI elements. Use this property
            to distinguish the first UI element, the second one, etc...</remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeTimeFormatEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeTimeFormat" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeTimeFormatEventArgs.Start">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value determining the start date and time of the time interval to format.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeTimeFormatEventArgs.Duration">
      <summary>
            Gets the <see cref="T:System.TimeSpan" /> value determining the duration of the time interval to format.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeTimeFormatEventArgs.WorkTime">
      <summary>
            Gets or sets a value indicating whether time interval should be displayed as a working time.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeTimeFormatEventArgs.Background">
      <summary>
            Gets or sets <see cref="T:System.Drawing.Color" /> value specifying custom
            background color for the time interval element. 
            </summary>
      <remarks>Leave this value <see cref="F:System.Drawing.Color.Empty" /> to
            use default background color determined by the <see cref="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo" /> settings 
            and by the <see cref="P:C1.Win.C1Schedule.BeforeTimeFormatEventArgs.WorkTime" /> property value.</remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.AppointmentLinkClickedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.AppointmentLinkClicked" /> event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.AppointmentLinkClickedEventArgs.Button">
      <summary>
            Gets the button that was clicked on the link.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.AppointmentLinkClickedEventArgs.HRef">
      <summary>
            Gets the value of the link's HREF attribute.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.AppointmentLinkClickedEventArgs.Target">
      <summary>
            Gets the value of the link's TARGET attribute.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.SelectedAppointmentsChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.SelectedAppointmentsChanged" /> event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.SelectedAppointmentsChangedEventArgs.Appointments">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object representing
            currently selected appointments. This value can be null if 
            there is no selected appointment.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeGroupHeaderFormat" /> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs.Group">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value determining the currently formatted date.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs.Html">
      <summary>
            Gets or sets the html text displayed in the group header.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs.TriangleTab">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining the group header tab appearance.
            If this property value is true, C1Schedule will show MS Outlook 2010-alike group headers. 
            If this property value is false, C1Schedule will display rectangular group headers.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs.Style">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs.Style" /> object, which will be used for displaying the group header.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Localization.Strings">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Localization.Strings" /> class contains static properties used for localization.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Localization.Strings.ResourceManager">
      <summary>
            The <see cref="P:C1.Win.C1Schedule.Localization.Strings.ResourceManager" /> object used for lookup resources.
            </summary>
      <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.Localization.Strings.UICulture">
      <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo" /> object used as fallback culture.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Localization.Strings.C1Schedule.Exceptions.StartEndValidationFailed">
      <summary>
            Determines the warning message, shown when Appointment End property value is greater than the Start property value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Localization.Strings.MiscStrings.PrintdocInitializationFailed">
      <summary>
            Determines the warning message, shown when C1PrintDocument can't be initialized.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Printing.PrintOptionsForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Printing.PrintOptionsForm" /> allows selecting printing style from 
            the list of available styles and setting other printing options.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintOptionsForm.#ctor(C1.C1Schedule.Printing.PrintInfo,C1.C1Schedule.Printing.PrintStyle,C1.C1Schedule.Printing.PrintContextType)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Printing.PrintOptionsForm" /> form.
            </summary>
      <param name="info">The <see cref="T:C1.C1Schedule.Printing.PrintInfo" /> object.</param>
      <param name="defaultStyle">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object which should be selected initially.</param>
      <param name="printContext">The <see cref="T:C1.C1Schedule.Printing.PrintContextType" /> value, determining the filter of styles which should be shown in a form.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintOptionsForm.SelectedStyle">
      <summary>
            Returns the currently selected <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintOptionsForm.StartDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining beginning of the printing range.
            </summary>
      <remarks>This property does make sense only for styles with PrintContextType.DateRange.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintOptionsForm.EndDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining the end of the printing range.
            </summary>
      <remarks>This property does make sense only for styles with PrintContextType.DateRange.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintOptionsForm.HidePrivateAppointments">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should
            hide details of private appointments in resulting document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintOptionsForm.PrintSelectedCalendar">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should only
            show appointments from the currently selected <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> in the resulting document.
            By default resulting document contains all appointments regardless of the C1Schedule grouping.
            Set this property to true to show appointments from the currently selected <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" />.
            </summary>
      <remarks>This property only makes sense if the <see cref="P:C1.Win.C1Schedule.C1Schedule.GroupBy" /> property is set.</remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.Printing.PrintStyleOptionsForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Printing.PrintStyleOptionsForm" /> allows setting properties of the specified printing style.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintStyleOptionsForm.#ctor(C1.C1Schedule.Printing.PrintStyle,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Printing.PrintStyleOptionsForm" /> form.
            </summary>
      <param name="style">The <see cref="T:C1.C1Schedule.Printing.PrintStyle" /> for editing.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> used by the form.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintStyleOptionsForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Printing.PrintProgressForm">
      <summary>
            Print progress form.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintProgressForm.#ctor(C1.C1Schedule.Printing.PrintInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Printing.PrintProgressForm" /> form.
            </summary>
      <param name="info">The <see cref="T:C1.C1Schedule.Printing.PrintInfo" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Printing.PrintProgressForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintProgressForm.TxtPrinting">
      <summary>
            Gets or sets the text used to display the current progress while printing/previewing.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintProgressForm.TxtTitle">
      <summary>
            Gets or sets the Window caption.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintProgressForm.Progress">
      <summary>
            Gets or sets the <see cref="T:System.Double" /> value specifying 
            an approximate progress ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Printing.PrintProgressForm.CancelClicked">
      <summary>
            Gets a value indicating whether the print/preview has been cancelled.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.ScheduleGroupItem">
      <summary>
            Holds all the data required for displaying individual UI part for the single resource, 
            category or contact when the <see cref="P:C1.Win.C1Schedule.C1Schedule.GroupBy" /> property is set,
            or default UI otherwise.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.ScheduleGroupItem.ToString">
      <summary>
            Returns the string representation of the current <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object.
            </summary>
      <returns>The <see cref="P:C1.Win.C1Schedule.ScheduleGroupItem.DisplayName" /> property value.</returns>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.IsSelected">
      <summary>
            Gets or sets a value that determines whether the UI element that has this 
            <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> as a DataContext is selected.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.Scheduler">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.ScheduleGroupItem.Scheduler" /> that <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> belongs to.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.BaseObject" /> object representing the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object owner.
            This property can be null for an empty group item.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.Name">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the name of the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.DisplayName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing the display name of the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.PaletteColor">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> value determining palette which should be used to display
            the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.IsChecked">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether this <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object should be
            displayed in UI.  
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItem.Tag">
      <summary>
            Gets or sets the object that contains custom data about the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.ScheduleGroupItemCollection">
      <summary>
            Represents a collection of the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> objects.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItemCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object at the specified index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.ScheduleGroupItemCollection.Item(System.Object)">
      <summary>
            Gets a <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object with the specified owner.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.C1Schedule">
      <summary> The <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control is a fully functional 
            Outlook-style schedule that allows users to add, edit, and manage their appointments 
            by loading all of the appointment data either from a bound DataSource or 
            the built-in DataSource, which saves and loads data from binary, XML or iCal file formats. 
            By default, the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control will display 
            the appointment data in the <see cref="F:C1.Win.C1Schedule.ScheduleViewEnum.DayView" /> mode, 
            and the current day is the first date displayed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.NavigateToScheduleGroup(System.Int32)">
      <summary>
            Navigates the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control back or forth to another 
            <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object by the specified increment.
            </summary>
      <param name="increment">The <see cref="T:System.Int32" /> value specifying the number of groups to navigate.</param>
      <remarks>This method only makes sense when the <see cref="P:C1.Win.C1Schedule.C1Schedule.GroupBy" /> property is set.</remarks>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.Compare(C1.C1Schedule.Appointment,C1.C1Schedule.Appointment)">
      <summary>
            Performs a comparison of two <see cref="T:C1.C1Schedule.Appointment" /> objects based on their start time and subject. 
            </summary>
      <param name="x">The first <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <param name="y">The second <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <returns>The <see cref="T:System.Int32" /> value determining the comparison result.</returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.ShouldSerializeTheme">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.ShouldSerializeVisualStyle">
      <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1Schedule.C1Schedule.VisualStyle" /> 
            property is set explicitly and should be persisted.
            </summary>
      <returns>True if the property was explicitly set by the user.</returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.ResetVisualStyle">
      <summary>
            Resets the value of the <see cref="P:C1.Win.C1Schedule.C1Schedule.VisualStyle" /> ambient property.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.OnAmbientChangedVisualStyle">
      <summary>
            Method invoked when the <see cref="P:C1.Win.C1Schedule.C1Schedule.VisualStyle" /> property changes.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.GetDateTimeAtPoint(System.Drawing.Point)">
      <summary>
            Returns the <see cref="T:System.DateTime" /> value which is located
            in the Schedule at the given screen point.
            </summary>
      <param name="location">The <see cref="T:System.Drawing.Point" /> value in screen coordinates.</param>
      <returns>The <see cref="T:System.DateTime" /> value at given point if it's a point inside 
            of scheduled area; the value of <see cref="P:C1.Win.C1Schedule.C1Schedule.CurrentDate" /> property in other case.</returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.GoToDate(System.DateTime)">
      <summary>
            Sets the specified date as the start date of the scheduler, 
            meaning that on this date the scheduler will show its data. 
            This operation doesn't change the type of view.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.EnsureVisibleTime(System.TimeSpan)">
      <summary>
            Ensures that the specified time is visible within the control, 
            scrolling the contents if necessary.
            This method doesn't make sense for MonthView and Office 2003 WeekView modes.
            </summary>
      <param name="time">
      </param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.ShowDates(System.DateTime[])">
      <summary>
            Shows specified dates in the scheduler choosing appropriate type of view.
            </summary>
      <param name="dates">The array of <see cref="T:System.DateTime" /> values.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.Export(System.Object,System.String)">
      <summary>
            Shows the <see cref="T:System.Windows.Forms.SaveFileDialog" /> and exports specified data to the selected file.
            </summary>
      <param name="parameter">an <see cref="T:System.Object" /> to export. This parameter can be one of the next:
            <list type="bullet"><item><term>null</term><description> for export all C1Schedule data;</description></item><item><term><see cref="T:C1.C1Schedule.Appointment" />;</term></item><item><term><see cref="T:System.Collections.Generic.IList`1" />.</term></item></list></param>
      <param name="dialogTitle">the <see cref="T:System.String" /> value used as a SaveFileDialog title.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.Import(System.String)">
      <summary>
            Shows the <see cref="T:System.Windows.Forms.OpenFileDialog" /> and tries to export data from the selected file.
            </summary>
      <param name="dialogTitle">the <see cref="T:System.String" /> value used as an OpenFileDialog title.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.CreateAppointment">
      <summary>
            Creates a new <see cref="T:C1.C1Schedule.Appointment" /> object with default settings, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments" /> collection. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.CreateAllDayEvent">
      <summary>
            Creates a new all-day <see cref="T:C1.C1Schedule.Appointment" /> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments" /> collection. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.CreateReccuringAllDayEvent">
      <summary>
            Creates a new recurring all-day <see cref="T:C1.C1Schedule.Appointment" /> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments" /> collection. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.CreateReccuringAppointment">
      <summary>
            Creates a new recurring <see cref="T:C1.C1Schedule.Appointment" /> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments" /> collection. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.EditAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Shows specified <see cref="T:C1.C1Schedule.Appointment" /> object in the Edit Appointment dialog. 
            </summary>
      <param name="app">The <see cref="T:C1.C1Schedule.Appointment" /> object to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.RemoveAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Removes specified <see cref="T:C1.C1Schedule.Appointment" /> object from the <see cref="T:C1.C1Schedule.AppointmentStorage" />. 
            </summary>
      <param name="app">The <see cref="T:C1.C1Schedule.Appointment" /> object to remove.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.SelectAppointment(C1.C1Schedule.Appointment,System.Boolean)">
      <summary>
            Selects specified <see cref="T:C1.C1Schedule.Appointment" /> object in the user interface.
            </summary>
      <remarks>This method doesn't change or scroll current view.
            Use <see cref="M:C1.Win.C1Schedule.C1Schedule.GoToDate(System.DateTime)" /> method to bring desired <see cref="T:C1.C1Schedule.Appointment" /> 
            object into view:
            <code>GoToDate(appointment.Start);</code></remarks>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to select.</param>
      <param name="extendSelection">The <see cref="T:System.Boolean" /> value specifying the kind
            of selection to be made. 
            If true, specified <see cref="T:C1.C1Schedule.Appointment" /> object 
            will be added to the current selection.
            If false, current selection will be changed 
            by the specified <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate">
      <summary>
            Prevents the control from drawing until the <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate" /> method 
            is called.
            </summary>
      <remarks>Call to <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate" /> method must be paired with 
            a call to <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate" /> method.
            Use try ... finally statements to ensure that <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate" /> method
            is always called.</remarks>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.EndUpdate">
      <summary>
            Resumes drawing of the control after drawing is suspended by 
            the <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate" /> method.
            </summary>
      <remarks>Call to <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate" /> method must be paired with 
            a call to <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate" /> method.
            Use try ... finally statements to ensure that <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate" /> method
            is always called.</remarks>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.Refresh">
      <summary>
            Refreshes the control.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Schedule.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.IsGrouped">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether grouping has been set for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.SelectedGroupItem">
      <summary>
            Gets the selected <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> object or returns null if the selection is empty. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.GroupPageSize">
      <summary>
            Gets or sets the <see cref="T:System.Int32" /> value determining the maximum number of the <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> objects
            displayed in UI at the same time. Increasing this value might affect performance.
            </summary>
      <value>The default value is 2.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.GroupBy">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the type of grouping.
            </summary>
      <value>The default value is an empty string.</value>
      <remarks>
        <para>
            This property can be equal to one for the next supported keywords:
            <list><item><term>An empty string</term><description>no grouping.</description></item><item><term>"Owner"</term><description>grouping by Appointment.Owner property value.</description></item><item><term>"Category"</term><description>grouping by Appointment.Categories property value.</description></item><item><term>"Contact"</term><description>grouping by Appointment.Links property value.</description></item><item><term>"Resource"</term><description>grouping by Appointment.Resources property value.</description></item></list></para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowEmptyGroupItem">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control
            should display an empty group item.
            </summary>
      <value>The default value is false.</value>
      <remarks>
            This property only makes sense when the <see cref="P:C1.Win.C1Schedule.C1Schedule.GroupBy" /> property is set.
            If this property is set to True, the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control will display a group item 
            without assigned owner (resource, contact or category). This group item will contain all appointments, 
            which don't fall into other group items. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowGroupNavigation">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control
            should display group navigation buttons.
            </summary>
      <value>The default value is true.</value>
      <remarks>
            This property only makes sense when the <see cref="P:C1.Win.C1Schedule.C1Schedule.GroupBy" /> property is set.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.EmptyGroupName">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used as default value for the <see cref="P:C1.Win.C1Schedule.ScheduleGroupItem.Name" /> property.
            The default value is "Calendar".
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.GroupItems">
      <summary>
            Gets a collection of all available <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> objects for the currently set type of grouping.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.VisibleGroupItems">
      <summary>
            Gets a collection of currently visible <see cref="T:C1.Win.C1Schedule.ScheduleGroupItem" /> objects.
            This collection can be used in xaml in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control templates.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.Settings">
      <summary>
            Gets the <see cref="T:C1.Win.C1Schedule.C1ScheduleSettings" /> object for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.AppointmentComparison">
      <summary>
            Gets or sets the <see cref="T:System.Comparison`1" /> delegate which is used by 
            the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control to sort appointments in the Month and Office 2003 Week views.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeViewChange">
      <summary>
            Fired before the <see cref="P:C1.Win.C1Schedule.C1Schedule.ViewType" /> property change.
            </summary>
      <remarks>Change BeforeViewChangeEventArgs properties to cancel action, to set other
            view type or to set other range of dates.</remarks>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentTooltipShow">
      <summary>
            Occurs before the appointment tooltip is shown.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentFormat">
      <summary>
            Occurs before the appointment content is formatted.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeTimeFormat">
      <summary>
             Occurs before the time interval is formatted. 
             </summary>
      <remarks>Use this event to alter default time interval appearance. 
             For example, to display different working hours for different days.</remarks>
      <example> This sample shows how to alter time interval appearance depending on <see cref="T:C1.Win.C1Schedule.BeforeTimeFormatEventArgs" /> properties.
             <code>
            private void c1Schedule1_BeforeTimeFormat(object sender, BeforeTimeFormatEventArgs e)
            {
                if (e.Start.TimeOfDay == TimeSpan.FromMinutes(120))
                {
                    e.WorkTime = true;
                    if (e.Start.DayOfWeek == DayOfWeek.Sunday)
                    {
                        e.Background = Color.Red;
                    }
                }
                else if (e.Start.TimeOfDay == TimeSpan.FromMinutes(240) &amp;&amp;  e.Start.DayOfWeek != DayOfWeek.Sunday)
                {
                    e.Background = c1Schedule1.Theme.Palette.FreeHourBorder;
               }
                else
                {
                    if (e.Start.DayOfWeek == DayOfWeek.Sunday &amp;&amp; e.Duration.TotalDays == 1)
                    {
                        e.Background = Color.Navy;
                    }
                }
            }        
             </code></example>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeGroupHeaderFormat">
      <summary>
             Occurs before the group header is formatted. 
             </summary>
      <remarks>Use this event to alter default group header appearance. 
             You can change group header style, tab shape or displayed content.</remarks>
      <example> This sample shows how to alter group header appearance depending on <see cref="T:C1.Win.C1Schedule.BeforeGroupHeaderFormatEventArgs" /> properties.
             <code>
            private void c1Schedule1_BeforeGroupHeaderFormat(object sender, BeforeGroupHeaderFormatEventArgs e)
            {
                Contact owner = e.Group.Owner as Contact;
                if (owner != null)
                {
                    TestSchedule.NwindDataSet.EmployeesRow row = this.nwindDataSet.Employees.FindByEmployeeID((int)owner.Key[0]);
                    if (row != null)
                    {
                        string imageName = "photo" + row.EmployeeID + ".bmp";
                        if (File.Exists(imageName))
                        {
            					// use image from file
            					// note, C1Schedule only accepts images from internet (http://..), 
            					// application resources (res://..) and local file system (file:///...).
            					e.Html = row.FirstName + " " + row.LastName + "&lt;br&gt;&lt;img src=file:///" + imageName + "/&gt;";
                        }
                    }
                }
                if (e.Style.Hot != null)
                {
                    // Hot style is applied to the group header when ScheduleGroupItem is selected.
                    e.Style.Hot.BackColor2 = e.Style.Hot.BorderColor = Color.DarkSlateGray;
                    e.Style.Hot.ForeColor = Color.WhiteSmoke;
                }
                // use rectangular tab
                e.TriangleTab = false;
            }
             </code></example>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentLinkClicked">
      <summary>
            Event that fires when the user clicks a hyperlink within the appointment element.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeContextMenuShow">
      <summary>
            Occurs before the context menu is shown.
            This event gets fired even if <see cref="P:C1.Win.C1Schedule.C1Schedule.ShowContextMenu" /> property is false.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.SelectionChanged">
      <summary>
            Occurs when the range of visible days is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.SelectedIntervalChanged">
      <summary>
            Occurs when selected time interval is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.SelectedAppointmentsChanged">
      <summary>
            Occurs when the list of selected appointments is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.SelectedDaysChanged">
      <summary>
            Occurs when the range of available days is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeReminderShow">
      <summary>
            Occurs immediately before the Reminder dialog box is displayed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentShow">
      <summary>
            Occurs immediately before the Appointment dialog box is displayed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentCreate">
      <summary>
            Occurs immediately before the Appointment dialog box for the newly created 
            <see cref="T:C1.C1Schedule.Appointment" /> object is displayed.
            </summary>
      <remarks>
        <para>CancelAppointmentEventArgs for this event is initialized according 
            to the currently selected view and date. For example: </para>
        <list type="bullet">
          <item>
            <term>
            </term>
            <description>If there are some selected slots in the DayView, 
            then <see cref="P:C1.C1Schedule.Appointment.Start" /> and 
            <see cref="P:C1.C1Schedule.Appointment.End" /> properties will be initialized 
            accordingly.</description>
          </item>
          <item>
            <term>
            </term>
            <description>If there is a selected day in a WeekView 
            or in a MonthView, the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> 
            property will be set to true.</description>
          </item>
        </list>
        <para>Use this event to prevent the embedded Appointment dialog box showing. </para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentDelete">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> object is deleted by end-user by pressing
            'Delete' button.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentDrop">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> object is dropped by end-user.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentResize">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> object is resized by end-user.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentsLoaded">
      <summary>
            Occurs when <see cref="T:C1.C1Schedule.AppointmentCollection" /> has been loaded by the C1ScheduleStorage.Import method.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentRecurrenceStateChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.Appointment.RecurrenceState" /> property of 
            an <see cref="T:C1.C1Schedule.Appointment" /> object is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentCustomAction">
      <summary>
            Occurs immediately before a custom action of an <see cref="T:C1.C1Schedule.Appointment" /> object executes. 
            </summary>
      <example>
        <code><![CDATA[
            private void c1Schedule1_AppointmentAdded(object sender, AppointmentEventArgs e)
            {
            	// create a new action
            	Action action = new Action();
            	action.Command = "http://www.componentone.com";
            	// set appointment action
            	e.Appointment.Action = action;
            }
            ]]></code>
      </example>
      <remarks>
            To cancel default handling, set CancelAppointmentEventArgs.Cancel property to true.
            </remarks>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentAdded">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is added.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentDeleted">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is deleted.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentChanged">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderAdd">
      <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder" /> object is added.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderChange">
      <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder" /> object has been modified.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderFire">
      <summary>
            Occurs before the <see cref="T:C1.C1Schedule.Reminder" /> object is executed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderSnooze">
      <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder" /> object is dismissed using the Snooze button.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderRemove">
      <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder" /> object has been removed from the collection.
            </summary>
      <remarks>A reminder can be removed from the <see cref="T:C1.C1Schedule.ReminderCollection" /> collection 
            by any of the following means:
            <list type="bullet"><item><term></term><description>The <see cref="T:C1.C1Schedule.ReminderCollection" />'s 
            Remove method.</description></item><item><term></term><description>The <see cref="M:C1.C1Schedule.Reminder.Dismiss" /> 
            method.</description></item><item><term></term><description>When the user clicks the Dismiss button.
            </description></item><item><term></term><description>When a user turns off a meeting reminder 
            from within the associated item.</description></item><item><term></term><description>When a user deletes an item that contains 
            a reminder.</description></item></list></remarks>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeOptionsFormShow">
      <summary>
            Occurs before showing print options form.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforePrint">
      <summary>
            Occurs before printing.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.BeforePrintPreview">
      <summary>
            Occurs before print preview.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Schedule.PrintDocumentStarting">
      <summary>
            Occurs when the print document building is started.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.Theme">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Schedule.Theme" /> object determining the control appearance.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.VisualStyle">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Schedule.VisualStyle" /> value determining 
            control's visual style.
            The default is <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue" />.
            </summary>
      <remarks>
        <para>Setting this property to any value changes the value 
            of the <see cref="P:C1.Win.C1Schedule.C1Schedule.Theme" /> property. </para>
        <para>Setting this property to <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom" /> value 
            results in creating the editable copy of currently used theme.
            The new theme has <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom" /> style
            and an unique string as the Name property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.LargeButtons">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the control 
            and its dialogs should use large icons and buttons.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.AppointmentHeight">
      <summary>
            Gets or sets the <see cref="T:System.Int32" /> value determining the height of appointment elements
            in a Month View mode and Office 2003 Week View modes.
            Default value is -1. If this property is set to default value, appointment height will be
            determined automatically according to the current view font size.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.WeekViewStyle">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Schedule.WeekViewStyleEnum" /> value determining 
            Week View style.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowTitle">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the control 
            shows the title panel.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ViewType">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum" /> value determining 
            currently displayed view.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowWorkTimeOnly">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether the control should show 
            only working hours in a Day View.  
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowAllDayArea">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether the control should show 
            All-Day area in a Day View. Default value is True. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.EditOptions">
      <summary>
            Gets or sets a <see cref="P:C1.Win.C1Schedule.C1Schedule.EditOptions" /> value, determining which 
            actions are allowed to the end-user.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowContextMenu">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether the control 
            should show context menu.  
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ContextMenuStrip">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Schedule.ContextMenuStrip" /> associated with this control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowAppointmentToolTip">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether the control should show 
            tooltip when mouse is over an appointment.  
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.ShowReminderForm">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether the control 
            should show the reminder form when a reminder alerts.  
            </summary>
      <remarks>At runtime user can close Reminder Form by 'x' button.
            This operation doesn't actually dispose Reminder Form or 
            change <see cref="P:C1.Win.C1Schedule.C1Schedule.ShowReminderForm" /> property. 
            It just hides the form. In any moment you can show Reminder Form 
            again by setting the <see cref="P:C1.Win.C1Schedule.C1Schedule.ShowReminderForm" /> property to true.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo" /> object for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.FirstVisibleTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value representing
            the first visible time slot in a DayView.
            </summary>
      <remarks>This property affects only initial scroll position of the DayView.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.DataStorage">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> object for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.BoldedDates">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.DateList" /> object that determines 
            which dates contain appointments. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.SelectedDates">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.DateList" /> object that determines 
            currently selected dates in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.CurrentDate">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value that determines 
            currently selected date in the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.SelectedInterval">
      <summary>
            Gets the <see cref="T:C1.Win.C1Schedule.TimeInterval" /> object representing 
            currently selected time interval.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.SelectedAppointments">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object containing 
            the list of currently selected <see cref="T:C1.C1Schedule.Appointment" /> objects.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.AllowDrop">
      <summary>
            Gets or sets a value indicating whether the control can accept data
            that the user drags onto it.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.PrintInfo">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Schedule.PrintInfo" /> object responsible for printing support.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.BorderStyle">
      <summary>
            Gets or sets the type of border around the control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Schedule.Cursor">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Schedule.Cursor" /> that appears when 
            the mouse moves over the control.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.C1ScheduleSettings">
      <summary>
            Determines auxiliary properties providing different <see cref="T:C1.Win.C1Schedule.C1Schedule" /> object settings.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1ScheduleSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.C1ScheduleSettings" /> class.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowContactsEditing">
      <summary>
            Determines whether end-user has permission to edit Contacts.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and ContactCollection is empty, default Appointment dialog won't 
            show controls for editing Contacts.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowContactsMultiSelection">
      <summary> 
            Determines whether multiple Contact objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowContactsMultiSelection" /> and <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowContactsEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Contact object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple contacts in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowResourcesEditing">
      <summary>
            Determines whether end-user has permission to edit Resources.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and ResourceCollection is empty, default Appointment dialog won't 
            show controls for editing Resources.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowResourcesMultiSelection">
      <summary> 
            Determines whether multiple Resource objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowResourcesMultiSelection" /> and <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowResourcesEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Resource object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple resources in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowCategoriesEditing">
      <summary>
            Determines whether end-user has permission to edit Categories.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and CategoryCollection is empty, default Appointment dialog won't 
            show controls for editing Categories.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowCategoriesMultiSelection">
      <summary> 
            Determines whether multiple Category objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowCategoriesMultiSelection" /> and <see cref="P:C1.Win.C1Schedule.C1ScheduleSettings.AllowCategoriesEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Category object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple categories in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.FirstVisibleTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value representing
            the first visible time slot in a Day/Working Week/Week views.
            </summary>
      <remarks>This property affects only initial scroll position of the Day/Working Week/Week views.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.AutoScrollToFirstAppointment">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether control
            scrolls itself to the earliest appointment in the current view.
            This property only affects Day/Work Week/Week views.
            </summary>
      <remarks>This property only affects initial scroll position.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.SetReminder">
      <summary>
            Gets or sets whether reminder should be set for the newly created appointments.
            </summary>
      <remarks>This property only affects initial setting. End-user will be able to change reminder settings
            for every individual <see cref="T:C1.C1Schedule.Appointment" /> object.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1ScheduleSettings.ReminderTimeBeforeStart">
      <summary>
            Gets or sets the default <see cref="T:System.TimeSpan" /> value which should be used as initial value for the 
            <see cref="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart" /> property.
            </summary>
      <remarks>You should honor this property if you create appointments from code.</remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.AppointmentForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm" /> represents the dialog form for editing
            <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment" /> objects.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm" /> form
            with default settings.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm" /> form
            with default settings.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.</param>
      <param name="start">The start of an appointment.</param>
      <param name="end">The end of an appointment.</param>
      <param name="allDay">Determines whether the new appointment should be 
            an AllDay event.</param>
      <param name="recurring">Determines whether the new appointment should be recurring.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm" /> form
            for editing of the specified <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment" /> object.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.</param>
      <param name="appointment">The <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.CategoryCollection" /> object.
            Use this form for editing the full list of available categories.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.#ctor(C1.C1Schedule.CategoryCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm" /> form.
            </summary>
      <param name="collection">The <see cref="T:C1.C1Schedule.CategoryCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.CategoryCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> object.</param>
      <param name="collection">The <see cref="T:C1.C1Schedule.CategoryCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.CategoryListForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.CategoryListForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.CategoryList" /> object.
            Use this form for editing the list of categories assigned 
            to the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.#ctor(C1.C1Schedule.CategoryList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm" /> form.
            </summary>
      <param name="list">The <see cref="T:C1.C1Schedule.CategoryList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.CategoryList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> object.</param>
      <param name="list">The <see cref="T:C1.C1Schedule.CategoryList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.CategoryListForm.List">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryList" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.CategoryListForm.AllowMasterListEditing">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the end-user 
            has permission to edit master collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.CategoryListForm.AllowMultiSelection">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether multiple items can be checked.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.ContactCollectionForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ContactCollectionForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ContactCollection" /> object.
            Use this form for editing the full list of available contacts.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.#ctor(C1.C1Schedule.ContactCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactCollectionForm" /> form.
            </summary>
      <param name="collection">The <see cref="T:C1.C1Schedule.ContactCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.ContactCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactCollectionForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> object.</param>
      <param name="collection">The <see cref="T:C1.C1Schedule.ContactCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.ContactListForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ContactListForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ContactList" /> object.
            Use this form for editing the list of contacts assigned 
            to the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.#ctor(C1.C1Schedule.ContactList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactListForm" /> form.
            </summary>
      <param name="list">The <see cref="T:C1.C1Schedule.ContactList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.ContactList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactListForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.</param>
      <param name="list">The <see cref="T:C1.C1Schedule.ContactList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ContactListForm.List">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactList" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ContactListForm.AllowMasterListEditing">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the end-user has permission to edit master collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ContactListForm.AllowMultiSelection">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether multiple items can be checked.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.GoToDate">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.GoToDate" /> represents the dialog form for specifying 
            target date and view to switch the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component to.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.GoToDate.#ctor(System.String,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.GoToDate" /> form.
            </summary>
      <param name="dateFormat">Format string for displaying dates.</param>
      <param name="initialDate">Initial date selected in the dialog.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.GoToDate.#ctor(C1.Win.C1Schedule.C1Schedule,System.String,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.GoToDate" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.</param>
      <param name="dateFormat">Format string for displaying dates.</param>
      <param name="initialDate">Initial date selected in the dialog.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.GoToDate.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.GoToDate.Date">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value specifying the target date selected by user.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.GoToDate.ViewType">
      <summary>
            Gets the <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum" /> value specifying the target view type selected by user.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.PaletteForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm" /> represents the dialog form for selecting 
            background colors for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.PaletteForm.#ctor(C1.Win.C1Schedule.C1Schedule)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm" /> form.
            </summary>
      <param name="schedule">The reference to the owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.PaletteForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.RecurrenceForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.RecurrenceForm" /> represents the dialog form for editing
            the recurrence pattern properties.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.RecurrenceForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.RecurrencePattern,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.RecurrenceForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> component.</param>
      <param name="pattern">The <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</param>
      <param name="isNew">The <see cref="T:System.Boolean" /> value indicating 
            if the form will be used for filling the new pattern or for editing of existing one.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.RecurrenceForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ResourceCollection" /> object.
            Use this form for editing the full list of available resources.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.#ctor(C1.C1Schedule.ResourceCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm" /> form.
            </summary>
      <param name="collection">The <see cref="T:C1.C1Schedule.ResourceCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.ResourceCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> object.</param>
      <param name="collection">The <see cref="T:C1.C1Schedule.ResourceCollection" /> object.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.Win.C1Schedule.Forms.ResourceListForm">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ResourceListForm" /> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ResourceList" /> object.
            Use this form for editing the list of resources assigned 
            to the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.#ctor(C1.C1Schedule.ResourceList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceListForm" /> form.
            </summary>
      <param name="list">The <see cref="T:C1.C1Schedule.ResourceList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.ResourceList)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceListForm" /> form.
            </summary>
      <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.</param>
      <param name="list">The <see cref="T:C1.C1Schedule.ResourceList" /> list to edit.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ResourceListForm.List">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceList" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ResourceListForm.AllowMasterListEditing">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the end-user has permission to edit master collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.Forms.ResourceListForm.AllowMultiSelection">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether multiple items can be checked.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.C1Calendar">
      <summary>
            The <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control is a fully functional 
            Outlook-style calendar that enables end-users to select the current date or 
            the set of dates to navigate through the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            Depending on the amount of space available, the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> 
            control can display one or more months at a time. 
            </summary>
      <remarks>
            A functional scheduling application can be created without using 
            the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control, 
            but the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> provides visual navigational capabilities.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.ShouldSerializeCalendarInfo">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.ShouldSerializeTheme">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.ShouldSerializeVisualStyle">
      <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.C1Schedule.C1Calendar.VisualStyle" /> 
            property is set explicitly and should be persisted.
            </summary>
      <returns>True if the property was explicitly set by the user.</returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.ResetVisualStyle">
      <summary>
            Resets the value of the <see cref="P:C1.Win.C1Schedule.C1Calendar.VisualStyle" /> ambient property.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.OnAmbientChangedVisualStyle">
      <summary>
            Method invoked when the <see cref="P:C1.Win.C1Schedule.C1Calendar.VisualStyle" /> property changes.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.GetDisplayRange(System.Boolean)">
      <summary>
            Returns date information that represents the low and high limits of the displayed dates of the control.
            </summary>
      <param name="visible">True to retrieve only the dates that are fully contained in displayed months; 
            otherwise, false.</param>
      <returns>The begin and end dates of the displayed calendar.</returns>
    </member>
    <member name="M:C1.Win.C1Schedule.C1Calendar.Refresh">
      <summary>
            Forces the control to invalidate its client area and immediately redraw 
            itself and any child controls.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Calendar.SelectionChanged">
      <summary>
            Occurs when the range of selected days is changed.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Calendar.BeforeDayTooltipShow">
      <summary>
            Occurs before the day tooltip is shown.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.C1Calendar.BeforeDayFormat">
      <summary>
            Occurs before the day tooltip is shown.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.Schedule">
      <summary>
            Gets or sets the reference to the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> 
            control associated with the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.CalendarInfo">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Calendar.CalendarInfo" /> object for the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control.
            </summary>
      <remarks>If <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control is attached to the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control,
            this property returns the same object as <see cref="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo" /> property.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.ShowWeekNumbers">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether 
            <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control displays week numbers to 
            the left of each row of days.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.MaxSelectionCount">
      <summary>
            Gets or sets the maximum number of days that can be selected in the <see cref="T:C1.Win.C1Schedule.C1Calendar" /> control.
            The default value is 42.
            </summary>
      <exception cref="T:System.ArgumentException">The value is less than 1.</exception>
      <remarks>This property is ignored if C1Calendar control is attached to C1Schedule control and
            property value is greater than it is allowable for C1Schedule navigation. </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.DropDownMonthCount">
      <summary>
            Gets or sets the number of items in dropdown month/year selectors in the month header.
            The default value is 9.
            </summary>
      <remarks>This property value cannot be less than 1 or greater than 12.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.CalendarDimensions">
      <summary>
            Gets or sets the maximum number of months to display in control.
            Actual number of months depends on the available space.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.Theme">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Calendar.Theme" /> object determining the control appearance.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.SelectedDates">
      <summary>
            Gets or sets an array of selected dates.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.BoldedDates">
      <summary>
            Gets or sets an array of bolded dates.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.C1Calendar.VisualStyle">
      <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Calendar.VisualStyle" /> value determining 
            control's visual style.
            The default is <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue" />.
            </summary>
      <remarks>
        <para>Setting this property to any value changes the value 
            of the <see cref="P:C1.Win.C1Schedule.C1Calendar.Theme" /> property. </para>
        <para>Setting this property to <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom" /> value 
            results in creating the editable copy of currently used theme.
            The new theme has <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom" /> style
            and an unique string as the Name property.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.VisualStyle">
      <summary>
            Defines the visual style for the C1Calendar and C1Schedule controls.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Custom">
      <summary>
            Custom visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.System">
      <summary>
            System visual style (uses the current desktop settings).
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue">
      <summary>
            Office 2007 Blue visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black">
      <summary>
            Office 2007 Black visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver">
      <summary>
            Office 2007 Silver visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Black">
      <summary>
            Office 2010 Black visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Blue">
      <summary>
            Office 2010 Blue visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Silver">
      <summary>
            Office 2010 Silver visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue">
      <summary>
            Windows XP Blue visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver">
      <summary>
            Windows XP Silver visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive">
      <summary>
            Windows XP Olive Green visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Royale">
      <summary>
            Windows Media Center Royale visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo">
      <summary>
            Yahoo visual style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Aero">
      <summary>
            Aero visual style.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.BaseTheme">
      <summary>
            The base class for themes in the C1Calendar and C1Schedule controls.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.BaseTheme._themeStyle">
      <summary>
            The <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle" /> value, specifying the type of the <see cref="T:C1.Win.C1Schedule.UI.BaseTheme" /> object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.BaseTheme._locked">
      <summary>
            Determines whether the theme is locked for editing.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.BaseTheme.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.UI.BaseTheme" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.BaseTheme.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.BaseTheme.ToString">
      <summary>
            Returns the value of a <see cref="P:C1.Framework.Theme.Name" /> property.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.BaseTheme.OnThemeChanged">
      <summary>
            Raises the <see cref="E:C1.Win.C1Schedule.UI.BaseTheme.ThemeChanged" /> event
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.BaseTheme.SetStyle(C1.Framework.Style,System.String)">
      <summary>
            Sets the value of the named <see cref="T:C1.Framework.Style" /> object.
            </summary>
      <param name="value">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Name">
      <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle" /> value, specifying the type of the theme.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.BaseFont">
      <summary>
            Set this property in order to change <see cref="P:C1.Framework.Style.Font" />values
            in all <see cref="T:C1.Framework.Style" /> objects at once.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.ImagePrevious">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> object which should be used 
            for displaying the "Previous" button.
            If this property isn't null, the <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.SymbolPrevious" /> property
            will be ignored.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.ImageNext">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> object which should be used 
            for displaying the "Next" button.
            If this property isn't null, the <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.SymbolNext" /> property
            will be ignored.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.SymbolPrevious">
      <summary>
            Gets or sets the <see cref="T:System.Char" /> value determining 
            the symbol which should be used for the "Previous" button.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.SymbolNext">
      <summary>
            Gets or sets the <see cref="T:System.Char" /> value determining 
            the symbol which should be used for the "Next" button.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.ToolTipRoundedCorners">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether
            to show tooltips with rounded corners.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Count">
      <summary>
      </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Comparer">
      <summary>
            Gets the generic equality comparer that is used to determine equality 
            of keys in the collection.
            </summary>
    </member>
    <member name="E:C1.Win.C1Schedule.UI.BaseTheme.Disposed">
      <summary>
            Represents the method that handles the Disposed event of a component. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Site">
      <summary>
            Gets or sets the ISite associated with the IComponent. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.CalendarTheme">
      <summary>
            The <see cref="T:C1.Framework.Theme" /> class represents the theme for the C1Calendar control.
            It is a set of <see cref="T:C1.Framework.Style" /> objects which contain display attributes 
            that determine the appearance of control. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.LoadThemes(System.String)">
      <summary>
            Loads a collection of themes from an Xml file.
            </summary>
      <param name="fileName">Name of the Xml file that contains the themes.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.OnThemeChanged">
      <summary>
      </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.ReadCustomData(System.Xml.XmlNode)">
      <summary>
      </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.WriteCustomData(System.Xml.XmlWriter)">
      <summary>
      </summary>
      <param name="writer">
      </param>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.System">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.System" /> type.
            </summary>
      <remarks>Use this theme to let your application automatically change its appearance
            in accordance with the current desktop settings.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPBlue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Blue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Black">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Silver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2010Blue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Blue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2010Black">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Black" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2010Silver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Silver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPSilver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPOlive">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Royale">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Royale" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Yahoo">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Aero">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Aero" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.XmlDefinition">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing the VisualStyle in xml encoding.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.BaseFont">
      <summary>
            Set this property in order to change <see cref="P:C1.Framework.Style.Font" />values
            in all <see cref="T:C1.Framework.Style" /> objects at once.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.Palettes">
      <summary>
        <see cref="T:C1.Win.C1Schedule.UI.Palettes" /> Class represents a collection of available color
            palettes for the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> visual style.
            <remarks><para><see cref="T:C1.Win.C1Schedule.C1Schedule" /> component uses this collection
            to switch currently used palettes or to show multiple schedules 
            at the same time.</para><para>The key of collection is a <see cref="T:System.Drawing.Color" /> value which is shown 
            in the <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm" /> form.</para><para>For Office 2003 palettes key is a color of the working hour 
            and alternate month days.</para><para>For Office 2007 palettes key is a color of alternate month days,
            all-day area and dark horizontal borders in the day view.</para></remarks></summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.Palettes.GetKeyForItem(C1.Win.C1Schedule.UI.Palette)">
      <summary>
            Returns the key color for <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object 
            accordingly to the value of it's <see cref="P:C1.Win.C1Schedule.UI.Palette.PaletteType" /> property.
            </summary>
      <param name="item">The <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object.</param>
      <returns>The key <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.PaletteType">
      <summary>
        <see cref="T:C1.Win.C1Schedule.UI.PaletteType" /> Enumeration specifies the type 
            of <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object. 
            This type defines the behavior of palette.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.PaletteType.Office2007">
      <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.PaletteType.Office2003">
      <summary>
            Office 2003 palette only includes back and border colors 
            of free and working hours and days. Day headers, grid borders 
            and calendar tabs colors are not changed by such palettes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.PaletteType.Custom">
      <summary>
            Use this type to define your own palettes.
            <remarks><see cref="F:C1.Win.C1Schedule.UI.Palette.WorkHour" /> field should always contain 
            unique <see cref="T:System.Drawing.Color" /> value before adding the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> 
            object to the <see cref="T:C1.Win.C1Schedule.UI.Palettes" /> collection.</remarks><example>
            The next example shows how to create custom palettes and attach them to
            the <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control.
            <code>
            // Clear default palettes.
            c1Schedule.Theme.Palettes.Clear();
            // Create new palette.
            Palette pal = new Palette(PaletteType.Custom);
            // Set work hour color and leave all other colors empty.
            pal.WorkHour = Color.Red;
            // Add palette to the theme palettes.
            c1Schedule.Theme.Palettes.Add(pal);
            pal = new Palette(PaletteType.Custom);
            pal.WorkHour = Color.Yellow;
            c1Schedule.Theme.Palettes.Add(pal);
            pal = new Palette(PaletteType.Custom);
            pal.WorkHour = Color.Green;
            c1Schedule.Theme.Palettes.Add(pal);
            // Select palette in control.
            c1Schedule.Theme.CurrentPalette = Color.Yellow;
            </code></example></summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.PaletteType.Office2010">
      <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.Palette">
      <summary>
        <see cref="T:C1.Win.C1Schedule.UI.Palette" /> Class represents a set of <see cref="T:System.Drawing.Color" />
            values which are used for displaying <see cref="T:C1.Win.C1Schedule.C1Schedule" />.
            <remarks>
            The default value for each color is <see cref="F:System.Drawing.Color.Empty" />. 
            For Office 2003 and custom palettes <see cref="F:C1.Win.C1Schedule.UI.Palette.WorkHour" /> field should
            always contain unique <see cref="T:System.Drawing.Color" /> value before adding the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> 
            object to the <see cref="T:C1.Win.C1Schedule.UI.Palettes" /> collection.
            For Office 2007 palettes <see cref="F:C1.Win.C1Schedule.UI.Palette.AlternateMonth" /> field should
            always contain unique <see cref="T:System.Drawing.Color" /> value before adding the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> 
            object to the <see cref="T:C1.Win.C1Schedule.UI.Palettes" /> collection.
            For other fields <see cref="F:System.Drawing.Color.Empty" /> is allowed. In such case control 
            uses the corresponding color from the theme definition.
            </remarks></summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.Palette.#ctor(C1.Win.C1Schedule.UI.PaletteType)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object.
            </summary>
      <param name="type">The <see cref="P:C1.Win.C1Schedule.UI.Palette.PaletteType" /> value.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.Palette.CreateOffice2003Palette(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object of
            <see cref="F:C1.Win.C1Schedule.UI.PaletteType.Office2003" /> type.
            </summary>
      <param name="freeHour">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying background of free hours and alternate month days.</param>
      <param name="freeHourBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the free hour horizontal borders.</param>
      <param name="freeHourLightBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the free hour horizontal light borders.</param>
      <param name="workHour">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying background of working hours.</param>
      <param name="workHourBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the working hour horizontal borders.</param>
      <param name="workHourLightBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the working hour horizontal light borders.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.Palette.CreateOffice2007Palette(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Schedule.UI.Palette" /> object of
            <see cref="F:C1.Win.C1Schedule.UI.PaletteType.Office2007" /> type.
            </summary>
      <param name="freeHour">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying background of free hours and selected days 
            and the working hour horizontal light borders.</param>
      <param name="freeHourBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the free and working hour horizontal borders, 
            alternate month days background and all-day area background.</param>
      <param name="freeHourLightBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the free hour horizontal light borders.</param>
      <param name="dayHeaderBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying day header borders.</param>
      <param name="dayHeaderBack">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying the day header.</param>
      <param name="dayHeaderBack2">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying gradient color of the day header.</param>
      <param name="border">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying vertical borders in the day view and day borders in other views.</param>
      <param name="selectedSlot">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying selected time slot.</param>
      <param name="monthGridBorder">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying month grid border inside tabs.</param>
      <param name="monthGridText">The <see cref="T:System.Drawing.Color" /> value which is used
            for displaying month grid text inside tabs.</param>
      <returns>
      </returns>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.AlternateMonth">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying background 
            of alternate month days. 
            For Office 2007 palettes this field should always contain unique 
            <see cref="T:System.Drawing.Color" /> value. 
            For other palettes this field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.WorkHour">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying background 
            of working hours.
            For Office 2003 and custom palettes this field should always contain unique 
            <see cref="T:System.Drawing.Color" /> value. 
            For Office 2007 palettes this field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.FreeHour">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying background 
            of free hours. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.FreeHourBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying free hours horizontal
            dark border. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.FreeHourLightBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying free hours horizontal
            light border. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use the <see cref="F:C1.Win.C1Schedule.UI.Palette.FreeHourBorder" /> value.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.WorkHourBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying working hours
            horizontal dark border. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.WorkHourLightBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying working hours
            horizontal light border. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use the <see cref="F:C1.Win.C1Schedule.UI.Palette.WorkHourBorder" /> value.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.DayHeaderBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying day header border.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.DayHeaderBackground">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying day header background.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.DayHeaderBackground2">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying day header gradient background.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.Border">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying day borders.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.SelectedSlot">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying background 
            of the selected time slots. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use back color of the 
            <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.MonthDayHeaderSelected" /> style.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.MonthGridBorder">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying month grid 
            header border inside tabs if <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007GroupTabs" /> is true.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.MonthGridText">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying month grid
            header text inside tabs if <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007GroupTabs" /> is true.
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="F:C1.Win.C1Schedule.UI.Palette.SelectedDay">
      <summary>
            The <see cref="T:System.Drawing.Color" /> value which is used for displaying background 
            of the selected day. 
            This field can be <see cref="F:System.Drawing.Color.Empty" />. 
            In such case control will use <see cref="T:System.Drawing.Color" /> value from the 
            theme definition.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.Palette.PaletteType">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.UI.Palette.PaletteType" /> value.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.Palette.KeyColor">
      <summary>
            Gets the key <see cref="T:System.Drawing.Color" /> value for the current palette.
            </summary>
    </member>
    <member name="T:C1.Win.C1Schedule.UI.ScheduleTheme">
      <summary>
            The <see cref="T:C1.Framework.Theme" /> class represents the theme for the C1Schedule control.
            It is a set of <see cref="T:C1.Framework.Style" /> objects which contain display attributes 
            that determine the appearance of control. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.ReadCustomData(System.Xml.XmlNode)">
      <summary>
      </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.WriteCustomData(System.Xml.XmlWriter)">
      <summary>
      </summary>
      <param name="writer">
      </param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.OnThemeChanged">
      <summary>
      </summary>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.LoadThemes(System.String)">
      <summary>
            Loads a collection of themes from an Xml file.
            </summary>
      <param name="fileName">Name of the Xml file that contains the themes.</param>
    </member>
    <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.UpdatePalette">
      <summary>
            Updates all C1Schedule styles according to the currently selected palette.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.System">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.System" /> type.
            </summary>
      <remarks>Use this theme to let your application automatically change its appearance
            in accordance with the current desktop settings.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPBlue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPSilver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPOlive">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Royale">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Royale" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Yahoo">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Aero">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Aero" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Blue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Black">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Silver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2010Blue">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Blue" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2010Black">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Black" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2010Silver">
      <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2010Silver" /> type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.XmlDefinition">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing the VisualStyle in xml encoding.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BaseFont">
      <summary>
            Set this property in order to change <see cref="P:C1.Framework.Style.Font" /> values
            in all <see cref="T:C1.Framework.Style" /> objects at once.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TitleImage">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> object which should be used 
            for displaying the image in the right corner of the title.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TimeRulerMinutesFont">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Font" /> object which should be used 
            for displaying minutes on the Time Ruler.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TitleText">
      <summary>
            Gets or sets the string which is displayed in the title.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowMinuteLine">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show line between minutes on the time ruler.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowEndTimeMonthView">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show appointment end time in the month view.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowTimeMonthView">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show appointment time in the month view.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.AppointmentCornerRadius">
      <summary>
            Gets or sets a <see cref="T:System.Int32" /> value determining appointment corner radius.
            </summary>
      <remarks>This property only makes sense for bubble look appointments.</remarks>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowEndTimeWeekView">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show appointment end time in the Office 2003 style week view.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowNavigationPanels">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show navigation panels at the sides of views.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowBrowseButtons">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show browse buttons in the title.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowDayStatus">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            show day availability status in the Day View.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.HighlightDayStatus">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether to
            highlight availability status. Set this value to true to change day or
            time slot background according to the appointment availability status.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BubbleLook">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining
            how to show appointments. Set this property to true to
            show bubble look appointments with gradient background.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.UseOffice2007Pallettes">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining
            if control uses Office 2003 or Office 2007 palettes should be used. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowTodayBorder">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining
            if control should show orange border around today date
            (as in Office 2007). 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowWeekTabs">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining
            if control should show week tabs in the MonthView 
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.CurrentPalette">
      <summary>
            Gets or sets <see cref="T:System.Drawing.Color" /> value determining the currently used palette.
            At setting this property <see cref="T:C1.Win.C1Schedule.C1Schedule" /> control tries to find corresponding
            palette in <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palettes" /> collection and attaches it to the views.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palette">
      <summary>
            Gets the currently used <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palette" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palettes">
      <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palettes" /> collection available for the current theme.
            </summary>
      <remarks>If embedded <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm" /> is good enough
            for your application, you can rely on it and don't use <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palettes" />,
            <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.Palette" /> and <see cref="P:C1.Win.C1Schedule.UI.ScheduleTheme.CurrentPalette" /> properties 
            in your code.</remarks>
      <example>
            The next example shows how to switch palettes at run-time from the code.
            <code>
            // Get available palettes.
            Palettes pals = c1Schedule.Theme.Palettes;
            // Get key color from palette.
            Palette pal = pals[0];
            // You may get key colors from all palettes and show them to the
            // end-user in order to select desired palette.
            // ...
            // Select palette in control.
            c1Schedule.Theme.CurrentPalette = pal.KeyColor;
            </code></example>
    </member>
  </members>
</doc>