<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.C1Pdf.2</name>
  </assembly>
  <members>
    <member name="T:C1.C1Pdf.AttachmentIconEnum">
      <summary>
            Specifies the type of attachment icon to use.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.AttachmentIconEnum.Paperclip">
      <summary>
            Paper Clip attachment icon.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.AttachmentIconEnum.PushPin">
      <summary>
            Pushpin attachment icon.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.AttachmentIconEnum.Tag">
      <summary>
            Tag attachment icon.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.AttachmentIconEnum.Graph">
      <summary>
            Graph attachment icon.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.ImageSizeModeEnum">
      <summary>
            Specifies how to render images into a rectangle.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageSizeModeEnum.Clip">
      <summary>
            Image is clipped to the rectangle.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageSizeModeEnum.Stretch">
      <summary>
            Image is stretched to fill the rectangle.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageSizeModeEnum.Scale">
      <summary>
            Image is scaled to fill as much of the rectangle as possible,
            while keeping the original aspect ratio.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.ImageQualityEnum">
      <summary>
            Determines the quality of bitmaps added to the document with the 
            <see cref="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)" /> method.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageQualityEnum.Low">
      <summary>
            Low quality, small file size.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageQualityEnum.Medium">
      <summary>
            Medium quality, medium file size.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageQualityEnum.Default">
      <summary>
            High quality, medium/large file size.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.ImageQualityEnum.High">
      <summary>
            Highest quality, largest file size.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.C1PdfDocument">
      <summary>
            Provides methods to create and save Pdf documents.
            </summary>
      <remarks>
        <para>When you create an instance of the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class, you 
            get a Pdf document with a single blank page. You can then add content to the 
            page using methods similar to those available in the .NET Graphics class 
            (<see cref="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />, 
            <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />, etc.).</para>
        <para>You can add new pages using the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage" /> method, 
            and select the page size using the <see cref="P:C1.C1Pdf.C1PdfDocument.PaperKind" /> or <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize" /> 
            properties.</para>
        <para>When the document is ready, you can save it to a file or a stream using the 
            <see cref="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.String)" /> method.</para>
        <para>The coordinate system used by <see cref="T:C1.C1Pdf.C1PdfDocument" /> is based on 
            points, with the origin located at the top left corner of the page. You can 
            retrieve the page rectangle (measured in points) using the 
            <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageRectangle" /> property.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Pdf.C1PdfDocumentBase">
      <summary>
            Provides low-level methods to create and save Pdf documents.
            </summary>
      <remarks>
            This is the base for the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocumentBase.Clear">
      <summary>
            Restores the document to its initial state.
            </summary>
      <remarks>
            All current content and security settings are discarded, a single empty page is created, and 
            the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage" /> property is set to zero.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocumentBase.NewPage">
      <summary>
            Starts a new page.
            </summary>
      <remarks>
            Adds a blank page to the document and sets the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage" /> property 
            to make it the currently active page.
            <para>The size of the new page is defined by the value of the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize" /> property.</para><para>If you want the new page to have a different size than the rest of the document, 
            create the new page first, then set the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize" /> property.</para></remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.String)">
      <summary>
            Saves the Pdf document to a file.
            </summary>
      <param name="fileName">Name of the Pdf file to create.</param>
      <remarks>
            Saving the Pdf document to a file requires that the file be available 
            for writing. If the file already exists and is in use by an application 
            (such as the Adobe Acrobat Reader), the method will throw an exception.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.IO.Stream)">
      <summary>
            Saves the Pdf document to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> object to use for saving the document.</param>
      <remarks>
            Saving the Pdf document to a <see cref="T:System.IO.Stream" /> object is often used in Web 
            scenarios, when you are creating a Response object or storing the document in the 
            a cache, and don't want to create temporary files.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocumentBase.Write(System.String,System.Object[])">
      <summary>
            Writes raw content into the Pdf stream for the current page.
            </summary>
      <param name="format">Format string, as in <see cref="M:System.String.Format(System.String,System.Object)" />.</param>
      <param name="args">Array of objects to write using <paramref name="format" />.</param>
      <remarks>
            This is a low-level method that allows you to insert Pdf commands directly 
            into the page stream. It is intended for use by derived classes and requires 
            knowledge of the Pdf document structure and syntax.
            </remarks>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.DocumentInfo">
      <summary>
            Gets the <see cref="T:C1.C1Pdf.PdfDocumentInfo" /> object that contains information about 
            this document (author, etc).
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.ViewerPreferences">
      <summary>
            Gets the <see cref="T:C1.C1Pdf.PdfViewerPreferences" /> object that contains information about 
            how this document should be displayed.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.Security">
      <summary>
            Gets the <see cref="T:C1.C1Pdf.PdfSecurity" /> object that manages security for this 
            document (passwords, etc).
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.FontType">
      <summary>
            Gets or sets how fonts should be encoded when saving the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.Compression">
      <summary>
            Gets or sets the compression level to use when saving the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.ImageQuality">
      <summary>
            Gets or sets the image quality to use when saving the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.PageSize">
      <summary>
            Gets or sets the default page size for the document (in points).
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.PageRectangle">
      <summary>
            Gets a rectangle that represents the surface of the current page (in points).
            </summary>
      <remarks>
            This property returns a <see cref="T:System.Drawing.RectangleF" /> located at point (0,0) with 
            size equal to the size of the current page. It can be used as a starting 
            point for building rectangles that will be used for drawing on the page. 
            </remarks>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage">
      <summary>
            Gets or sets the index of the current page within the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocumentBase.Pages">
      <summary>
            Gets the collection of <see cref="T:C1.C1Pdf.PdfPage" /> objects that make up the document.
            </summary>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class.
            </summary>
      <remarks>The new document contains a single empty page, and the
            default page size is set to Letter (8.5 x 11 inches).</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class.
            </summary>
      <param name="paperKind">The default paper size for the document.</param>
      <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            parameter.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class.
            </summary>
      <param name="paperKind">The default paper size for the document.</param>
      <param name="landscape">The default paper orientation for the document.</param>
      <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            and <paramref>landscape</paramref> parameters.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument" /> class.
            </summary>
      <param name="pageSizeInPoints">The default paper size for the document, in points.</param>
      <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>pageSizeInPoints</paramref>
            parameter.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the rectangle.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="y">x-coordinate of the upper-left corner of the rectangle to draw.</param>
      <param name="width">Width of the rectangle to draw.</param>
      <param name="height">Height of the rectangle to draw.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
      <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the rectangle.</param>
      <param name="rc">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the rectangle.</param>
      <param name="x">x-coordinate of the upper-left corner of the rectangle to fill.</param>
      <param name="y">x-coordinate of the upper-left corner of the rectangle to fill.</param>
      <param name="width">Width of the rectangle to fill.</param>
      <param name="height">Height of the rectangle to fill.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the rectangle.</param>
      <param name="rc">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to fill.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Draws a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF" /> and <see cref="T:System.Drawing.SizeF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the rectangle.</param>
      <param name="rc">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to draw.</param>
      <param name="corners">A <see cref="T:System.Drawing.SizeF" /> structure that contains the radius of the rectangle corners.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            Fills the interior of a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF" /> and <see cref="T:System.Drawing.SizeF" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the rectangle.</param>
      <param name="rc">A <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to fill.</param>
      <param name="corners">A <see cref="T:System.Drawing.SizeF" /> structure that contains the radius of the rectangle corners.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the line.</param>
      <param name="x1">x-coordinate of the first point.</param>
      <param name="y1">y-coordinate of the first point.</param>
      <param name="x2">x-coordinate of the second point.</param>
      <param name="y2">y-coordinate of the second point.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the line.</param>
      <param name="pt1">The first point.</param>
      <param name="pt2">The second point.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the line segments.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points to connect.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the polygon.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
      <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the polygon.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
      <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures using the specified fill mode.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the polygon.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon.</param>
      <param name="fillMode">
        <see cref="T:System.Drawing.Drawing2D.FillMode" /> parameter that determines how to handle overlapping areas within the polygon.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Draws a Bezier spline defined by four <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the Bezier spline.</param>
      <param name="start">
        <see cref="T:System.Drawing.PointF" /> structure that represents the starting point of the curve.</param>
      <param name="ctl1">
        <see cref="T:System.Drawing.PointF" /> structure that represents the first control point for the curve.</param>
      <param name="ctl2">
        <see cref="T:System.Drawing.PointF" /> structure that represents the second control point for the curve.</param>
      <param name="end">
        <see cref="T:System.Drawing.PointF" /> structure that represents the ending point of the curve.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
            Draws a series of Bezier splines from an array of <see cref="T:System.Drawing.PointF" /> structures.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the Bezier splines.</param>
      <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points that determine the curve.</param>
      <remarks>
        <para>The first spline requires four points, and each additional spline requires
            three additional points (it starts from the last point in the previous spline). 
            Therefore, the <paramref name="points" /> array must contain at least four points,
            and the total length minus one must be a multiple of three.</para>
        <para>All coordinates are expressed in points, measured from the upper-left corner of the page.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draws an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the ellipse.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
      <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
      <param name="width">Width of the bounding rectangle.</param>
      <param name="height">Height of the bounding rectangle.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
      <summary>
            Draws an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the rectangle.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the bounding rectangle.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the ellipse.</param>
      <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
      <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
      <param name="width">Width of the bounding rectangle.</param>
      <param name="height">Height of the bounding rectangle.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the ellipse.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the bounding rectangle.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the pie shape.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Fills a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the pie shape.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Draws an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen" /> object that determines the color, width, and style of the arc.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle of the ellipse that contains the arc.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
            Fills an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that determines the color used to fill the arc.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
      <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
      <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
      <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
      <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> 
            object and formatted with the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the text.</param>
      <param name="width">Maximum width of the string.</param>
      <param name="sf">A <see cref="T:System.Drawing.StringFormat" /> object that determines whether word wrapping is allowed.</param>
      <returns>The size of the string expressed in points.</returns>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
      <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font" /> object
            into a rectangle with the specified width. 
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the text.</param>
      <param name="width">Maximum width of the string.</param>
      <returns>The size of the string expressed in points.</returns>
      <remarks>This overload wraps the string to prevent any lines from getting
            wider than the <paramref name="width" /> parameter. The value returned contains
            the given width and the height needed to render the entire string.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font)">
      <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font" /> object. 
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the text.</param>
      <returns>The size of the string expressed in points.</returns>
      <remarks>This overload returns the width and height of the string without wrapping.
            Unless the <paramref name="text" /> parameter contains line break characters, the 
            height returned corresponds to the font height.</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
      <param name="sf">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes applied to the drawn text.</param>
      <param name="firstChar">Index of the first character that will be rendered.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
      <remarks>
        <para>The <paramref name="sf" /> contains properties that specify formatting options. Use the
            <see cref="P:System.Drawing.StringFormat.Alignment" /> property to specify horizontal alignment and the
            <see cref="P:System.Drawing.StringFormat.LineAlignment" /> property to specify vertical alignment.</para>
        <para>Use the <see cref="P:System.Drawing.StringFormat.FormatFlags" /> property to specify clipping and wrapping.</para>
        <para>To render text in the vertical direction, use the <see cref="F:System.Drawing.StringFormatFlags.DirectionVertical" />.
            By itself, this flag will cause text to render from the bottom to the top of the rectangle.
            Combined with the <see cref="F:System.Drawing.StringFormatFlags.DirectionRightToLeft" /> flags, it will cause text to render from
            the top to the bottom of the rectangle.</para>
        <para>The <b>DrawString</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page.</para>
      </remarks>
      <example>
            The code below renders a long string into several pages, using the return value
            from the <b>DrawString</b> method to determine where to continue printing.
            <code>
            // render string spanning multiple pages
            for (int start = 0; start &lt; int.MaxValue;)
            {
            	// render as much as will fit into the rectangle
            	start = _c1pdf.DrawString(text, font, Brushes.Black, rcPage, start);
            		
            	// move on to the next page
            	_c1pdf.NewPage();
            }
            </code></example>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
      <param name="sf">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes applied to the drawn text.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
      <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)" />
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
      <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
      <param name="firstChar">Index of the first character that will be rendered.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
      <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)" />
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, 
            in points from the top left corner of the page.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
      <remarks>
            This overload renders strings aligned to the top left corner of the specified rectangle,
            wrapping text as needed within the rectangle, without clipping, and in the horizontal
            direction. To change any of these defaults, use the overload that allows you to specify
            a <see cref="T:System.Drawing.StringFormat" /> parameter.
            </remarks>
      <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)" />
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
      <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" /> object.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="pt">
        <see cref="T:System.Drawing.PointF" /> structure that specifies the location of the drawn text, in points</param>
      <param name="sf">
        <see cref="T:System.Drawing.StringFormat" /> object that specifies formatting attributes applied to the drawn text.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
      <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)" />
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
      <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="text">String to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="pt">
        <see cref="T:System.Drawing.PointF" /> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
      <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)" />
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location,
            adjusting the image size as specified by the <paramref name="align" /> and 
            <paramref name="mode" /> parameters.
            </summary>
      <param name="img">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
      <param name="align">
        <see cref="T:System.Drawing.ContentAlignment" /> value that specifies how the image should be aligned within the rectangle.</param>
      <param name="mode">
        <see cref="T:C1.C1Pdf.ImageSizeModeEnum" /> value that specifies how the image should be sized to fit the rectangle.</param>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location,
            stretching it to fit the destination rectangle.
            </summary>
      <param name="img">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
      <remarks>
            The <b>DrawImage</b> method can be used to render bitmaps and metafiles. When used with
            metafiles, it enumerates the drawing commands in the metafile and translates them into low-level
            drawing primitives. This results in resolution-independent images.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <summary>
            Draws the specified <see cref="T:System.Drawing.Image" /> object at the specified location,
            clipping the output to the given clipping rectangle.
            </summary>
      <param name="img">
        <see cref="T:System.Drawing.Image" /> object to draw.</param>
      <param name="rcImage">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
      <param name="rcClip">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies a clipping rectangle on the page. No part of the image is drawn outside the clipping rectangle.</param>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font,System.Single)">
      <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font" /> object
            into a rectangle with the specified width. 
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the text.</param>
      <param name="width">Maximum width of the string.</param>
      <returns>The size of the string expressed in points.</returns>
      <remarks>
        <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)" />, except it recognizes
            Rtf (Rich Text Format) strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
        <para>For details, see the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" /> method.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font)">
      <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font" /> object.
            </summary>
      <param name="text">String to measure.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the text.</param>
      <returns>The size of the string expressed in points.</returns>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
      <param name="text">Rtf string to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, in points from the top left 
            corner of the page.</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
      <remarks>
        <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)" />, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
        <para>There are two types of Rtf strings:</para>
        <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox" /> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf" /> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font" /> and <paramref name="brush" /> parameters are not used.</para>
        <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font" /> and <paramref name="brush" /> parameters are used
            to build the Rtf header automatically.</para>
        <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. To do this, use the overload that
            takes the starting character in the text as a parameter.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
      <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects,
            starting at a given offset within the string.
            </summary>
      <param name="text">Rtf string to draw.</param>
      <param name="font">
        <see cref="T:System.Drawing.Font" /> object that defines the appearance and size of the drawn text.</param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush" /> object that defines the color of the drawn text.</param>
      <param name="rc">
        <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
      <param name="firstChar">Index of the first character to draw (usually the return value of a previous call to <b>DrawStringRtf</b>).</param>
      <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
      <remarks>
        <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)" />, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
        <para>There are two types of Rtf strings:</para>
        <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox" /> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf" /> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font" /> and <paramref name="brush" /> parameters are not used.</para>
        <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font" /> and <paramref name="brush" /> parameters are used
            to build the Rtf header automatically.</para>
        <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. Note that this value is not an index 
            into the raw Rtf input, but into the text represented by the Rtf. See example below.</para>
      </remarks>
      <example>
            The code below renders a long string into several pages, using the return value
            from the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method to determine where to continue printing.
            <code>
            // calculate page rectangle
            RectangleF rcPage = _c1pdf.PageRectangle;
            rcPage.Inflate(-72, -72);
            
            // get Rtf to render
            string text = richTextBox1.Rtf;
            
            // print the Rtf string spanning multiple pages
            _c1pdf.Clear();
            for (int start = 0; start &lt; int.MaxValue; )
            {
                if (start &gt; 0) _c1pdf.NewPage();
                start = _c1pdf.DrawStringRtf(text, Font, 
                       Brushes.Black, rcPage, start);
            }
            
            // show the result
            string fn = @"c:\temp\test\rtf.pdf";
            _c1pdf.Save(fn);
            System.Diagnostics.Process.Start(fn);
            </code></example>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)">
      <summary>
            Adds a bookmark to the current page.
            </summary>
      <param name="text">Text that appears on the outline tree.</param>
      <param name="level">Outline level (zero is the top level).</param>
      <param name="y">Position on the current page where the outline entry is located (in points).</param>
      <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Int32,System.Single)">
      <summary>
            Adds a bookmark to the specified page.
            </summary>
      <param name="text">Text that appears on the outline tree.</param>
      <param name="level">Outline level (zero is the top level).</param>
      <param name="page">Index of the page that contains the bookmark.</param>
      <param name="y">Position on the specified page where the outline entry is located (in points).</param>
      <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)">
      <summary>
            Adds a hyperlink to the current page.
            </summary>
      <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
      <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Int32,System.Drawing.RectangleF)">
      <summary>
            Adds a hyperlink to the document.
            </summary>
      <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
      <param name="page">Index of the page that contains the hyperlink</param>
      <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
      <remarks>
        <para>Hyperlinks can be external (Urls and file names) or local (other locations within the same document).</para>
        <para>Local links are useful when you want to implement some type of cross-referencing within the document, such 
            as a table of contents or an index. Local links are identical to regular hyperlinks, except for two things:</para>
        <para>1) The <paramref name="url" /> parameter must start with a "#", and </para>
        <para>2) You must specify the target location for the link using the <see cref="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)" /> method.</para>
        <para>Note that the <b>AddLink</b> method does not add any visible content to the page, so you will 
            usually need another command along with <b>AddLink</b> to specify some text or an image that the user 
            can see, as the example below demonstrates.</para>
      </remarks>
      <example>
            The code below adds a string that says "Visit ComponentOne" and a link that takes the user to the ComponentOne home page:
            <code>
            RectangleF rc = new RectangleF(50, 50, 100, 15);
            Font font = new Font("Arial", 10, FontStyle.Underline);
            _c1pdf.AddLink("http://www.componentone.com", rc);
            _c1pdf.DrawString("Visit ComponentOne", font, Brushes.Blue, rc);
            </code></example>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)">
      <summary>
            Adds a hyperlink target to the current page.
            </summary>
      <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)" /> method).</param>
      <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
      <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)" /> method for details and an example.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Int32,System.Drawing.RectangleF)">
      <summary>
            Adds a hyperlink target to the document.
            </summary>
      <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)" /> method).</param>
      <param name="page">Index of the page that will contain the hyperlink target.</param>
      <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
      <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)" /> method for details and an example.
            </remarks>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF)">
      <summary>
            Adds a file attachment to the current page.
            </summary>
      <param name="fileName">Name of the file that will be included as an attachment.</param>
      <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
      <summary>
            Adds a file attachment to the current page.
            </summary>
      <param name="fileName">Name of the file that will be included as an attachment.</param>
      <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
      <param name="icon">
        <see cref="T:C1.C1Pdf.AttachmentIconEnum" /> value that determines the appearance of the attachment icon.</param>
      <param name="iconColor">
        <see cref="T:System.Drawing.Color" /> of the attachment icon.</param>
    </member>
    <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,System.Int32,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
      <summary>
            Adds a file attachment to the document.
            </summary>
      <param name="fileName">Name of the file that will be included as an attachment.</param>
      <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
      <param name="page">Index of the page that contains the attachment.</param>
      <param name="icon">
        <see cref="T:C1.C1Pdf.AttachmentIconEnum" /> value that determines the appearance of the attachment icon.</param>
      <param name="iconColor">
        <see cref="T:System.Drawing.Color" /> of the attachment icon.</param>
      <remarks>
            When the user moves the mouse over an area of the page that contains an attachment, 
            the mouse pointer and tool tip change to indicate that the user can retrieve the attachment. 
            The user can right-click the attachment area to open or save the attachment.
            </remarks>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocument.PaperKind">
      <summary>
            Gets or sets the default page size for the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocument.Landscape">
      <summary>
            Gets or sets the default page orientation for the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocument.PageSize">
      <summary>
            Gets or sets the default page size for the document (in points).
            </summary>
    </member>
    <member name="P:C1.C1Pdf.C1PdfDocument.CurrentPage">
      <summary>
            Gets or sets the index of the current page within the document.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property determines which page of the document should 
            receive the output from the methods that generate content (e.g. <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />).</para>
        <para>The value is an integer ranging from -1 (no active page) to <see cref="P:C1.C1Pdf.C1PdfDocumentBase.Pages" />.<see cref="P:System.Collections.ArrayList.Count" />-1.</para>
        <para>You rarely have to use the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property while creating a document. 
            When a <see cref="T:C1.C1Pdf.C1PdfDocument" /> object is created, a blank page is automatically added 
            and becomes the current page, so you can immediately start adding content to it.
            When the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage" /> method is invoked, a new page is added to the document 
            and becomes the current page.</para>
        <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property is useful when you want to reopen pages that 
            have already been generated and add content to them (for example, page headers and footers).</para>
      </remarks>
    </member>
    <member name="T:C1.C1Pdf.CompressionEnum">
      <summary>
            Determines the level of compression used when saving the document.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.CompressionEnum.None">
      <summary>
            No compression (useful for debugging).
            </summary>
    </member>
    <member name="F:C1.C1Pdf.CompressionEnum.BestSpeed">
      <summary>
            Low compression, fastest save.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.CompressionEnum.BestCompression">
      <summary>
            Highest compression, slowest save.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.CompressionEnum.Default">
      <summary>
            High compression, fast save.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.FontTypeEnum">
      <summary>
            Determines how fonts are encoded in the document.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.FontTypeEnum.Standard">
      <summary>
            Use only standard Pdf fonts (Helvetica, Times, Symbol).
            </summary>
    </member>
    <member name="F:C1.C1Pdf.FontTypeEnum.TrueType">
      <summary>
            Use TrueType fonts, no embedding (viewer must have fonts installed).
            </summary>
    </member>
    <member name="F:C1.C1Pdf.FontTypeEnum.Embedded">
      <summary>
            Use embedded TrueType fonts.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PdfDocumentInfo">
      <summary>
            Contains information about the document. This information includes 
            the document author, title, keywords, etc.
            </summary>
      <remarks>
        <para>You don't have to provide this information, it is optional. If provided, 
            it is saved with the document and is available to the reader application.</para>
        <para>Some reader applications may allow users to search documents by author, 
            subject, or keyword.</para>
        <para>The Adobe Acrobat Reader 5 does not provide such search mechanism, 
            but it does allow users to view the document information.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Title">
      <summary>
            Gets or sets the title of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Creator">
      <summary>
            Gets or sets the name of the application that created the original document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Producer">
      <summary>
            Gets or sets the name of the application that created the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Author">
      <summary>
            Gets or sets the name of the person that created the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Subject">
      <summary>
            Gets or sets the subject of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Keywords">
      <summary>
            Gets or sets keywords associated with the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.CreationDate">
      <summary>
            Gets or sets the creation date and time of the Pdf document.
            </summary>
      <remarks>
        <para>The default value for this property is the <b>DateTime.MinValue</b>, which
            causes <see cref="T:C1.C1Pdf.C1PdfDocument" /> to use the date and time when the document
            is saved as the creation date.</para>
      </remarks>
    </member>
    <member name="T:C1.C1Pdf.PdfPageCollection">
      <summary>
            A collection of <see cref="T:C1.C1Pdf.PdfPage" /> objects that make up the document.
            </summary>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Add(C1.C1Pdf.PdfPage)">
      <summary>
            Adds a page to the document.
            </summary>
      <param name="page">
        <see cref="T:C1.C1Pdf.PdfPage" /> to add to the document.</param>
      <returns>The index of the new page in the document.</returns>
      <remarks>
        <para>Since the <see cref="T:C1.C1Pdf.PdfPage" /> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
        <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,C1.C1Pdf.PdfPage)">
      <summary>
            Inserts a page at a specific position in the document.
            </summary>
      <param name="index">Position where the new page will be inserted in the document.</param>
      <param name="page">
        <see cref="T:C1.C1Pdf.PdfPage" /> to add to the document.</param>
      <remarks>
        <para>Since the <see cref="T:C1.C1Pdf.PdfPage" /> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
        <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Remove(C1.C1Pdf.PdfPage)">
      <summary>
            Removes a page from a document.
            </summary>
      <param name="page">
        <see cref="T:C1.C1Pdf.PdfPage" /> to remove from the document.</param>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a page at a specific position from the document.
            </summary>
      <param name="index">Index of the page to be removed from the document.</param>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection" /> to the end of the document.
            </summary>
      <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage" /> objects to add to the document.</param>
      <remarks>
        <para>Since the <see cref="T:C1.C1Pdf.PdfPage" /> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
        <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
            Inserts the elements of an <see cref="T:System.Collections.ICollection" /> at a specified position 
            in the document.
            </summary>
      <param name="index">Position where the new pages will be inserted.</param>
      <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage" /> objects to add to the document.</param>
      <remarks>
        <para>Since the <see cref="T:C1.C1Pdf.PdfPage" /> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
        <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of pages from the document.
            </summary>
      <param name="index">Index of the first page to remove.</param>
      <param name="count">Number of pages to remove from the document.</param>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Add">
      <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage" /> and adds it to the end of the document.
            </summary>
      <returns>The index of the new page.</returns>
      <remarks>
        <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize" /> 
            property of the parent document.</para>
        <para>The new page becomes current after it is added to the document (see the 
            <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property).</para>
        <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument" /> by calling the 
            <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage" /> method.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.SizeF)">
      <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage" /> with the specified size and adds it to 
            the end of the document.
            </summary>
      <param name="pageSize">The size of the new page, in points.</param>
      <returns>The index of the new page.</returns>
      <remarks>
        <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property).</para>
        <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument" /> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage" /> method.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.Printing.PaperKind)">
      <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage" /> with the specified size and adds it to 
            the end of the document.
            </summary>
      <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind" />.</param>
      <returns>The index of the new page.</returns>
      <remarks>
        <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property).</para>
        <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument" /> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage" /> method.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32)">
      <summary>
            Creates a new page and inserts it at a specific position in the document.
            </summary>
      <param name="index">The position where the new page will be inserted.</param>
      <remarks>
        <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize" /> property 
            of the parent document.</para>
        <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage" /> property).</para>
      </remarks>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
      <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
      <param name="index">The position where the new page will be inserted.</param>
      <param name="pageSize">The size of the new page, expressed in points.</param>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.Printing.PaperKind)">
      <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
      <param name="index">The position where the new page will be inserted.</param>
      <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind" />.</param>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Clear">
      <summary>
            Removes all pages from the document.
            </summary>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Object)">
      <summary>
            Adds a new page to the document.
            </summary>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Object)">
      <summary>
            Inserts a new page to the document at a specific position.
            </summary>
    </member>
    <member name="M:C1.C1Pdf.PdfPageCollection.Remove(System.Object)">
      <summary>
            Removes a page from the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfPageCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:C1.C1Pdf.PdfPage" /> at a specific position in the document.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PdfPage">
      <summary>
            PdfPage
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfPage.Tag">
      <summary>
            Gets or sets an object associated with the page that contains data
            useful to the application.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PdfSecurity">
      <summary>
            Provides security and encryption services and manages permissions for 
            <see cref="T:C1.C1Pdf.C1PdfDocument" /> objects.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Pdf.PdfSecurity" /> has properties that allow you to specify 
            owner and user passwords for a Pdf document. The <see cref="P:C1.C1Pdf.PdfSecurity.OwnerPassword" />
            is required to change passwords and permissions. The <see cref="P:C1.C1Pdf.PdfSecurity.UserPassword" /> 
            is required to open the document.</para>
        <para>
          <see cref="T:C1.C1Pdf.PdfSecurity" /> also has properties that allow you to specify 
            what permissions a regular user should have. For example, you may allow users 
            to see the document but not to print or edit it.</para>
        <para>You can specify permissions and set only the <see cref="P:C1.C1Pdf.PdfSecurity.OwnerPassword" />, 
            leaving the <see cref="P:C1.C1Pdf.PdfSecurity.UserPassword" /> empty. In this case, anyone will be 
            allowed to open the document, but only the owner will be allowed to change 
            the permissions. </para>
        <para>Note that the encryption scheme used by Pdf is public and is not 100% 
            secure. There are ways to crack encrypted Pdf documents. The security provided 
            is adequate to protect your documents from most casual attacks, but if your 
            data is truly sensitive you should not rely on Pdf encryption alone.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.OwnerPassword">
      <summary>
            Gets or sets the password required to change permissions for the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.UserPassword">
      <summary>
            Gets or sets the password required to open the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.AllowPrint">
      <summary>
            Gets or sets whether the user can print the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.AllowCopyContent">
      <summary>
            Gets or sets whether the user can copy contents from the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.AllowEditContent">
      <summary>
            Gets or sets whether the user can edit the contents of the Pdf document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfSecurity.AllowEditAnnotations">
      <summary>
            Gets or sets whether the user can edit annotations in the Pdf document.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PageLayoutEnum">
      <summary>
            Specifies the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageLayoutEnum.ViewerDefault">
      <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageLayoutEnum.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageLayoutEnum.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PageModeEnum">
      <summary>
            Specifies how the document should be displayed when opened.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageModeEnum.Automatic">
      <summary>
            Document outline visible if available.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageModeEnum.UseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageModeEnum.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageModeEnum.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:C1.C1Pdf.PageModeEnum.FullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="T:C1.C1Pdf.PdfViewerPreferences">
      <summary>
            Represents viewer preferences to be used when displaying the document.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.PageMode">
      <summary>
            Gets or sets how the document should be displayed when opened.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.PageLayout">
      <summary>
            Gets or sets the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.HideToolBar">
      <summary>
            Gets or sets whether to hide the viewer tool bars when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.HideMenuBar">
      <summary>
            Gets or sets whether to hide the viewer menu bar when the document is active.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.FitWindow">
      <summary>
            Gets or sets whether to resize the document's window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="P:C1.C1Pdf.PdfViewerPreferences.CenterWindow">
      <summary>
            Gets or sets whether to position the document's window in the center of the screen.
            </summary>
    </member>
  </members>
</doc>