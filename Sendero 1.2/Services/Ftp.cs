//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.2032.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="FtpSoap", Namespace="http://stockloan.net/")]
public class Ftp : System.Web.Services.Protocols.SoapHttpClientProtocol
{
  public AuthHeader AuthHeaderValue;
    
  /// <remarks/>
  public Ftp(AuthHeader authHeader, string uri) 
  {
    this.Url = uri + "ftp.asmx";
    this.AuthHeaderValue = authHeader;
  }
    
  /// <remarks/>
  [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
  [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockloan.net/FileGet", RequestNamespace="http://stockloan.net/", ResponseNamespace="http://stockloan.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
  public string FileGet(string remotePath, string hostName, string userName, string password) 
  {
    object[] results = this.Invoke("FileGet", new object[] {
                                                             remotePath,
                                                             hostName,
                                                             userName,
                                                             password});
    return ((string)(results[0]));
  }
    
  /// <remarks/>
  public System.IAsyncResult BeginFileGet(string remotePath, string hostName, string userName, string password, System.AsyncCallback callback, object asyncState) 
  {
    return this.BeginInvoke("FileGet", new object[] {
                                                      remotePath,
                                                      hostName,
                                                      userName,
                                                      password}, callback, asyncState);
  }
    
  /// <remarks/>
  public string EndFileGet(System.IAsyncResult asyncResult) 
  {
    object[] results = this.EndInvoke(asyncResult);
    return ((string)(results[0]));
  }
    
  /// <remarks/>
  [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
  [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockloan.net/FilePut", RequestNamespace="http://stockloan.net/", ResponseNamespace="http://stockloan.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
  public void FilePut(string remotePath, string hostName, string userName, string password, string content) 
  {
    this.Invoke("FilePut", new object[] {
                                          remotePath,
                                          hostName,
                                          userName,
                                          password,
                                          content});
  }
    
  /// <remarks/>
  public System.IAsyncResult BeginFilePut(string remotePath, string hostName, string userName, string password, string content, System.AsyncCallback callback, object asyncState) 
  {
    return this.BeginInvoke("FilePut", new object[] {
                                                      remotePath,
                                                      hostName,
                                                      userName,
                                                      password,
                                                      content}, callback, asyncState);
  }
    
  /// <remarks/>
  public void EndFilePut(System.IAsyncResult asyncResult) 
  {
    this.EndInvoke(asyncResult);
  }
    
  /// <remarks/>
  [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
  [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockloan.net/FileKill", RequestNamespace="http://stockloan.net/", ResponseNamespace="http://stockloan.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
  public void FileKill(string remotePath, string hostName, string userName, string password) 
  {
    this.Invoke("FileKill", new object[] {
                                           remotePath,
                                           hostName,
                                           userName,
                                           password});
  }
    
  /// <remarks/>
  public System.IAsyncResult BeginFileKill(string remotePath, string hostName, string userName, string password, System.AsyncCallback callback, object asyncState) 
  {
    return this.BeginInvoke("FileKill", new object[] {
                                                       remotePath,
                                                       hostName,
                                                       userName,
                                                       password}, callback, asyncState);
  }
    
  /// <remarks/>
  public void EndFileKill(System.IAsyncResult asyncResult) 
  {
    this.EndInvoke(asyncResult);
  }
    
  /// <remarks/>
  [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
  [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockloan.net/FileTime", RequestNamespace="http://stockloan.net/", ResponseNamespace="http://stockloan.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
  public string FileTime(string remotePath, string hostName, string userName, string password) 
  {
    object[] results = this.Invoke("FileTime", new object[] {
                                                              remotePath,
                                                              hostName,
                                                              userName,
                                                              password});
    return ((string)(results[0]));
  }
    
  /// <remarks/>
  public System.IAsyncResult BeginFileTime(string remotePath, string hostName, string userName, string password, System.AsyncCallback callback, object asyncState) 
  {
    return this.BeginInvoke("FileTime", new object[] {
                                                       remotePath,
                                                       hostName,
                                                       userName,
                                                       password}, callback, asyncState);
  }
    
  /// <remarks/>
  public string EndFileTime(System.IAsyncResult asyncResult) 
  {
    object[] results = this.EndInvoke(asyncResult);
    return ((string)(results[0]));
  }
    
  /// <remarks/>
  [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
  [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://stockloan.net/FileExists", RequestNamespace="http://stockloan.net/", ResponseNamespace="http://stockloan.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
  public bool FileExists(string remotePath, string hostName, string userName, string password) 
  {
    object[] results = this.Invoke("FileExists", new object[] {
                                                                remotePath,
                                                                hostName,
                                                                userName,
                                                                password});
    return ((bool)(results[0]));
  }
    
  /// <remarks/>
  public System.IAsyncResult BeginFileExists(string remotePath, string hostName, string userName, string password, System.AsyncCallback callback, object asyncState) 
  {
    return this.BeginInvoke("FileExists", new object[] {
                                                         remotePath,
                                                         hostName,
                                                         userName,
                                                         password}, callback, asyncState);
  }
    
  /// <remarks/>
  public bool EndFileExists(System.IAsyncResult asyncResult) 
  {
    object[] results = this.EndInvoke(asyncResult);
    return ((bool)(results[0]));
  }
}
